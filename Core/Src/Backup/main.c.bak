/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "vl53l5cx_api.h"
#include "vl53l5cx_plugin_detection_thresholds.h"
#include "vl53l5cx_plugin_motion_indicator.h"
#include "vl53l5cx_plugin_xtalk.h"
#include "platform.h"
#define POLLING_TIMEOUT 500 // Zmienna timeoutu w milisekundach

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define VL53L5CX_I2C_ADDRESS 0x29 // Domyślny adres I2C dla czujnika VL53L5CX
/* USER CODE END PD */

/* Private macro ------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
VL53L5CX_Configuration dev1;
VL53L5CX_ResultsData results1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void ProcessData(VL53L5CX_Configuration *dev, VL53L5CX_ResultsData *results);
void I2C_Scan(void);
void Initialize_Sensor(void);
void Reset_Sensor(void);
uint8_t PollingSensor(VL53L5CX_Configuration *dev);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char* ptr, int len){
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  // Test UART
  printf("UART działa poprawnie\r\n");

  Reset_Sensor();

  // Skanowanie magistrali I2C
  I2C_Scan();

  // Inicjalizacja czujnika
  Initialize_Sensor();

  // Startowanie pomiarów
  printf("Rozpoczynanie pomiarów...\r\n");
  vl53l5cx_start_ranging(&dev1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t status1;

    status1 = PollingSensor(&dev1);

    if (status1 != 0xFF) {
        // Przetwarzanie danych z czujnika 1
        vl53l5cx_get_ranging_data(&dev1, &results1);
        ProcessData(&dev1, &results1);
    } else {
        printf("Błąd odczytu z czujnika 1\r\n");
    }

    HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void ProcessData(VL53L5CX_Configuration *dev, VL53L5CX_ResultsData *results) {
    char msg[128];
    uint32_t distance = results->distance_mm[0];  // Zakładamy, że chcemy odczytać pierwszą wartość odległości

    // Formatowanie danych i wysyłanie przez UART
    snprintf(msg, sizeof(msg), "Odległość = %lu mm\r\n", distance);
    printf("%s", msg);
}

void I2C_Scan(void)
{
    printf("Rozpoczęcie skanowania I2C...\r\n");
    for(uint8_t address = 1; address < 127; address++ )
    {
        // Spróbuj odczytać 1 bajt z aktualnego adresu
        if(HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 1, 10) == HAL_OK)
        {
            printf("Urządzenie znalezione pod adresem 0x%02X\r\n", address);
        }
    }
    printf("Skanowanie I2C zakończone.\r\n");
}

uint8_t Check_Sensor_Communication(VL53L5CX_Configuration *dev) {
    uint8_t data;
    uint8_t status = vl53l5cx_wr_byte(&dev->platform, 0x7FFF, 0x00); // Switch to page 0
    if (status == VL53L5CX_STATUS_OK) {
        status = vl53l5cx_rd_byte(&dev->platform, 0x010F, &data); // Read WHO_AM_I or similar register
        printf("WHO_AM_I register: 0x%02X, status: %d\r\n", data, status);
    } else {
        printf("Błąd podczas przełączania na stronę 0, status: %d\r\n", status);
    }
    return status;
}

void Initialize_Sensor(void) {
    uint8_t status;
    uint8_t is_alive;

    printf("Rozpoczęcie inicjalizacji czujnika...\r\n");

    // Inicjalizacja czujnika
    printf("Sprawdzanie czujnika...\r\n");
    status = vl53l5cx_is_alive(&dev1, &is_alive);
    printf("Status czujnika: %d, is_alive: %d\r\n", status, is_alive);
    if (status == VL53L5CX_STATUS_OK && is_alive) {
        dev1.platform.address = VL53L5CX_I2C_ADDRESS << 1;
        if (vl53l5cx_init(&dev1) == VL53L5CX_STATUS_OK) {
            printf("Czujnik zainicjalizowany z adresem 0x%02X\r\n", VL53L5CX_I2C_ADDRESS);
        } else {
            printf("Błąd inicjalizacji czujnika\r\n");
        }
    } else {
        printf("Czujnik nie jest żywy lub błąd sprawdzania statusu, status: %d, is_alive: %d\r\n", status, is_alive);
    }

    // Add communication check
    printf("Sprawdzanie komunikacji z czujnikiem...\r\n");
    if (Check_Sensor_Communication(&dev1) == VL53L5CX_STATUS_OK) {
        printf("Komunikacja z czujnikiem jest OK\r\n");
    } else {
        printf("Błąd komunikacji z czujnikiem\r\n");
    }
}

uint8_t PollingSensor(VL53L5CX_Configuration *dev) {
    uint8_t status = 0xFF;
    uint32_t timeout = HAL_GetTick();
    uint8_t temp_buffer[2];

    while (status == 0xFF) {
        // Odczytanie statusu z czujnika
        status = HAL_I2C_Mem_Read(&hi2c1, dev->platform.address, VL53L5CX_I2C_ADDRESS, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, 1000);

        if ((HAL_GetTick() - timeout) > POLLING_TIMEOUT) {
            printf("Timeout podczas polling czujnika o adresie 0x%02X\r\n", dev->platform.address);
            return 0xFF; // Zwraca 0xFF w przypadku timeoutu
        }
    }
    return temp_buffer[1];
}

void Reset_Sensor(void) {
    // Resetowanie czujnika
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
    HAL_Delay(10); // 10 ms
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
    HAL_Delay(10); // 10 ms
    printf("Magistrala zresetowana\r\n");
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
