
Inzynierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015c20  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9d4  0801d9d4  0001f06c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9d4  0801d9d4  0001e9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d9dc  0801d9dc  0001f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d9dc  0801d9dc  0001e9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d9e0  0801d9e0  0001e9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0801d9e4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000324c  2000006c  0801da50  0001f06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032b8  0801da50  0001f2b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124ad  00000000  00000000  0001f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d58  00000000  00000000  00031549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000342a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb2  00000000  00000000  000351e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002811f  00000000  00000000  00035d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001459b  00000000  00000000  0005deb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ede98  00000000  00000000  0007244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001602e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004560  00000000  00000000  00160328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00164888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d9c 	.word	0x08007d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007d9c 	.word	0x08007d9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b36      	ldr	r3, [pc, #216]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a35      	ldr	r2, [pc, #212]	@ (8000650 <MX_GPIO_Init+0xf0>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b33      	ldr	r3, [pc, #204]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b30      	ldr	r3, [pc, #192]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a2f      	ldr	r2, [pc, #188]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <MX_GPIO_Init+0xf0>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a29      	ldr	r2, [pc, #164]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a23      	ldr	r2, [pc, #140]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 f9a3 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e8:	481a      	ldr	r0, [pc, #104]	@ (8000654 <MX_GPIO_Init+0xf4>)
 80005ea:	f001 f99d 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4813      	ldr	r0, [pc, #76]	@ (8000654 <MX_GPIO_Init+0xf4>)
 8000606:	f000 ffe5 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060a:	2320      	movs	r3, #32
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 ffd6 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <MX_GPIO_Init+0xf4>)
 8000642:	f000 ffc7 	bl	80015d4 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	@ 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	48000800 	.word	0x48000800

08000658 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B; // This timing value should be set for 400kHz I2C speed
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <MX_I2C1_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000694:	f001 f960 	bl	8001958 <HAL_I2C_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fabb 	bl	8000c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4809      	ldr	r0, [pc, #36]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006a6:	f002 f905 	bl	80028b4 <HAL_I2CEx_ConfigAnalogFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 fab2 	bl	8000c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006b8:	f002 f947 	bl	800294a <HAL_I2CEx_ConfigDigitalFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 faa9 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000088 	.word	0x20000088
 80006d0:	40005400 	.word	0x40005400
 80006d4:	00303d5b 	.word	0x00303d5b

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0ac      	sub	sp, #176	@ 0xb0
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2288      	movs	r2, #136	@ 0x88
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f006 fce7 	bl	80070cc <memset>
  if(i2cHandle->Instance==I2C1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <HAL_I2C_MspInit+0xb0>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d13b      	bne.n	8000780 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f002 ffc9 	bl	80036ac <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000720:	f000 fa7a 	bl	8000c18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800073c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000744:	2312      	movs	r3, #18
 8000746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000760:	4619      	mov	r1, r3
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <HAL_I2C_MspInit+0xb8>)
 8000764:	f000 ff36 	bl	80015d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800076a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800076e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000772:	6593      	str	r3, [r2, #88]	@ 0x58
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000780:	bf00      	nop
 8000782:	37b0      	adds	r7, #176	@ 0xb0
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40005400 	.word	0x40005400
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char* ptr, int len){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <_write+0x28>)
 80007ac:	f003 fc88 	bl	80040c0 <HAL_UART_Transmit>
    return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200030e0 	.word	0x200030e0

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fcd5 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f885 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f7ff fec7 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 fc11 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d6:	f7ff ff3f 	bl	8000658 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Test UART
  printf("UART działa poprawnie\r\n");
 80007da:	4838      	ldr	r0, [pc, #224]	@ (80008bc <main+0xfc>)
 80007dc:	f006 fc6e 	bl	80070bc <puts>

  Scan_I2C_Devices();
 80007e0:	f000 f9e8 	bl	8000bb4 <Scan_I2C_Devices>

  // Initialize all sensors
  Initialize_Sensors();
 80007e4:	f000 f918 	bl	8000a18 <Initialize_Sensors>

  // Start measurements for all sensors
  printf("Rozpoczynanie pomiarów...\r\n");
 80007e8:	4835      	ldr	r0, [pc, #212]	@ (80008c0 <main+0x100>)
 80007ea:	f006 fc67 	bl	80070bc <puts>
  for (int i = 0; i < SENSOR_COUNT; i++) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e01b      	b.n	800082c <main+0x6c>
    int status = vl53l5cx_start_ranging(&dev[i]);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	4a31      	ldr	r2, [pc, #196]	@ (80008c4 <main+0x104>)
 8000800:	4413      	add	r3, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fdd2 	bl	80063ac <vl53l5cx_start_ranging>
 8000808:	4603      	mov	r3, r0
 800080a:	607b      	str	r3, [r7, #4]
    if (status == VL53L5CX_STATUS_OK) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x5c>
        printf("Pomiary dla czujnika %d rozpoczęte pomyślnie\r\n", i);
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	482c      	ldr	r0, [pc, #176]	@ (80008c8 <main+0x108>)
 8000816:	f006 fbe9 	bl	8006fec <iprintf>
 800081a:	e004      	b.n	8000826 <main+0x66>
    } else {
        printf("Błąd rozpoczynania pomiarów dla czujnika %d, kod błędu: %d\r\n", i, status);
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68f9      	ldr	r1, [r7, #12]
 8000820:	482a      	ldr	r0, [pc, #168]	@ (80008cc <main+0x10c>)
 8000822:	f006 fbe3 	bl	8006fec <iprintf>
  for (int i = 0; i < SENSOR_COUNT; i++) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b02      	cmp	r3, #2
 8000830:	dde0      	ble.n	80007f4 <main+0x34>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t isReady;
    for (int i = 0; i < SENSOR_COUNT; i++) {
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	e038      	b.n	80008aa <main+0xea>
        if (vl53l5cx_check_data_ready(&dev[i], &isReady) == VL53L5CX_STATUS_OK && isReady) {
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	4a20      	ldr	r2, [pc, #128]	@ (80008c4 <main+0x104>)
 8000844:	4413      	add	r3, r2
 8000846:	1cfa      	adds	r2, r7, #3
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f005 ff28 	bl	80066a0 <vl53l5cx_check_data_ready>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d122      	bne.n	800089c <main+0xdc>
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d01f      	beq.n	800089c <main+0xdc>
            vl53l5cx_get_ranging_data(&dev[i], &results[i]);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <main+0x104>)
 8000868:	441a      	add	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f44f 61aa 	mov.w	r1, #1360	@ 0x550
 8000870:	fb01 f303 	mul.w	r3, r1, r3
 8000874:	4916      	ldr	r1, [pc, #88]	@ (80008d0 <main+0x110>)
 8000876:	440b      	add	r3, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f005 ff60 	bl	8006740 <vl53l5cx_get_ranging_data>
            ProcessData(&results[i], i);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <main+0x110>)
 800088c:	4413      	add	r3, r2
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f871 	bl	800097c <ProcessData>
 800089a:	e003      	b.n	80008a4 <main+0xe4>
        } else {
            printf("Czujnik %d nie ma nowych danych do odczytu\r\n", i);
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <main+0x114>)
 80008a0:	f006 fba4 	bl	8006fec <iprintf>
    for (int i = 0; i < SENSOR_COUNT; i++) {
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3301      	adds	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	ddc3      	ble.n	8000838 <main+0x78>
        }
    }
    HAL_Delay(5000);
 80008b0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008b4:	f000 fcda 	bl	800126c <HAL_Delay>
  {
 80008b8:	e7bb      	b.n	8000832 <main+0x72>
 80008ba:	bf00      	nop
 80008bc:	08007db4 	.word	0x08007db4
 80008c0:	08007dcc 	.word	0x08007dcc
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	08007de8 	.word	0x08007de8
 80008cc:	08007e1c 	.word	0x08007e1c
 80008d0:	200020ec 	.word	0x200020ec
 80008d4:	08007e60 	.word	0x08007e60

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b096      	sub	sp, #88	@ 0x58
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2244      	movs	r2, #68	@ 0x44
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f006 fbf0 	bl	80070cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008fe:	f002 f87f 	bl	8002a00 <HAL_PWREx_ControlVoltageScaling>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000908:	f000 f986 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000914:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2310      	movs	r3, #16
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091e:	2302      	movs	r3, #2
 8000920:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000926:	230a      	movs	r3, #10
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800092a:	2307      	movs	r3, #7
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4618      	mov	r0, r3
 800093c:	f002 f8b6 	bl	8002aac <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000946:	f000 f967 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	2104      	movs	r1, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fc7e 	bl	8003264 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800096e:	f000 f953 	bl	8000c18 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3758      	adds	r7, #88	@ 0x58
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <ProcessData>:

/* USER CODE BEGIN 4 */
void ProcessData(VL53L5CX_ResultsData *results, uint8_t sensor_index) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af04      	add	r7, sp, #16
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
    printf("Sensor %d:\n\r", sensor_index);
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	4619      	mov	r1, r3
 800098c:	4820      	ldr	r0, [pc, #128]	@ (8000a10 <ProcessData+0x94>)
 800098e:	f006 fb2d 	bl	8006fec <iprintf>
    for (int i = 0; i < 16; i += 4) { // Displaying 4 measurements per line
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e033      	b.n	8000a00 <ProcessData+0x84>
        printf("Distance %d-%d: %d mm, %d mm, %d mm, %d mm\n\r",
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	1cd9      	adds	r1, r3, #3
               i, i+3,
               results->distance_mm[i],
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        printf("Distance %d-%d: %d mm, %d mm, %d mm, %d mm\n\r",
 80009ac:	461d      	mov	r5, r3
               results->distance_mm[i+1],
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        printf("Distance %d-%d: %d mm, %d mm, %d mm, %d mm\n\r",
 80009c0:	4618      	mov	r0, r3
               results->distance_mm[i+2],
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3302      	adds	r3, #2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        printf("Distance %d-%d: %d mm, %d mm, %d mm, %d mm\n\r",
 80009d4:	461c      	mov	r4, r3
               results->distance_mm[i+3]);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3303      	adds	r3, #3
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
        printf("Distance %d-%d: %d mm, %d mm, %d mm, %d mm\n\r",
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	9401      	str	r4, [sp, #4]
 80009ec:	9000      	str	r0, [sp, #0]
 80009ee:	462b      	mov	r3, r5
 80009f0:	460a      	mov	r2, r1
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <ProcessData+0x98>)
 80009f6:	f006 faf9 	bl	8006fec <iprintf>
    for (int i = 0; i < 16; i += 4) { // Displaying 4 measurements per line
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3304      	adds	r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	ddc8      	ble.n	8000998 <ProcessData+0x1c>
    }
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a10:	08007e90 	.word	0x08007e90
 8000a14:	08007ea0 	.word	0x08007ea0

08000a18 <Initialize_Sensors>:

void Initialize_Sensors(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
    uint8_t status;
    uint8_t is_alive = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	70bb      	strb	r3, [r7, #2]

    for (int i = 0; i < SENSOR_COUNT; i++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e0a6      	b.n	8000b76 <Initialize_Sensors+0x15e>
        printf("Inicjalizacja czujnika %d...\r\n", i);
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	4857      	ldr	r0, [pc, #348]	@ (8000b88 <Initialize_Sensors+0x170>)
 8000a2c:	f006 fade 	bl	8006fec <iprintf>

        dev[i].platform.address = VL53L5CX_DEFAULT_ADDRESS << 1;
 8000a30:	4a56      	ldr	r2, [pc, #344]	@ (8000b8c <Initialize_Sensors+0x174>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f44f 612b 	mov.w	r1, #2736	@ 0xab0
 8000a38:	fb01 f303 	mul.w	r3, r1, r3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2252      	movs	r2, #82	@ 0x52
 8000a40:	801a      	strh	r2, [r3, #0]

        // Check if sensor is alive at default address
        status = vl53l5cx_is_alive(&dev[i], &is_alive);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8000b8c <Initialize_Sensors+0x174>)
 8000a4e:	4413      	add	r3, r2
 8000a50:	1cba      	adds	r2, r7, #2
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 ff87 	bl	8005968 <vl53l5cx_is_alive>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	70fb      	strb	r3, [r7, #3]
        printf("Status czujnika %d (domyślny adres): %d, is_alive: %d\r\n", i, status, is_alive);
 8000a5e:	78fa      	ldrb	r2, [r7, #3]
 8000a60:	78bb      	ldrb	r3, [r7, #2]
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	484a      	ldr	r0, [pc, #296]	@ (8000b90 <Initialize_Sensors+0x178>)
 8000a66:	f006 fac1 	bl	8006fec <iprintf>

        if (status == VL53L5CX_STATUS_OK && is_alive) {
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d179      	bne.n	8000b64 <Initialize_Sensors+0x14c>
 8000a70:	78bb      	ldrb	r3, [r7, #2]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d076      	beq.n	8000b64 <Initialize_Sensors+0x14c>
            // Change sensor I2C address
            status = vl53l5cx_set_i2c_address(&dev[i], sensor_addresses[i] << 1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	4a42      	ldr	r2, [pc, #264]	@ (8000b8c <Initialize_Sensors+0x174>)
 8000a82:	441a      	add	r2, r3
 8000a84:	4943      	ldr	r1, [pc, #268]	@ (8000b94 <Initialize_Sensors+0x17c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	440b      	add	r3, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	4610      	mov	r0, r2
 8000a94:	f005 fc54 	bl	8006340 <vl53l5cx_set_i2c_address>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	70fb      	strb	r3, [r7, #3]
            if (status == VL53L5CX_STATUS_OK) {
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d12f      	bne.n	8000b02 <Initialize_Sensors+0xea>
                dev[i].platform.address = sensor_addresses[i] << 1;
 8000aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8000b94 <Initialize_Sensors+0x17c>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b298      	uxth	r0, r3
 8000aae:	4a37      	ldr	r2, [pc, #220]	@ (8000b8c <Initialize_Sensors+0x174>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f44f 612b 	mov.w	r1, #2736	@ 0xab0
 8000ab6:	fb01 f303 	mul.w	r3, r1, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	4602      	mov	r2, r0
 8000abe:	801a      	strh	r2, [r3, #0]
                printf("Adres I2C czujnika %d zmieniony na 0x%02X\r\n", i, sensor_addresses[i]);
 8000ac0:	4a34      	ldr	r2, [pc, #208]	@ (8000b94 <Initialize_Sensors+0x17c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	4832      	ldr	r0, [pc, #200]	@ (8000b98 <Initialize_Sensors+0x180>)
 8000ace:	f006 fa8d 	bl	8006fec <iprintf>
                printf("Błąd ustawienia adresu dla czujnika %d, kod błędu: %d\r\n", i, status);
                continue;
            }

            // Check if sensor is alive at new address
            status = vl53l5cx_is_alive(&dev[i], &is_alive);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b8c <Initialize_Sensors+0x174>)
 8000ade:	4413      	add	r3, r2
 8000ae0:	1cba      	adds	r2, r7, #2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 ff3f 	bl	8005968 <vl53l5cx_is_alive>
 8000aea:	4603      	mov	r3, r0
 8000aec:	70fb      	strb	r3, [r7, #3]
            printf("Status czujnika %d (nowy adres): %d, is_alive: %d\r\n", i, status, is_alive);
 8000aee:	78fa      	ldrb	r2, [r7, #3]
 8000af0:	78bb      	ldrb	r3, [r7, #2]
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4829      	ldr	r0, [pc, #164]	@ (8000b9c <Initialize_Sensors+0x184>)
 8000af6:	f006 fa79 	bl	8006fec <iprintf>
            if (status != VL53L5CX_STATUS_OK || !is_alive) {
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10a      	bne.n	8000b16 <Initialize_Sensors+0xfe>
 8000b00:	e006      	b.n	8000b10 <Initialize_Sensors+0xf8>
                printf("Błąd ustawienia adresu dla czujnika %d, kod błędu: %d\r\n", i, status);
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	461a      	mov	r2, r3
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	4825      	ldr	r0, [pc, #148]	@ (8000ba0 <Initialize_Sensors+0x188>)
 8000b0a:	f006 fa6f 	bl	8006fec <iprintf>
                continue;
 8000b0e:	e02f      	b.n	8000b70 <Initialize_Sensors+0x158>
            if (status != VL53L5CX_STATUS_OK || !is_alive) {
 8000b10:	78bb      	ldrb	r3, [r7, #2]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d106      	bne.n	8000b24 <Initialize_Sensors+0x10c>
                printf("Czujnik %d nie jest żywy po zmianie adresu, status: %d, is_alive: %d\r\n", i, status, is_alive);
 8000b16:	78fa      	ldrb	r2, [r7, #3]
 8000b18:	78bb      	ldrb	r3, [r7, #2]
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	4821      	ldr	r0, [pc, #132]	@ (8000ba4 <Initialize_Sensors+0x18c>)
 8000b1e:	f006 fa65 	bl	8006fec <iprintf>
                continue;
 8000b22:	e025      	b.n	8000b70 <Initialize_Sensors+0x158>
            }

            // Initialize sensor
            status = vl53l5cx_init(&dev[i]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f44f 622b 	mov.w	r2, #2736	@ 0xab0
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <Initialize_Sensors+0x174>)
 8000b30:	4413      	add	r3, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 ff98 	bl	8005a68 <vl53l5cx_init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	70fb      	strb	r3, [r7, #3]
            if (status == VL53L5CX_STATUS_OK) {
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d109      	bne.n	8000b56 <Initialize_Sensors+0x13e>
                printf("Czujnik %d zainicjalizowany z adresem 0x%02X\r\n", i, sensor_addresses[i]);
 8000b42:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <Initialize_Sensors+0x17c>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4816      	ldr	r0, [pc, #88]	@ (8000ba8 <Initialize_Sensors+0x190>)
 8000b50:	f006 fa4c 	bl	8006fec <iprintf>
            if (status == VL53L5CX_STATUS_OK) {
 8000b54:	e00c      	b.n	8000b70 <Initialize_Sensors+0x158>
            } else {
                printf("Błąd inicjalizacji czujnika %d, kod błędu: %d\r\n", i, status);
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <Initialize_Sensors+0x194>)
 8000b5e:	f006 fa45 	bl	8006fec <iprintf>
            if (status == VL53L5CX_STATUS_OK) {
 8000b62:	e005      	b.n	8000b70 <Initialize_Sensors+0x158>
            }
        } else {
            printf("Czujnik %d nie jest żywy przy domyślnym adresie, status: %d, is_alive: %d\r\n", i, status, is_alive);
 8000b64:	78fa      	ldrb	r2, [r7, #3]
 8000b66:	78bb      	ldrb	r3, [r7, #2]
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <Initialize_Sensors+0x198>)
 8000b6c:	f006 fa3e 	bl	8006fec <iprintf>
    for (int i = 0; i < SENSOR_COUNT; i++) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	f77f af55 	ble.w	8000a28 <Initialize_Sensors+0x10>
        }
    }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08007ed0 	.word	0x08007ed0
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	08007ef0 	.word	0x08007ef0
 8000b94:	20000000 	.word	0x20000000
 8000b98:	08007f2c 	.word	0x08007f2c
 8000b9c:	08007f94 	.word	0x08007f94
 8000ba0:	08007f58 	.word	0x08007f58
 8000ba4:	08007fc8 	.word	0x08007fc8
 8000ba8:	08008010 	.word	0x08008010
 8000bac:	08008040 	.word	0x08008040
 8000bb0:	08008074 	.word	0x08008074

08000bb4 <Scan_I2C_Devices>:


void Scan_I2C_Devices() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
    printf("Skanowanie urządzeń I2C...\r\n");
 8000bba:	4813      	ldr	r0, [pc, #76]	@ (8000c08 <Scan_I2C_Devices+0x54>)
 8000bbc:	f006 fa7e 	bl	80070bc <puts>
    HAL_StatusTypeDef result;
    uint8_t i;
    for (i = 1; i < 128; i++) {
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	e015      	b.n	8000bf2 <Scan_I2C_Devices+0x3e>
        result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 3, 5);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	2305      	movs	r3, #5
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <Scan_I2C_Devices+0x58>)
 8000bd4:	f001 fa7e 	bl	80020d4 <HAL_I2C_IsDeviceReady>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71bb      	strb	r3, [r7, #6]
        if (result == HAL_OK) {
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d104      	bne.n	8000bec <Scan_I2C_Devices+0x38>
            printf("Urządzenie znalezione pod adresem: 0x%02X\r\n", i);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4619      	mov	r1, r3
 8000be6:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <Scan_I2C_Devices+0x5c>)
 8000be8:	f006 fa00 	bl	8006fec <iprintf>
    for (i = 1; i < 128; i++) {
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	dae5      	bge.n	8000bc6 <Scan_I2C_Devices+0x12>
        }
    }
    printf("Skanowanie zakończone.\r\n");
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <Scan_I2C_Devices+0x60>)
 8000bfc:	f006 fa5e 	bl	80070bc <puts>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	080080c4 	.word	0x080080c4
 8000c0c:	20000088 	.word	0x20000088
 8000c10:	080080e4 	.word	0x080080e4
 8000c14:	08008114 	.word	0x08008114

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <VL53L5CX_RdByte>:

uint8_t VL53L5CX_RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000c36:	897b      	ldrh	r3, [r7, #10]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8000c40:	897b      	ldrh	r3, [r7, #10]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	8819      	ldrh	r1, [r3, #0]
 8000c4a:	f107 0214 	add.w	r2, r7, #20
 8000c4e:	2364      	movs	r3, #100	@ 0x64
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2302      	movs	r3, #2
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <VL53L5CX_RdByte+0x64>)
 8000c56:	f000 ff1b 	bl	8001a90 <HAL_I2C_Master_Transmit>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c1, p_platform->address, data_read, 1, 100);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	8819      	ldrh	r1, [r3, #0]
 8000c62:	f107 0210 	add.w	r2, r7, #16
 8000c66:	2364      	movs	r3, #100	@ 0x64
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <VL53L5CX_RdByte+0x64>)
 8000c6e:	f001 f827 	bl	8001cc0 <HAL_I2C_Master_Receive>
 8000c72:	4603      	mov	r3, r0
 8000c74:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8000c76:	7c3a      	ldrb	r2, [r7, #16]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	701a      	strb	r2, [r3, #0]

	return status;
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000088 	.word	0x20000088

08000c8c <VL53L5CX_WrByte>:

uint8_t VL53L5CX_WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	0a1b      	lsrs	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8000cb0:	787b      	ldrb	r3, [r7, #1]
 8000cb2:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1,p_platform->address, data_write, 3, 100);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	8819      	ldrh	r1, [r3, #0]
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	2364      	movs	r3, #100	@ 0x64
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <VL53L5CX_WrByte+0x4c>)
 8000cc4:	f000 fee4 	bl	8001a90 <HAL_I2C_Master_Transmit>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]

	return status;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000088 	.word	0x20000088

08000cdc <VL53L5CX_WrMulti>:
uint8_t VL53L5CX_WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af04      	add	r7, sp, #16
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	817b      	strh	r3, [r7, #10]
	uint8_t status = HAL_I2C_Mem_Write(&hi2c1, p_platform->address, RegisterAdress,
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	8819      	ldrh	r1, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	897a      	ldrh	r2, [r7, #10]
 8000cf6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cfa:	9002      	str	r0, [sp, #8]
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2302      	movs	r3, #2
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <VL53L5CX_WrMulti+0x3c>)
 8000d06:	f001 f8d1 	bl	8001eac <HAL_I2C_Mem_Write>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	75fb      	strb	r3, [r7, #23]
									I2C_MEMADD_SIZE_16BIT, p_values, size, 65535);
	return status;
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000088 	.word	0x20000088

08000d1c <VL53L5CX_RdMulti>:
uint8_t VL53L5CX_RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	817b      	strh	r3, [r7, #10]
	uint8_t status;
	uint8_t data_write[2];
	data_write[0] = (RegisterAdress>>8) & 0xFF;
 8000d2c:	897b      	ldrh	r3, [r7, #10]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c1, p_platform->address, data_write, 2, 100);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	8819      	ldrh	r1, [r3, #0]
 8000d40:	f107 0214 	add.w	r2, r7, #20
 8000d44:	2364      	movs	r3, #100	@ 0x64
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <VL53L5CX_RdMulti+0x60>)
 8000d4c:	f000 fea0 	bl	8001a90 <HAL_I2C_Master_Transmit>
 8000d50:	4603      	mov	r3, r0
 8000d52:	75fb      	strb	r3, [r7, #23]
	status += HAL_I2C_Master_Receive(&hi2c1, p_platform->address, p_values, size, 100);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	8819      	ldrh	r1, [r3, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2264      	movs	r2, #100	@ 0x64
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <VL53L5CX_RdMulti+0x60>)
 8000d64:	f000 ffac 	bl	8001cc0 <HAL_I2C_Master_Receive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	4413      	add	r3, r2
 8000d70:	75fb      	strb	r3, [r7, #23]

	return status;
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000088 	.word	0x20000088

08000d80 <VL53L5CX_SwapBuffer>:
}

void VL53L5CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e021      	b.n	8000dd6 <VL53L5CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	440b      	add	r3, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3302      	adds	r3, #2
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	440b      	add	r3, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	3203      	adds	r2, #3
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	440a      	add	r2, r1
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	4313      	orrs	r3, r2
		tmp = (
 8000dc4:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d3d9      	bcc.n	8000d92 <VL53L5CX_SwapBuffer+0x12>
	}
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <VL53L5CX_WaitMs>:

uint8_t VL53L5CX_WaitMs(
		VL53L5CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	HAL_Delay(TimeMs);
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f000 fa38 	bl	800126c <HAL_Delay>
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2a:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f9c1 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <USART2_IRQHandler+0x10>)
 8000eb6:	f003 f98d 	bl	80041d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200030e0 	.word	0x200030e0

08000ec4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed6:	f3af 8000 	nop.w
 8000eda:	4601      	mov	r1, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf0      	blt.n	8000ed6 <_read+0x12>
  }

  return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f26:	605a      	str	r2, [r3, #4]
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f006 f8a0 	bl	80070dc <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20018000 	.word	0x20018000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	200030dc 	.word	0x200030dc
 8000fd0:	200032b8 	.word	0x200032b8

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <MX_USART2_UART_Init+0x5c>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_USART2_UART_Init+0x58>)
 800103c:	f002 fff2 	bl	8004024 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001046:	f7ff fde7 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200030e0 	.word	0x200030e0
 8001054:	40004400 	.word	0x40004400

08001058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ac      	sub	sp, #176	@ 0xb0
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2288      	movs	r2, #136	@ 0x88
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f006 f827 	bl	80070cc <memset>
  if(uartHandle->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a25      	ldr	r2, [pc, #148]	@ (8001118 <HAL_UART_MspInit+0xc0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d143      	bne.n	8001110 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001088:	2302      	movs	r3, #2
 800108a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fb09 	bl	80036ac <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a0:	f7ff fdba 	bl	8000c18 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a16      	ldr	r2, [pc, #88]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_UART_MspInit+0xc4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d4:	230c      	movs	r3, #12
 80010d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ec:	2307      	movs	r3, #7
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f000 fa6a 	bl	80015d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2026      	movs	r0, #38	@ 0x26
 8001106:	f000 f9b0 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800110a:	2026      	movs	r0, #38	@ 0x26
 800110c:	f000 f9c9 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001110:	bf00      	nop
 8001112:	37b0      	adds	r7, #176	@ 0xb0
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001124:	f7ff ff56 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	@ (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	@ (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	@ (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f005 ffcb 	bl	80070e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fb35 	bl	80007c0 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001158:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001164:	0801d9e4 	.word	0x0801d9e4
  ldr r2, =_sbss
 8001168:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800116c:	200032b8 	.word	0x200032b8

08001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_2_IRQHandler>
	...

08001174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_Init+0x3c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_Init+0x3c>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001188:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f962 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f80f 	bl	80011b4 <HAL_InitTick>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	e001      	b.n	80011a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a2:	f7ff fe31 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d023      	beq.n	8001210 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_InitTick+0x70>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_InitTick+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f96d 	bl	80014be <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d809      	bhi.n	8001204 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011f8:	f000 f937 	bl	800146a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_InitTick+0x74>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e007      	b.n	8001214 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e004      	b.n	8001214 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e001      	b.n	8001214 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000000c 	.word	0x2000000c
 8001224:	20000004 	.word	0x20000004
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000000c 	.word	0x2000000c
 8001250:	20003168 	.word	0x20003168

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20003168 	.word	0x20003168

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4907      	ldr	r1, [pc, #28]	@ (8001350 <__NVIC_EnableIRQ+0x38>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	@ (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	@ (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	@ 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	@ 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff29 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff3e 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff8e 	bl	80013a8 <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5d 	bl	8001354 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff31 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e022      	b.n	8001546 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020e 	bic.w	r2, r2, #14
 800150e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001524:	f003 021c 	and.w	r2, r3, #28
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d005      	beq.n	8001576 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2204      	movs	r2, #4
 800156e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e029      	b.n	80015ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 020e 	bic.w	r2, r2, #14
 8001584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f003 021c 	and.w	r2, r3, #28
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
    }
  }
  return status;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e2:	e17f      	b.n	80018e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8171 	beq.w	80018de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d005      	beq.n	8001614 <HAL_GPIO_Init+0x40>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d130      	bne.n	8001676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164a:	2201      	movs	r2, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 0201 	and.w	r2, r3, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b03      	cmp	r3, #3
 8001680:	d118      	bne.n	80016b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001688:	2201      	movs	r2, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	f003 0201 	and.w	r2, r3, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d017      	beq.n	80016f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80ac 	beq.w	80018de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <HAL_GPIO_Init+0x330>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	4a5e      	ldr	r2, [pc, #376]	@ (8001904 <HAL_GPIO_Init+0x330>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	@ 0x60
 8001792:	4b5c      	ldr	r3, [pc, #368]	@ (8001904 <HAL_GPIO_Init+0x330>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800179e:	4a5a      	ldr	r2, [pc, #360]	@ (8001908 <HAL_GPIO_Init+0x334>)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017c8:	d025      	beq.n	8001816 <HAL_GPIO_Init+0x242>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4f      	ldr	r2, [pc, #316]	@ (800190c <HAL_GPIO_Init+0x338>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01f      	beq.n	8001812 <HAL_GPIO_Init+0x23e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001910 <HAL_GPIO_Init+0x33c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0x23a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001914 <HAL_GPIO_Init+0x340>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x236>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001918 <HAL_GPIO_Init+0x344>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x232>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4b      	ldr	r2, [pc, #300]	@ (800191c <HAL_GPIO_Init+0x348>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x22e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001920 <HAL_GPIO_Init+0x34c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x22a>
 80017fa:	2306      	movs	r3, #6
 80017fc:	e00c      	b.n	8001818 <HAL_GPIO_Init+0x244>
 80017fe:	2307      	movs	r3, #7
 8001800:	e00a      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001802:	2305      	movs	r3, #5
 8001804:	e008      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001806:	2304      	movs	r3, #4
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x244>
 800180a:	2303      	movs	r3, #3
 800180c:	e004      	b.n	8001818 <HAL_GPIO_Init+0x244>
 800180e:	2302      	movs	r3, #2
 8001810:	e002      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x244>
 8001816:	2300      	movs	r3, #0
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	f002 0203 	and.w	r2, r2, #3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4093      	lsls	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001828:	4937      	ldr	r1, [pc, #220]	@ (8001908 <HAL_GPIO_Init+0x334>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001836:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <HAL_GPIO_Init+0x350>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800185a:	4a32      	ldr	r2, [pc, #200]	@ (8001924 <HAL_GPIO_Init+0x350>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001860:	4b30      	ldr	r3, [pc, #192]	@ (8001924 <HAL_GPIO_Init+0x350>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001884:	4a27      	ldr	r2, [pc, #156]	@ (8001924 <HAL_GPIO_Init+0x350>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_GPIO_Init+0x350>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_GPIO_Init+0x350>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_GPIO_Init+0x350>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018d8:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <HAL_GPIO_Init+0x350>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f47f ae78 	bne.w	80015e4 <HAL_GPIO_Init+0x10>
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	48000400 	.word	0x48000400
 8001910:	48000800 	.word	0x48000800
 8001914:	48000c00 	.word	0x48000c00
 8001918:	48001000 	.word	0x48001000
 800191c:	48001400 	.word	0x48001400
 8001920:	48001800 	.word	0x48001800
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001944:	e002      	b.n	800194c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e08d      	b.n	8001a86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe feaa 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2224      	movs	r2, #36	@ 0x24
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e006      	b.n	80019e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d108      	bne.n	80019fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	e007      	b.n	8001a0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69d9      	ldr	r1, [r3, #28]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1a      	ldr	r2, [r3, #32]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	817b      	strh	r3, [r7, #10]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	f040 80fd 	bne.w	8001cac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0x30>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0f6      	b.n	8001cae <HAL_I2C_Master_Transmit+0x21e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fbc4 	bl	8001254 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2319      	movs	r3, #25
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 fc7c 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0e1      	b.n	8001cae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2221      	movs	r2, #33	@ 0x21
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2210      	movs	r2, #16
 8001af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	893a      	ldrh	r2, [r7, #8]
 8001b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2bff      	cmp	r3, #255	@ 0xff
 8001b1a:	d906      	bls.n	8001b2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	22ff      	movs	r2, #255	@ 0xff
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e007      	b.n	8001b3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d024      	beq.n	8001b8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <HAL_I2C_Master_Transmit+0x228>)
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fe63 	bl	8002850 <I2C_TransferConfig>
 8001b8a:	e066      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	8979      	ldrh	r1, [r7, #10]
 8001b94:	4b48      	ldr	r3, [pc, #288]	@ (8001cb8 <HAL_I2C_Master_Transmit+0x228>)
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fe58 	bl	8002850 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ba0:	e05b      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fc65 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e07b      	b.n	8001cae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d034      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x1ca>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d130      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fbe8 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e04d      	b.n	8001cae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2bff      	cmp	r3, #255	@ 0xff
 8001c1a:	d90e      	bls.n	8001c3a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	22ff      	movs	r2, #255	@ 0xff
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	8979      	ldrh	r1, [r7, #10]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fe0c 	bl	8002850 <I2C_TransferConfig>
 8001c38:	e00f      	b.n	8001c5a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	8979      	ldrh	r1, [r7, #10]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fdfb 	bl	8002850 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d19e      	bne.n	8001ba2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	6a39      	ldr	r1, [r7, #32]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fc4b 	bl	8002504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e01a      	b.n	8001cae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6859      	ldr	r1, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <HAL_I2C_Master_Transmit+0x22c>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cac:	2302      	movs	r3, #2
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	80002000 	.word	0x80002000
 8001cbc:	fe00e800 	.word	0xfe00e800

08001cc0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	f040 80db 	bne.w	8001e98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_I2C_Master_Receive+0x30>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e0d4      	b.n	8001e9a <HAL_I2C_Master_Receive+0x1da>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf8:	f7ff faac 	bl	8001254 <HAL_GetTick>
 8001cfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2319      	movs	r3, #25
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fb64 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0bf      	b.n	8001e9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2222      	movs	r2, #34	@ 0x22
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2210      	movs	r2, #16
 8001d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	893a      	ldrh	r2, [r7, #8]
 8001d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2bff      	cmp	r3, #255	@ 0xff
 8001d4a:	d90e      	bls.n	8001d6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	22ff      	movs	r2, #255	@ 0xff
 8001d50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	8979      	ldrh	r1, [r7, #10]
 8001d5a:	4b52      	ldr	r3, [pc, #328]	@ (8001ea4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fd74 	bl	8002850 <I2C_TransferConfig>
 8001d68:	e06d      	b.n	8001e46 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	4b49      	ldr	r3, [pc, #292]	@ (8001ea4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fd63 	bl	8002850 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d8a:	e05c      	b.n	8001e46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fbfb 	bl	800258c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e07c      	b.n	8001e9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d034      	beq.n	8001e46 <HAL_I2C_Master_Receive+0x186>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d130      	bne.n	8001e46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	2200      	movs	r2, #0
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 faf2 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e04d      	b.n	8001e9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2bff      	cmp	r3, #255	@ 0xff
 8001e06:	d90e      	bls.n	8001e26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	22ff      	movs	r2, #255	@ 0xff
 8001e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fd16 	bl	8002850 <I2C_TransferConfig>
 8001e24:	e00f      	b.n	8001e46 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	8979      	ldrh	r1, [r7, #10]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fd05 	bl	8002850 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d19d      	bne.n	8001d8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	6a39      	ldr	r1, [r7, #32]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fb55 	bl	8002504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e01a      	b.n	8001e9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <HAL_I2C_Master_Receive+0x1e8>)
 8001e78:	400b      	ands	r3, r1
 8001e7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	80002400 	.word	0x80002400
 8001ea8:	fe00e800 	.word	0xfe00e800

08001eac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	817b      	strh	r3, [r7, #10]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	813b      	strh	r3, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	f040 80f9 	bne.w	80020c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_I2C_Mem_Write+0x34>
 8001eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0ed      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_I2C_Mem_Write+0x4e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e0e6      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f02:	f7ff f9a7 	bl	8001254 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2319      	movs	r3, #25
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fa5f 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0d1      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2221      	movs	r2, #33	@ 0x21
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2240      	movs	r2, #64	@ 0x40
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a3a      	ldr	r2, [r7, #32]
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f4c:	88f8      	ldrh	r0, [r7, #6]
 8001f4e:	893a      	ldrh	r2, [r7, #8]
 8001f50:	8979      	ldrh	r1, [r7, #10]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f9c3 	bl	80022e8 <I2C_RequestMemoryWrite>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0a9      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d90e      	bls.n	8001f9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	22ff      	movs	r2, #255	@ 0xff
 8001f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	8979      	ldrh	r1, [r7, #10]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fc5b 	bl	8002850 <I2C_TransferConfig>
 8001f9a:	e00f      	b.n	8001fbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	8979      	ldrh	r1, [r7, #10]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fc4a 	bl	8002850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fa58 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e07b      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d034      	beq.n	8002074 <HAL_I2C_Mem_Write+0x1c8>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d130      	bne.n	8002074 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f9db 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04d      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2bff      	cmp	r3, #255	@ 0xff
 8002034:	d90e      	bls.n	8002054 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22ff      	movs	r2, #255	@ 0xff
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fbff 	bl	8002850 <I2C_TransferConfig>
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002062:	b2da      	uxtb	r2, r3
 8002064:	8979      	ldrh	r1, [r7, #10]
 8002066:	2300      	movs	r3, #0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fbee 	bl	8002850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d19e      	bne.n	8001fbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa3e 	bl	8002504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e01a      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2220      	movs	r2, #32
 8002098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_I2C_Mem_Write+0x224>)
 80020a6:	400b      	ands	r3, r1
 80020a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	fe00e800 	.word	0xfe00e800

080020d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	f040 80f3 	bne.w	80022dc <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002104:	d101      	bne.n	800210a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e0e9      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_IsDeviceReady+0x44>
 8002114:	2302      	movs	r3, #2
 8002116:	e0e2      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2224      	movs	r2, #36	@ 0x24
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d107      	bne.n	8002146 <HAL_I2C_IsDeviceReady+0x72>
 8002136:	897b      	ldrh	r3, [r7, #10]
 8002138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002140:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002144:	e006      	b.n	8002154 <HAL_I2C_IsDeviceReady+0x80>
 8002146:	897b      	ldrh	r3, [r7, #10]
 8002148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002150:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800215a:	f7ff f87b 	bl	8001254 <HAL_GetTick>
 800215e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b20      	cmp	r3, #32
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b10      	cmp	r3, #16
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800218c:	e034      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002194:	d01a      	beq.n	80021cc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff f85d 	bl	8001254 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <HAL_I2C_IsDeviceReady+0xd8>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10f      	bne.n	80021cc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e088      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021f8:	7ffb      	ldrb	r3, [r7, #31]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_I2C_IsDeviceReady+0x130>
 80021fe:	7fbb      	ldrb	r3, [r7, #30]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0c4      	beq.n	800218e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b10      	cmp	r3, #16
 8002210:	d01a      	beq.n	8002248 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2120      	movs	r1, #32
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f8db 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e058      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2220      	movs	r2, #32
 8002232:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e04a      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	2120      	movs	r1, #32
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f8c0 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e03d      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2210      	movs	r2, #16
 8002268:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2220      	movs	r2, #32
 8002270:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d118      	bne.n	80022ac <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002288:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	2120      	movs	r1, #32
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f89f 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e01c      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2220      	movs	r2, #32
 80022aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f63f af39 	bhi.w	800212e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	8979      	ldrh	r1, [r7, #10]
 8002308:	4b20      	ldr	r3, [pc, #128]	@ (800238c <I2C_RequestMemoryWrite+0xa4>)
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fa9d 	bl	8002850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	69b9      	ldr	r1, [r7, #24]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f8ab 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e02c      	b.n	8002384 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002330:	893b      	ldrh	r3, [r7, #8]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	629a      	str	r2, [r3, #40]	@ 0x28
 800233a:	e015      	b.n	8002368 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800233c:	893b      	ldrh	r3, [r7, #8]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f891 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e012      	b.n	8002384 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800235e:	893b      	ldrh	r3, [r7, #8]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2200      	movs	r2, #0
 8002370:	2180      	movs	r1, #128	@ 0x80
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f830 	bl	80023d8 <I2C_WaitOnFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	80002000 	.word	0x80002000

08002390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d103      	bne.n	80023ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2200      	movs	r2, #0
 80023ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d007      	beq.n	80023cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	619a      	str	r2, [r3, #24]
  }
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e8:	e031      	b.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f0:	d02d      	beq.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe ff2f 	bl	8001254 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d122      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	429a      	cmp	r2, r3
 8002424:	d113      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	429a      	cmp	r2, r3
 800246a:	d0be      	beq.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002482:	e033      	b.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f901 	bl	8002690 <I2C_IsErrorOccurred>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e031      	b.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800249e:	d025      	beq.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a0:	f7fe fed8 	bl	8001254 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d302      	bcc.n	80024b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11a      	bne.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d013      	beq.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e007      	b.n	80024fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d1c4      	bne.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002510:	e02f      	b.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8ba 	bl	8002690 <I2C_IsErrorOccurred>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e02d      	b.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7fe fe95 	bl	8001254 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11a      	bne.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b20      	cmp	r3, #32
 8002548:	d013      	beq.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e007      	b.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d1c8      	bne.n	8002512 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002598:	e06b      	b.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f876 	bl	8002690 <I2C_IsErrorOccurred>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e069      	b.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d138      	bne.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d105      	bne.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e055      	b.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d107      	bne.n	80025f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2204      	movs	r2, #4
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80025f2:	e002      	b.n	80025fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2220      	movs	r2, #32
 8002600:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b1f      	ldr	r3, [pc, #124]	@ (800268c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800260e:	400b      	ands	r3, r1
 8002610:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e029      	b.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7fe fe11 	bl	8001254 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d116      	bne.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d00f      	beq.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e007      	b.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d18c      	bne.n	800259a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	fe00e800 	.word	0xfe00e800

08002690 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d068      	beq.n	800278e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026c4:	e049      	b.n	800275a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026cc:	d045      	beq.n	800275a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fdc1 	bl	8001254 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_IsErrorOccurred+0x54>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13a      	bne.n	800275a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002706:	d121      	bne.n	800274c <I2C_IsErrorOccurred+0xbc>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800270e:	d01d      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d01a      	beq.n	800274c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002724:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002726:	f7fe fd95 	bl	8001254 <HAL_GetTick>
 800272a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	e00e      	b.n	800274c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800272e:	f7fe fd91 	bl	8001254 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b19      	cmp	r3, #25
 800273a:	d907      	bls.n	800274c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800274a:	e006      	b.n	800275a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b20      	cmp	r3, #32
 8002758:	d1e9      	bne.n	800272e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b20      	cmp	r3, #32
 8002766:	d003      	beq.n	8002770 <I2C_IsErrorOccurred+0xe0>
 8002768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0aa      	beq.n	80026c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01c      	beq.n	800283e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fdc3 	bl	8002390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <I2C_IsErrorOccurred+0x1bc>)
 8002816:	400b      	ands	r3, r1
 8002818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800283e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002842:	4618      	mov	r0, r3
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	4613      	mov	r3, r2
 8002860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002868:	7a7b      	ldrb	r3, [r7, #9]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800287e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <I2C_TransferConfig+0x60>)
 8002890:	430b      	orrs	r3, r1
 8002892:	43db      	mvns	r3, r3
 8002894:	ea02 0103 	and.w	r1, r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	03ff63ff 	.word	0x03ff63ff

080028b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d138      	bne.n	800293c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e032      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	@ 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	d139      	bne.n	80029d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800296a:	2302      	movs	r3, #2
 800296c:	e033      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800299c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0e:	d130      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a10:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a1c:	d038      	beq.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a26:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2232      	movs	r2, #50	@ 0x32
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	3301      	adds	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a44:	e002      	b.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a58:	d102      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6c:	d110      	bne.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e00f      	b.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d007      	beq.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	431bde83 	.word	0x431bde83

08002aac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e3ca      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abe:	4b97      	ldr	r3, [pc, #604]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac8:	4b94      	ldr	r3, [pc, #592]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80e4 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4a>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	f040 808b 	bne.w	8002c04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 8087 	bne.w	8002c04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af6:	4b89      	ldr	r3, [pc, #548]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e3a2      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	4b82      	ldr	r3, [pc, #520]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_RCC_OscConfig+0x7c>
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b26:	e005      	b.n	8002b34 <HAL_RCC_OscConfig+0x88>
 8002b28:	4b7c      	ldr	r3, [pc, #496]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d223      	bcs.n	8002b80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fd55 	bl	80035ec <RCC_SetFlashLatencyFromMSIRange>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e383      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4c:	4b73      	ldr	r3, [pc, #460]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a72      	ldr	r2, [pc, #456]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b70      	ldr	r3, [pc, #448]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	496d      	ldr	r1, [pc, #436]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	4968      	ldr	r1, [pc, #416]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
 8002b7e:	e025      	b.n	8002bcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b80:	4b66      	ldr	r3, [pc, #408]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b86:	f043 0308 	orr.w	r3, r3, #8
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b63      	ldr	r3, [pc, #396]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4960      	ldr	r1, [pc, #384]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	495b      	ldr	r1, [pc, #364]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fd15 	bl	80035ec <RCC_SetFlashLatencyFromMSIRange>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e343      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bcc:	f000 fc4a 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b52      	ldr	r3, [pc, #328]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	4950      	ldr	r1, [pc, #320]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	4a4e      	ldr	r2, [pc, #312]	@ (8002d24 <HAL_RCC_OscConfig+0x278>)
 8002bea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bec:	4b4e      	ldr	r3, [pc, #312]	@ (8002d28 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe fadf 	bl	80011b4 <HAL_InitTick>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d052      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	e327      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d032      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c0c:	4b43      	ldr	r3, [pc, #268]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a42      	ldr	r2, [pc, #264]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fb1c 	bl	8001254 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c20:	f7fe fb18 	bl	8001254 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e310      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c32:	4b3a      	ldr	r3, [pc, #232]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a36      	ldr	r2, [pc, #216]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4931      	ldr	r1, [pc, #196]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	492c      	ldr	r1, [pc, #176]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
 8002c70:	e01a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c72:	4b2a      	ldr	r3, [pc, #168]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a29      	ldr	r2, [pc, #164]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fae9 	bl	8001254 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c86:	f7fe fae5 	bl	8001254 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e2dd      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x1da>
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ca6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d074      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x21a>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d10e      	bne.n	8002cde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d10b      	bne.n	8002cde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d064      	beq.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d160      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e2ba      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x24a>
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0b      	ldr	r2, [pc, #44]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e026      	b.n	8002d44 <HAL_RCC_OscConfig+0x298>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cfe:	d115      	bne.n	8002d2c <HAL_RCC_OscConfig+0x280>
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a02      	ldr	r2, [pc, #8]	@ (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e014      	b.n	8002d44 <HAL_RCC_OscConfig+0x298>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	0800825c 	.word	0x0800825c
 8002d24:	20000004 	.word	0x20000004
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a9f      	ldr	r2, [pc, #636]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b9d      	ldr	r3, [pc, #628]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a9c      	ldr	r2, [pc, #624]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fa82 	bl	8001254 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fa7e 	bl	8001254 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e276      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	4b92      	ldr	r3, [pc, #584]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2a8>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa6e 	bl	8001254 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fa6a 	bl	8001254 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e262      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8e:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2d0>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d060      	beq.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_OscConfig+0x310>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d119      	bne.n	8002dea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d116      	bne.n	8002dea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x328>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e23f      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b76      	ldr	r3, [pc, #472]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	4973      	ldr	r1, [pc, #460]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de8:	e040      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d023      	beq.n	8002e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df2:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6e      	ldr	r2, [pc, #440]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fa29 	bl	8001254 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe fa25 	bl	8001254 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e21d      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	4b65      	ldr	r3, [pc, #404]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b62      	ldr	r3, [pc, #392]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	495f      	ldr	r1, [pc, #380]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	e018      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fa05 	bl	8001254 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fa01 	bl	8001254 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1f9      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e60:	4b53      	ldr	r3, [pc, #332]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e80:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f9e0 	bl	8001254 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe f9dc 	bl	8001254 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1d4      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eaa:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ef      	beq.n	8002e98 <HAL_RCC_OscConfig+0x3ec>
 8002eb8:	e01b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eba:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe f9c3 	bl	8001254 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f9bf 	bl	8001254 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1b7      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee4:	4b32      	ldr	r3, [pc, #200]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ef      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a6 	beq.w	800304c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f04:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	4a26      	ldr	r2, [pc, #152]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1c:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2c:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d118      	bne.n	8002f6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f38:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f44:	f7fe f986 	bl	8001254 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4c:	f7fe f982 	bl	8001254 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e17a      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4d8>
 8002f72:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f82:	e029      	b.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x50c>
 8002f8c:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a07      	ldr	r2, [pc, #28]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	4a03      	ldr	r2, [pc, #12]	@ (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	4a9b      	ldr	r2, [pc, #620]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fc8:	4b98      	ldr	r3, [pc, #608]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fce:	4a97      	ldr	r2, [pc, #604]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d016      	beq.n	800300e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe f938 	bl	8001254 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fe f934 	bl	8001254 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e12a      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ed      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x53c>
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe f921 	bl	8001254 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f91d 	bl	8001254 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e113      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800302c:	4b7f      	ldr	r3, [pc, #508]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ed      	bne.n	8003016 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303a:	7ffb      	ldrb	r3, [r7, #31]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b7a      	ldr	r3, [pc, #488]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	4a79      	ldr	r2, [pc, #484]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80fe 	beq.w	8003252 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	2b02      	cmp	r3, #2
 800305c:	f040 80d0 	bne.w	8003200 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003060:	4b72      	ldr	r3, [pc, #456]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	d130      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	3b01      	subs	r3, #1
 8003080:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d127      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003090:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d11f      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030a0:	2a07      	cmp	r2, #7
 80030a2:	bf14      	ite	ne
 80030a4:	2201      	movne	r2, #1
 80030a6:	2200      	moveq	r2, #0
 80030a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d113      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d06e      	beq.n	80031b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b0c      	cmp	r3, #12
 80030da:	d069      	beq.n	80031b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030dc:	4b53      	ldr	r3, [pc, #332]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030e8:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0ad      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030f8:	4b4c      	ldr	r3, [pc, #304]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a4b      	ldr	r2, [pc, #300]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80030fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003104:	f7fe f8a6 	bl	8001254 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe f8a2 	bl	8001254 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e09a      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	4b43      	ldr	r3, [pc, #268]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312a:	4b40      	ldr	r3, [pc, #256]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	4b40      	ldr	r3, [pc, #256]	@ (8003230 <HAL_RCC_OscConfig+0x784>)
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800313a:	3a01      	subs	r2, #1
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003144:	0212      	lsls	r2, r2, #8
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800314c:	0852      	lsrs	r2, r2, #1
 800314e:	3a01      	subs	r2, #1
 8003150:	0552      	lsls	r2, r2, #21
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003158:	0852      	lsrs	r2, r2, #1
 800315a:	3a01      	subs	r2, #1
 800315c:	0652      	lsls	r2, r2, #25
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003164:	0912      	lsrs	r2, r2, #4
 8003166:	0452      	lsls	r2, r2, #17
 8003168:	430a      	orrs	r2, r1
 800316a:	4930      	ldr	r1, [pc, #192]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 800316c:	4313      	orrs	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003170:	4b2e      	ldr	r3, [pc, #184]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2d      	ldr	r2, [pc, #180]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800317a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800317c:	4b2b      	ldr	r3, [pc, #172]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a2a      	ldr	r2, [pc, #168]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003186:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003188:	f7fe f864 	bl	8001254 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe f860 	bl	8001254 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e058      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	4b22      	ldr	r3, [pc, #136]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ae:	e050      	b.n	8003252 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e04f      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b4:	4b1d      	ldr	r3, [pc, #116]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d148      	bne.n	8003252 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031c0:	4b1a      	ldr	r3, [pc, #104]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a19      	ldr	r2, [pc, #100]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031cc:	4b17      	ldr	r3, [pc, #92]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a16      	ldr	r2, [pc, #88]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d8:	f7fe f83c 	bl	8001254 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe f838 	bl	8001254 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e030      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x734>
 80031fe:	e028      	b.n	8003252 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d023      	beq.n	800324e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b09      	ldr	r3, [pc, #36]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a08      	ldr	r2, [pc, #32]	@ (800322c <HAL_RCC_OscConfig+0x780>)
 800320c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe f81f 	bl	8001254 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003218:	e00c      	b.n	8003234 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe f81b 	bl	8001254 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d905      	bls.n	8003234 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e013      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
 800322c:	40021000 	.word	0x40021000
 8003230:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <HAL_RCC_OscConfig+0x7b0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ec      	bne.n	800321a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_OscConfig+0x7b0>)
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	4905      	ldr	r1, [pc, #20]	@ (800325c <HAL_RCC_OscConfig+0x7b0>)
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_OscConfig+0x7b4>)
 8003248:	4013      	ands	r3, r2
 800324a:	60cb      	str	r3, [r1, #12]
 800324c:	e001      	b.n	8003252 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	feeefffc 	.word	0xfeeefffc

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0e7      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b75      	ldr	r3, [pc, #468]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d910      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b72      	ldr	r3, [pc, #456]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 0207 	bic.w	r2, r3, #7
 800328e:	4970      	ldr	r1, [pc, #448]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b6e      	ldr	r3, [pc, #440]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0cf      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b66      	ldr	r3, [pc, #408]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d908      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b63      	ldr	r3, [pc, #396]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4960      	ldr	r1, [pc, #384]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04c      	beq.n	800337c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d121      	bne.n	800333a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0a6      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003302:	4b54      	ldr	r3, [pc, #336]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e09a      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800331a:	4b4e      	ldr	r3, [pc, #312]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e08e      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332a:	4b4a      	ldr	r3, [pc, #296]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e086      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b46      	ldr	r3, [pc, #280]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4943      	ldr	r1, [pc, #268]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fd ff82 	bl	8001254 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fd ff7e 	bl	8001254 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e06e      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d010      	beq.n	80033aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003394:	429a      	cmp	r2, r3
 8003396:	d208      	bcs.n	80033aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003398:	4b2e      	ldr	r3, [pc, #184]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	492b      	ldr	r1, [pc, #172]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033aa:	4b29      	ldr	r3, [pc, #164]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d210      	bcs.n	80033da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b8:	4b25      	ldr	r3, [pc, #148]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 0207 	bic.w	r2, r3, #7
 80033c0:	4923      	ldr	r1, [pc, #140]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c8:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <HAL_RCC_ClockConfig+0x1ec>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e036      	b.n	8003448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4918      	ldr	r1, [pc, #96]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003404:	4b13      	ldr	r3, [pc, #76]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4910      	ldr	r1, [pc, #64]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003418:	f000 f824 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	490b      	ldr	r1, [pc, #44]	@ (8003458 <HAL_RCC_ClockConfig+0x1f4>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003438:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1fc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd feb9 	bl	80011b4 <HAL_InitTick>
 8003442:	4603      	mov	r3, r0
 8003444:	72fb      	strb	r3, [r7, #11]

  return status;
 8003446:	7afb      	ldrb	r3, [r7, #11]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40022000 	.word	0x40022000
 8003454:	40021000 	.word	0x40021000
 8003458:	0800825c 	.word	0x0800825c
 800345c:	20000004 	.word	0x20000004
 8003460:	20000008 	.word	0x20000008

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	@ 0x24
 8003468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003472:	4b3e      	ldr	r3, [pc, #248]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800347c:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x34>
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d121      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d11e      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003498:	4b34      	ldr	r3, [pc, #208]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a4:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b4:	4b2d      	ldr	r3, [pc, #180]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034dc:	4b25      	ldr	r3, [pc, #148]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x110>)
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e004      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e8:	4b23      	ldr	r3, [pc, #140]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d134      	bne.n	800355c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d003      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0xa6>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d003      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0xac>
 8003508:	e005      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x110>)
 800350c:	617b      	str	r3, [r7, #20]
      break;
 800350e:	e005      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x114>)
 8003512:	617b      	str	r3, [r7, #20]
      break;
 8003514:	e002      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	617b      	str	r3, [r7, #20]
      break;
 800351a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800351c:	4b13      	ldr	r3, [pc, #76]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	3301      	adds	r3, #1
 8003528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	fb03 f202 	mul.w	r2, r3, r2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <HAL_RCC_GetSysClockFreq+0x108>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	0e5b      	lsrs	r3, r3, #25
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	3301      	adds	r3, #1
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800355c:	69bb      	ldr	r3, [r7, #24]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	@ 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	08008274 	.word	0x08008274
 8003574:	00f42400 	.word	0x00f42400
 8003578:	007a1200 	.word	0x007a1200

0800357c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <HAL_RCC_GetHCLKFreq+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000004 	.word	0x20000004

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003598:	f7ff fff0 	bl	800357c <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4904      	ldr	r1, [pc, #16]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	0800826c 	.word	0x0800826c

080035c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c4:	f7ff ffda 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0adb      	lsrs	r3, r3, #11
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4904      	ldr	r1, [pc, #16]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	0800826c 	.word	0x0800826c

080035ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035f8:	4b2a      	ldr	r3, [pc, #168]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003604:	f7ff f9ee 	bl	80029e4 <HAL_PWREx_GetVoltageRange>
 8003608:	6178      	str	r0, [r7, #20]
 800360a:	e014      	b.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003610:	4a24      	ldr	r2, [pc, #144]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003616:	6593      	str	r3, [r2, #88]	@ 0x58
 8003618:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003624:	f7ff f9de 	bl	80029e4 <HAL_PWREx_GetVoltageRange>
 8003628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b1e      	ldr	r3, [pc, #120]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	4a1d      	ldr	r2, [pc, #116]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800363c:	d10b      	bne.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b80      	cmp	r3, #128	@ 0x80
 8003642:	d919      	bls.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2ba0      	cmp	r3, #160	@ 0xa0
 8003648:	d902      	bls.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800364a:	2302      	movs	r3, #2
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	e013      	b.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003650:	2301      	movs	r3, #1
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	e010      	b.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b80      	cmp	r3, #128	@ 0x80
 800365a:	d902      	bls.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800365c:	2303      	movs	r3, #3
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e00a      	b.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b80      	cmp	r3, #128	@ 0x80
 8003666:	d102      	bne.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003668:	2302      	movs	r3, #2
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e004      	b.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b70      	cmp	r3, #112	@ 0x70
 8003672:	d101      	bne.n	8003678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003674:	2301      	movs	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 0207 	bic.w	r2, r3, #7
 8003680:	4909      	ldr	r1, [pc, #36]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003688:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40022000 	.word	0x40022000

080036ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b4:	2300      	movs	r3, #0
 80036b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d041      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036d0:	d02a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036d6:	d824      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036e2:	d81e      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ec:	d010      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ee:	e018      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036f0:	4b86      	ldr	r3, [pc, #536]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a85      	ldr	r2, [pc, #532]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fc:	e015      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fabb 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370e:	e00c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3320      	adds	r3, #32
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fba6 	bl	8003e68 <RCCEx_PLLSAI2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	74fb      	strb	r3, [r7, #19]
      break;
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003730:	4b76      	ldr	r3, [pc, #472]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800373e:	4973      	ldr	r1, [pc, #460]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003746:	e001      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d041      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800375c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003760:	d02a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003766:	d824      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800376e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003772:	d81e      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800377c:	d010      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800377e:	e018      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003780:	4b62      	ldr	r3, [pc, #392]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a61      	ldr	r2, [pc, #388]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378c:	e015      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fa73 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379e:	e00c      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3320      	adds	r3, #32
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fb5e 	bl	8003e68 <RCCEx_PLLSAI2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	74fb      	strb	r3, [r7, #19]
      break;
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037c0:	4b52      	ldr	r3, [pc, #328]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ce:	494f      	ldr	r1, [pc, #316]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037d6:	e001      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a0 	beq.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ee:	4b47      	ldr	r3, [pc, #284]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b41      	ldr	r3, [pc, #260]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	4a40      	ldr	r2, [pc, #256]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003810:	4b3e      	ldr	r3, [pc, #248]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003820:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a3a      	ldr	r2, [pc, #232]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382c:	f7fd fd12 	bl	8001254 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003832:	e009      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fd fd0e 	bl	8001254 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	74fb      	strb	r3, [r7, #19]
        break;
 8003846:	e005      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ef      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d15c      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800385a:	4b2c      	ldr	r3, [pc, #176]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01f      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d019      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003878:	4b24      	ldr	r3, [pc, #144]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003884:	4b21      	ldr	r3, [pc, #132]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a20      	ldr	r2, [pc, #128]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	4a1c      	ldr	r2, [pc, #112]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a4:	4a19      	ldr	r2, [pc, #100]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fd fccd 	bl	8001254 <HAL_GetTick>
 80038ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038bc:	e00b      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fcc9 	bl	8001254 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	74fb      	strb	r3, [r7, #19]
            break;
 80038d4:	e006      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ec      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fa:	4904      	ldr	r1, [pc, #16]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003902:	e009      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003918:	7c7b      	ldrb	r3, [r7, #17]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b9e      	ldr	r3, [pc, #632]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	4a9d      	ldr	r2, [pc, #628]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003936:	4b98      	ldr	r3, [pc, #608]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393c:	f023 0203 	bic.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	4994      	ldr	r1, [pc, #592]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003958:	4b8f      	ldr	r3, [pc, #572]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f023 020c 	bic.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003966:	498c      	ldr	r1, [pc, #560]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397a:	4b87      	ldr	r3, [pc, #540]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	4983      	ldr	r1, [pc, #524]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	497b      	ldr	r1, [pc, #492]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039be:	4b76      	ldr	r3, [pc, #472]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039cc:	4972      	ldr	r1, [pc, #456]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ee:	496a      	ldr	r1, [pc, #424]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a02:	4b65      	ldr	r3, [pc, #404]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	4961      	ldr	r1, [pc, #388]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a24:	4b5c      	ldr	r3, [pc, #368]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	4959      	ldr	r1, [pc, #356]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a46:	4b54      	ldr	r3, [pc, #336]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a54:	4950      	ldr	r1, [pc, #320]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a68:	4b4b      	ldr	r3, [pc, #300]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	4948      	ldr	r1, [pc, #288]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8a:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	493f      	ldr	r1, [pc, #252]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d028      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aac:	4b3a      	ldr	r3, [pc, #232]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aba:	4937      	ldr	r1, [pc, #220]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aca:	d106      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b32      	ldr	r3, [pc, #200]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
 8003ad8:	e011      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f8c8 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d028      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b0a:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	491f      	ldr	r1, [pc, #124]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b34:	60d3      	str	r3, [r2, #12]
 8003b36:	e011      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f899 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d02b      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	4908      	ldr	r1, [pc, #32]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b86:	d109      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b88:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a02      	ldr	r2, [pc, #8]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b92:	60d3      	str	r3, [r2, #12]
 8003b94:	e014      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f867 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bda:	4928      	ldr	r1, [pc, #160]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f844 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d014      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
 8003c06:	e011      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3320      	adds	r3, #32
 8003c16:	2102      	movs	r1, #2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f925 	bl	8003e68 <RCCEx_PLLSAI2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c46:	490d      	ldr	r1, [pc, #52]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c6a:	4904      	ldr	r1, [pc, #16]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c8e:	4b75      	ldr	r3, [pc, #468]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9a:	4b72      	ldr	r3, [pc, #456]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d10d      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
       ||
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d047      	beq.n	8003d56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e044      	b.n	8003d56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d018      	beq.n	8003d06 <RCCEx_PLLSAI1_Config+0x86>
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d825      	bhi.n	8003d24 <RCCEx_PLLSAI1_Config+0xa4>
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d002      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x62>
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d009      	beq.n	8003cf4 <RCCEx_PLLSAI1_Config+0x74>
 8003ce0:	e020      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce2:	4b60      	ldr	r3, [pc, #384]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf2:	e01a      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d04:	e013      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d06:	4b57      	ldr	r3, [pc, #348]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d12:	4b54      	ldr	r3, [pc, #336]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d22:	e006      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e004      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	4944      	ldr	r1, [pc, #272]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d17d      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d5c:	4b41      	ldr	r3, [pc, #260]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a40      	ldr	r2, [pc, #256]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fd fa74 	bl	8001254 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d70:	f7fd fa70 	bl	8001254 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
        break;
 8003d82:	e005      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d84:	4b37      	ldr	r3, [pc, #220]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ef      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d160      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d9c:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6892      	ldr	r2, [r2, #8]
 8003dac:	0211      	lsls	r1, r2, #8
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	0912      	lsrs	r2, r2, #4
 8003db4:	0452      	lsls	r2, r2, #17
 8003db6:	430a      	orrs	r2, r1
 8003db8:	492a      	ldr	r1, [pc, #168]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	610b      	str	r3, [r1, #16]
 8003dbe:	e027      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d112      	bne.n	8003dec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc6:	4b27      	ldr	r3, [pc, #156]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	0211      	lsls	r1, r2, #8
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6912      	ldr	r2, [r2, #16]
 8003ddc:	0852      	lsrs	r2, r2, #1
 8003dde:	3a01      	subs	r2, #1
 8003de0:	0552      	lsls	r2, r2, #21
 8003de2:	430a      	orrs	r2, r1
 8003de4:	491f      	ldr	r1, [pc, #124]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
 8003dea:	e011      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003df4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6892      	ldr	r2, [r2, #8]
 8003dfc:	0211      	lsls	r1, r2, #8
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6952      	ldr	r2, [r2, #20]
 8003e02:	0852      	lsrs	r2, r2, #1
 8003e04:	3a01      	subs	r2, #1
 8003e06:	0652      	lsls	r2, r2, #25
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	4916      	ldr	r1, [pc, #88]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fd fa1a 	bl	8001254 <HAL_GetTick>
 8003e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e22:	e009      	b.n	8003e38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e24:	f7fd fa16 	bl	8001254 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d902      	bls.n	8003e38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	73fb      	strb	r3, [r7, #15]
          break;
 8003e36:	e005      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e38:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ef      	beq.n	8003e24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e4a:	4b06      	ldr	r3, [pc, #24]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	4904      	ldr	r1, [pc, #16]	@ (8003e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000

08003e68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e76:	4b6a      	ldr	r3, [pc, #424]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e82:	4b67      	ldr	r3, [pc, #412]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d10d      	bne.n	8003eae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
       ||
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e9a:	4b61      	ldr	r3, [pc, #388]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d047      	beq.n	8003f3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e044      	b.n	8003f3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d018      	beq.n	8003eee <RCCEx_PLLSAI2_Config+0x86>
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d825      	bhi.n	8003f0c <RCCEx_PLLSAI2_Config+0xa4>
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d002      	beq.n	8003eca <RCCEx_PLLSAI2_Config+0x62>
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d009      	beq.n	8003edc <RCCEx_PLLSAI2_Config+0x74>
 8003ec8:	e020      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eca:	4b55      	ldr	r3, [pc, #340]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11d      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eda:	e01a      	b.n	8003f12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003edc:	4b50      	ldr	r3, [pc, #320]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d116      	bne.n	8003f16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e013      	b.n	8003f16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eee:	4b4c      	ldr	r3, [pc, #304]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003efa:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f0a:	e006      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e004      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f22:	4b3f      	ldr	r3, [pc, #252]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	430b      	orrs	r3, r1
 8003f38:	4939      	ldr	r1, [pc, #228]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d167      	bne.n	8004014 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f44:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a35      	ldr	r2, [pc, #212]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f50:	f7fd f980 	bl	8001254 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f56:	e009      	b.n	8003f6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f58:	f7fd f97c 	bl	8001254 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d902      	bls.n	8003f6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6a:	e005      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ef      	bne.n	8003f58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d14a      	bne.n	8004014 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d111      	bne.n	8003fa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f84:	4b26      	ldr	r3, [pc, #152]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6892      	ldr	r2, [r2, #8]
 8003f94:	0211      	lsls	r1, r2, #8
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	0912      	lsrs	r2, r2, #4
 8003f9c:	0452      	lsls	r2, r2, #17
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	491f      	ldr	r1, [pc, #124]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	614b      	str	r3, [r1, #20]
 8003fa6:	e011      	b.n	8003fcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6892      	ldr	r2, [r2, #8]
 8003fb8:	0211      	lsls	r1, r2, #8
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6912      	ldr	r2, [r2, #16]
 8003fbe:	0852      	lsrs	r2, r2, #1
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0652      	lsls	r2, r2, #25
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	4916      	ldr	r1, [pc, #88]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fcc:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fd f93c 	bl	8001254 <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fde:	e009      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fe0:	f7fd f938 	bl	8001254 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d902      	bls.n	8003ff4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff2:	e005      	b.n	8004000 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ef      	beq.n	8003fe0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004006:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4904      	ldr	r1, [pc, #16]	@ (8004020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e040      	b.n	80040b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd f806 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	@ 0x24
 8004050:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fe74 	bl	8004d58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fbb9 	bl	80047e8 <UART_SetConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e01b      	b.n	80040b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800408e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800409e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fef3 	bl	8004e9c <UART_CheckIdleState>
 80040b6:	4603      	mov	r3, r0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	@ 0x28
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d177      	bne.n	80041c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Transmit+0x24>
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e070      	b.n	80041ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2221      	movs	r2, #33	@ 0x21
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f6:	f7fd f8ad 	bl	8001254 <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d108      	bne.n	8004128 <HAL_UART_Transmit+0x68>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e003      	b.n	8004130 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004130:	e02f      	b.n	8004192 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	@ 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 ff55 	bl	8004fec <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03b      	b.n	80041ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	881a      	ldrh	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004164:	b292      	uxth	r2, r2
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3302      	adds	r3, #2
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e007      	b.n	8004180 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1c9      	bne.n	8004132 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2140      	movs	r1, #64	@ 0x40
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 ff1f 	bl	8004fec <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e005      	b.n	80041ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b0ba      	sub	sp, #232	@ 0xe8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004202:	4013      	ands	r3, r2
 8004204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d115      	bne.n	800423c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00f      	beq.n	800423c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 82ae 	beq.w	800478e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
      }
      return;
 800423a:	e2a8      	b.n	800478e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800423c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8117 	beq.w	8004474 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004256:	4b85      	ldr	r3, [pc, #532]	@ (800446c <HAL_UART_IRQHandler+0x298>)
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 810a 	beq.w	8004474 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0xbc>
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d011      	beq.n	80042c0 <HAL_UART_IRQHandler+0xec>
 800429c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2202      	movs	r2, #2
 80042ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d011      	beq.n	80042f0 <HAL_UART_IRQHandler+0x11c>
 80042cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2204      	movs	r2, #4
 80042de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e6:	f043 0202 	orr.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d017      	beq.n	800432c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2208      	movs	r2, #8
 800431a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004322:	f043 0208 	orr.w	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004334:	2b00      	cmp	r3, #0
 8004336:	d012      	beq.n	800435e <HAL_UART_IRQHandler+0x18a>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800433c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800434c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8214 	beq.w	8004792 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a6:	2b40      	cmp	r3, #64	@ 0x40
 80043a8:	d005      	beq.n	80043b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04f      	beq.n	8004456 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fe7f 	bl	80050ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d141      	bne.n	800444e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3308      	adds	r3, #8
 80043d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1d9      	bne.n	80043ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	4a13      	ldr	r2, [pc, #76]	@ (8004470 <HAL_UART_IRQHandler+0x29c>)
 8004424:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd f891 	bl	8001552 <HAL_DMA_Abort_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800443a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e00f      	b.n	8004466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9b8 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00b      	b.n	8004466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9b4 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e007      	b.n	8004466 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9b0 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004464:	e195      	b.n	8004792 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004466:	bf00      	nop
    return;
 8004468:	e193      	b.n	8004792 <HAL_UART_IRQHandler+0x5be>
 800446a:	bf00      	nop
 800446c:	04000120 	.word	0x04000120
 8004470:	08005183 	.word	0x08005183

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 814e 	bne.w	800471a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8147 	beq.w	800471a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8140 	beq.w	800471a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	f040 80b8 	bne.w	8004622 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8167 	beq.w	8004796 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d2:	429a      	cmp	r2, r3
 80044d4:	f080 815f 	bcs.w	8004796 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 8086 	bne.w	8004600 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800450c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800451e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004522:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800452a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1da      	bne.n	80044f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800454e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800456a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e1      	bne.n	800453e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3308      	adds	r3, #8
 8004580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800458a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800458c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800459e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e3      	bne.n	800457a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d0:	f023 0310 	bic.w	r3, r3, #16
 80045d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e4      	bne.n	80045c0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc ff6b 	bl	80014d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004612:	b29b      	uxth	r3, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8d8 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004620:	e0b9      	b.n	8004796 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800462e:	b29b      	uxth	r3, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80ab 	beq.w	800479a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a6 	beq.w	800479a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800465c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
 8004672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800467e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e4      	bne.n	800464e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	623b      	str	r3, [r7, #32]
   return(result);
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e3      	bne.n	8004684 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f023 0310 	bic.w	r3, r3, #16
 80046e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	69b9      	ldr	r1, [r7, #24]
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e4      	bne.n	80046d0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f85c 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004718:	e03f      	b.n	800479a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <HAL_UART_IRQHandler+0x570>
 8004726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800472a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800473a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fd60 	bl	8005202 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004742:	e02d      	b.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01c      	beq.n	800479e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
    }
    return;
 800476c:	e017      	b.n	800479e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fd11 	bl	80051ae <UART_EndTransmit_IT>
    return;
 800478c:	e008      	b.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800478e:	bf00      	nop
 8004790:	e006      	b.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004792:	bf00      	nop
 8004794:	e004      	b.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800479e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047a0:	37e8      	adds	r7, #232	@ 0xe8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop

080047a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b08a      	sub	sp, #40	@ 0x28
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	431a      	orrs	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	431a      	orrs	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	4313      	orrs	r3, r2
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4ba4      	ldr	r3, [pc, #656]	@ (8004aa8 <UART_SetConfig+0x2c0>)
 8004818:	4013      	ands	r3, r2
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004820:	430b      	orrs	r3, r1
 8004822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a99      	ldr	r2, [pc, #612]	@ (8004aac <UART_SetConfig+0x2c4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004850:	4313      	orrs	r3, r2
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a90      	ldr	r2, [pc, #576]	@ (8004ab0 <UART_SetConfig+0x2c8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d126      	bne.n	80048c0 <UART_SetConfig+0xd8>
 8004872:	4b90      	ldr	r3, [pc, #576]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b03      	cmp	r3, #3
 800487e:	d81b      	bhi.n	80048b8 <UART_SetConfig+0xd0>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <UART_SetConfig+0xa0>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	08004899 	.word	0x08004899
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048b1 	.word	0x080048b1
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489e:	e116      	b.n	8004ace <UART_SetConfig+0x2e6>
 80048a0:	2302      	movs	r3, #2
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a6:	e112      	b.n	8004ace <UART_SetConfig+0x2e6>
 80048a8:	2304      	movs	r3, #4
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ae:	e10e      	b.n	8004ace <UART_SetConfig+0x2e6>
 80048b0:	2308      	movs	r3, #8
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b6:	e10a      	b.n	8004ace <UART_SetConfig+0x2e6>
 80048b8:	2310      	movs	r3, #16
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e106      	b.n	8004ace <UART_SetConfig+0x2e6>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7c      	ldr	r2, [pc, #496]	@ (8004ab8 <UART_SetConfig+0x2d0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d138      	bne.n	800493c <UART_SetConfig+0x154>
 80048ca:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d82d      	bhi.n	8004934 <UART_SetConfig+0x14c>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <UART_SetConfig+0xf8>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004915 	.word	0x08004915
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004935 	.word	0x08004935
 80048ec:	08004935 	.word	0x08004935
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004935 	.word	0x08004935
 80048fc:	08004935 	.word	0x08004935
 8004900:	0800491d 	.word	0x0800491d
 8004904:	08004935 	.word	0x08004935
 8004908:	08004935 	.word	0x08004935
 800490c:	08004935 	.word	0x08004935
 8004910:	0800492d 	.word	0x0800492d
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491a:	e0d8      	b.n	8004ace <UART_SetConfig+0x2e6>
 800491c:	2302      	movs	r3, #2
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004922:	e0d4      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004924:	2304      	movs	r3, #4
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492a:	e0d0      	b.n	8004ace <UART_SetConfig+0x2e6>
 800492c:	2308      	movs	r3, #8
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004932:	e0cc      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004934:	2310      	movs	r3, #16
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493a:	e0c8      	b.n	8004ace <UART_SetConfig+0x2e6>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5e      	ldr	r2, [pc, #376]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d125      	bne.n	8004992 <UART_SetConfig+0x1aa>
 8004946:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004950:	2b30      	cmp	r3, #48	@ 0x30
 8004952:	d016      	beq.n	8004982 <UART_SetConfig+0x19a>
 8004954:	2b30      	cmp	r3, #48	@ 0x30
 8004956:	d818      	bhi.n	800498a <UART_SetConfig+0x1a2>
 8004958:	2b20      	cmp	r3, #32
 800495a:	d00a      	beq.n	8004972 <UART_SetConfig+0x18a>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d814      	bhi.n	800498a <UART_SetConfig+0x1a2>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <UART_SetConfig+0x182>
 8004964:	2b10      	cmp	r3, #16
 8004966:	d008      	beq.n	800497a <UART_SetConfig+0x192>
 8004968:	e00f      	b.n	800498a <UART_SetConfig+0x1a2>
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004970:	e0ad      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004972:	2302      	movs	r3, #2
 8004974:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004978:	e0a9      	b.n	8004ace <UART_SetConfig+0x2e6>
 800497a:	2304      	movs	r3, #4
 800497c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004980:	e0a5      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004982:	2308      	movs	r3, #8
 8004984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004988:	e0a1      	b.n	8004ace <UART_SetConfig+0x2e6>
 800498a:	2310      	movs	r3, #16
 800498c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004990:	e09d      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac0 <UART_SetConfig+0x2d8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d125      	bne.n	80049e8 <UART_SetConfig+0x200>
 800499c:	4b45      	ldr	r3, [pc, #276]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a8:	d016      	beq.n	80049d8 <UART_SetConfig+0x1f0>
 80049aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80049ac:	d818      	bhi.n	80049e0 <UART_SetConfig+0x1f8>
 80049ae:	2b80      	cmp	r3, #128	@ 0x80
 80049b0:	d00a      	beq.n	80049c8 <UART_SetConfig+0x1e0>
 80049b2:	2b80      	cmp	r3, #128	@ 0x80
 80049b4:	d814      	bhi.n	80049e0 <UART_SetConfig+0x1f8>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <UART_SetConfig+0x1d8>
 80049ba:	2b40      	cmp	r3, #64	@ 0x40
 80049bc:	d008      	beq.n	80049d0 <UART_SetConfig+0x1e8>
 80049be:	e00f      	b.n	80049e0 <UART_SetConfig+0x1f8>
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c6:	e082      	b.n	8004ace <UART_SetConfig+0x2e6>
 80049c8:	2302      	movs	r3, #2
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ce:	e07e      	b.n	8004ace <UART_SetConfig+0x2e6>
 80049d0:	2304      	movs	r3, #4
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d6:	e07a      	b.n	8004ace <UART_SetConfig+0x2e6>
 80049d8:	2308      	movs	r3, #8
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049de:	e076      	b.n	8004ace <UART_SetConfig+0x2e6>
 80049e0:	2310      	movs	r3, #16
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e072      	b.n	8004ace <UART_SetConfig+0x2e6>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a35      	ldr	r2, [pc, #212]	@ (8004ac4 <UART_SetConfig+0x2dc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d12a      	bne.n	8004a48 <UART_SetConfig+0x260>
 80049f2:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a00:	d01a      	beq.n	8004a38 <UART_SetConfig+0x250>
 8004a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a06:	d81b      	bhi.n	8004a40 <UART_SetConfig+0x258>
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a0c:	d00c      	beq.n	8004a28 <UART_SetConfig+0x240>
 8004a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a12:	d815      	bhi.n	8004a40 <UART_SetConfig+0x258>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <UART_SetConfig+0x238>
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a1c:	d008      	beq.n	8004a30 <UART_SetConfig+0x248>
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x258>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a26:	e052      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2e:	e04e      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a36:	e04a      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3e:	e046      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a46:	e042      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a17      	ldr	r2, [pc, #92]	@ (8004aac <UART_SetConfig+0x2c4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d13a      	bne.n	8004ac8 <UART_SetConfig+0x2e0>
 8004a52:	4b18      	ldr	r3, [pc, #96]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a60:	d01a      	beq.n	8004a98 <UART_SetConfig+0x2b0>
 8004a62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a66:	d81b      	bhi.n	8004aa0 <UART_SetConfig+0x2b8>
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a6c:	d00c      	beq.n	8004a88 <UART_SetConfig+0x2a0>
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a72:	d815      	bhi.n	8004aa0 <UART_SetConfig+0x2b8>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <UART_SetConfig+0x298>
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7c:	d008      	beq.n	8004a90 <UART_SetConfig+0x2a8>
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x2b8>
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a86:	e022      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8e:	e01e      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a96:	e01a      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9e:	e016      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa6:	e012      	b.n	8004ace <UART_SetConfig+0x2e6>
 8004aa8:	efff69f3 	.word	0xefff69f3
 8004aac:	40008000 	.word	0x40008000
 8004ab0:	40013800 	.word	0x40013800
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40004400 	.word	0x40004400
 8004abc:	40004800 	.word	0x40004800
 8004ac0:	40004c00 	.word	0x40004c00
 8004ac4:	40005000 	.word	0x40005000
 8004ac8:	2310      	movs	r3, #16
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8004d50 <UART_SetConfig+0x568>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d17a      	bne.n	8004bce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d824      	bhi.n	8004b2a <UART_SetConfig+0x342>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <UART_SetConfig+0x300>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b2b 	.word	0x08004b2b
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b1b 	.word	0x08004b1b
 8004afc:	08004b2b 	.word	0x08004b2b
 8004b00:	08004b2b 	.word	0x08004b2b
 8004b04:	08004b2b 	.word	0x08004b2b
 8004b08:	08004b23 	.word	0x08004b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fe fd42 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004b10:	61f8      	str	r0, [r7, #28]
        break;
 8004b12:	e010      	b.n	8004b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b14:	4b8f      	ldr	r3, [pc, #572]	@ (8004d54 <UART_SetConfig+0x56c>)
 8004b16:	61fb      	str	r3, [r7, #28]
        break;
 8004b18:	e00d      	b.n	8004b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fe fca3 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004b1e:	61f8      	str	r0, [r7, #28]
        break;
 8004b20:	e009      	b.n	8004b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b26:	61fb      	str	r3, [r7, #28]
        break;
 8004b28:	e005      	b.n	8004b36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80fb 	beq.w	8004d34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d305      	bcc.n	8004b5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d903      	bls.n	8004b62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b60:	e0e8      	b.n	8004d34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2200      	movs	r2, #0
 8004b66:	461c      	mov	r4, r3
 8004b68:	4615      	mov	r5, r2
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	022b      	lsls	r3, r5, #8
 8004b74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b78:	0222      	lsls	r2, r4, #8
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6849      	ldr	r1, [r1, #4]
 8004b7e:	0849      	lsrs	r1, r1, #1
 8004b80:	2000      	movs	r0, #0
 8004b82:	4688      	mov	r8, r1
 8004b84:	4681      	mov	r9, r0
 8004b86:	eb12 0a08 	adds.w	sl, r2, r8
 8004b8a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	4659      	mov	r1, fp
 8004ba0:	f7fb fb66 	bl	8000270 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb2:	d308      	bcc.n	8004bc6 <UART_SetConfig+0x3de>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bba:	d204      	bcs.n	8004bc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e0b6      	b.n	8004d34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bcc:	e0b2      	b.n	8004d34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd6:	d15e      	bne.n	8004c96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d828      	bhi.n	8004c32 <UART_SetConfig+0x44a>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x400>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	08004c33 	.word	0x08004c33
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c33 	.word	0x08004c33
 8004c00:	08004c33 	.word	0x08004c33
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fe fcc2 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004c10:	61f8      	str	r0, [r7, #28]
        break;
 8004c12:	e014      	b.n	8004c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe fcd4 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8004c18:	61f8      	str	r0, [r7, #28]
        break;
 8004c1a:	e010      	b.n	8004c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d54 <UART_SetConfig+0x56c>)
 8004c1e:	61fb      	str	r3, [r7, #28]
        break;
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fe fc1f 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004c26:	61f8      	str	r0, [r7, #28]
        break;
 8004c28:	e009      	b.n	8004c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c2e:	61fb      	str	r3, [r7, #28]
        break;
 8004c30:	e005      	b.n	8004c3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d077      	beq.n	8004d34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	005a      	lsls	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	441a      	add	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d916      	bls.n	8004c8e <UART_SetConfig+0x4a6>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c66:	d212      	bcs.n	8004c8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f023 030f 	bic.w	r3, r3, #15
 8004c70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	8afb      	ldrh	r3, [r7, #22]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	8afa      	ldrh	r2, [r7, #22]
 8004c8a:	60da      	str	r2, [r3, #12]
 8004c8c:	e052      	b.n	8004d34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c94:	e04e      	b.n	8004d34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d827      	bhi.n	8004cee <UART_SetConfig+0x506>
 8004c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <UART_SetConfig+0x4bc>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cd9 	.word	0x08004cd9
 8004cb0:	08004cef 	.word	0x08004cef
 8004cb4:	08004cdf 	.word	0x08004cdf
 8004cb8:	08004cef 	.word	0x08004cef
 8004cbc:	08004cef 	.word	0x08004cef
 8004cc0:	08004cef 	.word	0x08004cef
 8004cc4:	08004ce7 	.word	0x08004ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc8:	f7fe fc64 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004ccc:	61f8      	str	r0, [r7, #28]
        break;
 8004cce:	e014      	b.n	8004cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7fe fc76 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8004cd4:	61f8      	str	r0, [r7, #28]
        break;
 8004cd6:	e010      	b.n	8004cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d54 <UART_SetConfig+0x56c>)
 8004cda:	61fb      	str	r3, [r7, #28]
        break;
 8004cdc:	e00d      	b.n	8004cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cde:	f7fe fbc1 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004ce2:	61f8      	str	r0, [r7, #28]
        break;
 8004ce4:	e009      	b.n	8004cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cea:	61fb      	str	r3, [r7, #28]
        break;
 8004cec:	e005      	b.n	8004cfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cf8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d019      	beq.n	8004d34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	085a      	lsrs	r2, r3, #1
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d909      	bls.n	8004d2e <UART_SetConfig+0x546>
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d20:	d205      	bcs.n	8004d2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e002      	b.n	8004d34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	40008000 	.word	0x40008000
 8004d54:	00f42400 	.word	0x00f42400

08004d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01a      	beq.n	8004e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e56:	d10a      	bne.n	8004e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	605a      	str	r2, [r3, #4]
  }
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b098      	sub	sp, #96	@ 0x60
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eac:	f7fc f9d2 	bl	8001254 <HAL_GetTick>
 8004eb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d12e      	bne.n	8004f1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f88c 	bl	8004fec <UART_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d021      	beq.n	8004f1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e6      	bne.n	8004eda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e062      	b.n	8004fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d149      	bne.n	8004fc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f856 	bl	8004fec <UART_WaitOnFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03c      	beq.n	8004fc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	623b      	str	r3, [r7, #32]
   return(result);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e6      	bne.n	8004f46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f98:	61fa      	str	r2, [r7, #28]
 8004f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e011      	b.n	8004fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3758      	adds	r7, #88	@ 0x58
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffc:	e049      	b.n	8005092 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005004:	d045      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fc f925 	bl	8001254 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <UART_WaitOnFlagUntilTimeout+0x30>
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e048      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d031      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b08      	cmp	r3, #8
 800503a:	d110      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2208      	movs	r2, #8
 8005042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f838 	bl	80050ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2208      	movs	r2, #8
 800504e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e029      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506c:	d111      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f81e 	bl	80050ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e00f      	b.n	80050b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d0a6      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b095      	sub	sp, #84	@ 0x54
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	61fb      	str	r3, [r7, #28]
   return(result);
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005114:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800511a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512c:	2b01      	cmp	r3, #1
 800512e:	d118      	bne.n	8005162 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	60bb      	str	r3, [r7, #8]
   return(result);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f023 0310 	bic.w	r3, r3, #16
 8005144:	647b      	str	r3, [r7, #68]	@ 0x44
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6979      	ldr	r1, [r7, #20]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	613b      	str	r3, [r7, #16]
   return(result);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e6      	bne.n	8005130 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005176:	bf00      	nop
 8005178:	3754      	adds	r7, #84	@ 0x54
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fb0b 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	613b      	str	r3, [r7, #16]
   return(result);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fad7 	bl	80047a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051fa:	bf00      	nop
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	461a      	mov	r2, r3
 8005224:	4603      	mov	r3, r0
 8005226:	70fb      	strb	r3, [r7, #3]
 8005228:	460b      	mov	r3, r1
 800522a:	70bb      	strb	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8005238:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	8839      	ldrh	r1, [r7, #0]
 8005244:	f7fb fd6a 	bl	8000d1c <VL53L5CX_RdMulti>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	4313      	orrs	r3, r2
 8005250:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	210a      	movs	r1, #10
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb fdc8 	bl	8000dec <VL53L5CX_WaitMs>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	4313      	orrs	r3, r2
 8005264:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8005266:	7bbb      	ldrb	r3, [r7, #14]
 8005268:	2bc7      	cmp	r3, #199	@ 0xc7
 800526a:	d904      	bls.n	8005276 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
			break;
 8005274:	e01a      	b.n	80052ac <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d909      	bls.n	8005290 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8005282:	2b7e      	cmp	r3, #126	@ 0x7e
 8005284:	d904      	bls.n	8005290 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800528c:	73fb      	strb	r3, [r7, #15]
			break;
 800528e:	e00d      	b.n	80052ac <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	3301      	adds	r3, #1
 8005294:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8005296:	78bb      	ldrb	r3, [r7, #2]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4413      	add	r3, r2
 800529c:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80052a0:	7e3b      	ldrb	r3, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	7f3a      	ldrb	r2, [r7, #28]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1c5      	bne.n	8005238 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f107 020b 	add.w	r2, r7, #11
 80052cc:	2106      	movs	r1, #6
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb fca8 	bl	8000c24 <VL53L5CX_RdByte>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	4313      	orrs	r3, r2
 80052dc:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	b25b      	sxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	da10      	bge.n	8005308 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f107 020a 	add.w	r2, r7, #10
 80052ec:	2107      	movs	r1, #7
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb fc98 	bl	8000c24 <VL53L5CX_RdByte>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 80052fe:	7aba      	ldrb	r2, [r7, #10]
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	4313      	orrs	r3, r2
 8005304:	73fb      	strb	r3, [r7, #15]
			break;
 8005306:	e012      	b.n	800532e <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2101      	movs	r1, #1
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb fd6d 	bl	8000dec <VL53L5CX_WaitMs>
		timeout++;
 8005312:	89bb      	ldrh	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8005318:	7afb      	ldrb	r3, [r7, #11]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8005322:	89bb      	ldrh	r3, [r7, #12]
 8005324:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005328:	d3cd      	bcc.n	80052c6 <_vl53l5cx_poll_for_mcu_boot+0x10>
 800532a:	e000      	b.n	800532e <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 800532c:	bf00      	nop

   return status;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b0ea      	sub	sp, #424	@ 0x1a8
 800533c:	af02      	add	r7, sp, #8
 800533e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005342:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005346:	6018      	str	r0, [r3, #0]
 8005348:	460a      	mov	r2, r1
 800534a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800534e:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8005352:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800535a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800535e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005362:	4ad9      	ldr	r2, [pc, #868]	@ (80056c8 <_vl53l5cx_send_offset_data+0x390>)
 8005364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005368:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 800536c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005370:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005374:	4ad5      	ldr	r2, [pc, #852]	@ (80056cc <_vl53l5cx_send_offset_data+0x394>)
 8005376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800537a:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800537e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005382:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 800538c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005390:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8005398:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800539c:	4619      	mov	r1, r3
 800539e:	f001 feca 	bl	8007136 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80053a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053a6:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	f040 8122 	bne.w	80055f6 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80053b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80053c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80053c8:	cb03      	ldmia	r3!, {r0, r1}
 80053ca:	6010      	str	r0, [r2, #0]
 80053cc:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80053ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053dc:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb fccd 	bl	8000d80 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80053e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80053ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 80053f4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80053f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 fe9a 	bl	8007136 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8005402:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005406:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8005410:	f107 0318 	add.w	r3, r7, #24
 8005414:	2280      	movs	r2, #128	@ 0x80
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fe8d 	bl	8007136 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 800541c:	2300      	movs	r3, #0
 800541e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8005422:	e0ac      	b.n	800557e <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8005424:	2300      	movs	r3, #0
 8005426:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800542a:	e09c      	b.n	8005566 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 800542c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8005430:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	005a      	lsls	r2, r3, #1
 800543a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800543e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8005446:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800544a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	440b      	add	r3, r1
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005462:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8005464:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8005468:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	440b      	add	r3, r1
 8005470:	3304      	adds	r3, #4
 8005472:	0059      	lsls	r1, r3, #1
 8005474:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005480:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8005482:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8005486:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	f103 0109 	add.w	r1, r3, #9
 8005494:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800549c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80054a0:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80054a2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80054a6:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80054aa:	0092      	lsls	r2, r2, #2
 80054ac:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80054ae:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80054b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 80054bc:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80054c0:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	005a      	lsls	r2, r3, #1
 80054ca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80054d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80054d6:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80054d8:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80054dc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80054ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80054f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80054f4:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80054f6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80054fa:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80054fe:	00d2      	lsls	r2, r2, #3
 8005500:	440a      	add	r2, r1
 8005502:	3204      	adds	r2, #4
 8005504:	0051      	lsls	r1, r2, #1
 8005506:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800550a:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800550e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8005512:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8005514:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8005518:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800551c:	00d2      	lsls	r2, r2, #3
 800551e:	440a      	add	r2, r1
 8005520:	0052      	lsls	r2, r2, #1
 8005522:	f102 0109 	add.w	r1, r2, #9
 8005526:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800552a:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800552e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8005532:	4413      	add	r3, r2
                                  /(int16_t)4;
 8005534:	2b00      	cmp	r3, #0
 8005536:	da00      	bge.n	800553a <_vl53l5cx_send_offset_data+0x202>
 8005538:	3303      	adds	r3, #3
 800553a:	109b      	asrs	r3, r3, #2
 800553c:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800553e:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8005542:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	b209      	sxth	r1, r1
 800554c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005550:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005554:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8005558:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800555c:	b2db      	uxtb	r3, r3
 800555e:	3301      	adds	r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8005566:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800556a:	2b03      	cmp	r3, #3
 800556c:	f77f af5e 	ble.w	800542c <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8005570:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8005574:	b2db      	uxtb	r3, r3
 8005576:	3301      	adds	r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800557e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8005582:	2b03      	cmp	r3, #3
 8005584:	f77f af4e 	ble.w	8005424 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8005588:	f107 0318 	add.w	r3, r7, #24
 800558c:	3320      	adds	r3, #32
 800558e:	2260      	movs	r2, #96	@ 0x60
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fd9a 	bl	80070cc <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8005598:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800559c:	3340      	adds	r3, #64	@ 0x40
 800559e:	22c0      	movs	r2, #192	@ 0xc0
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fd92 	bl	80070cc <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80055a8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055ac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 80055b6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80055ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fdb9 	bl	8007136 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 80055c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055c8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80055d2:	f107 0118 	add.w	r1, r7, #24
 80055d6:	2280      	movs	r2, #128	@ 0x80
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fdac 	bl	8007136 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80055de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80055e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ec:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fb fbc5 	bl	8000d80 <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80055fc:	e01b      	b.n	8005636 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80055fe:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800560a:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800560e:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8005612:	6809      	ldr	r1, [r1, #0]
 8005614:	440a      	add	r2, r1
 8005616:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 800561a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800561e:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	4413      	add	r3, r2
 8005626:	460a      	mov	r2, r1
 8005628:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800562c:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8005630:	3301      	adds	r3, #1
 8005632:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8005636:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800563a:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 800563e:	d3de      	bcc.n	80055fe <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8005640:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005644:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 800564e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005652:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005656:	cb03      	ldmia	r3!, {r0, r1}
 8005658:	6010      	str	r0, [r2, #0]
 800565a:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 800565c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005660:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800566a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8005674:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8005678:	f642 6118 	movw	r1, #11800	@ 0x2e18
 800567c:	f7fb fb2e 	bl	8000cdc <VL53L5CX_WrMulti>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8005688:	4313      	orrs	r3, r2
 800568a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800568e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8005692:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8005696:	2303      	movs	r3, #3
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	23ff      	movs	r3, #255	@ 0xff
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80056a2:	2201      	movs	r2, #1
 80056a4:	2104      	movs	r1, #4
 80056a6:	6800      	ldr	r0, [r0, #0]
 80056a8:	f7ff fdb5 	bl	8005216 <_vl53l5cx_poll_for_answer>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80056ba:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 80056be:	4618      	mov	r0, r3
 80056c0:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	08008130 	.word	0x08008130
 80056cc:	08008138 	.word	0x08008138

080056d0 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b0ca      	sub	sp, #296	@ 0x128
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80056de:	6018      	str	r0, [r3, #0]
 80056e0:	460a      	mov	r2, r1
 80056e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056e6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80056ea:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80056f2:	4a9a      	ldr	r2, [pc, #616]	@ (800595c <_vl53l5cx_send_xtalk_data+0x28c>)
 80056f4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80056f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056fc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8005700:	4a97      	ldr	r2, [pc, #604]	@ (8005960 <_vl53l5cx_send_xtalk_data+0x290>)
 8005702:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800570a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800570e:	4b95      	ldr	r3, [pc, #596]	@ (8005964 <_vl53l5cx_send_xtalk_data+0x294>)
 8005710:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8005714:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005718:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 8005722:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005726:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8005730:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8005734:	4619      	mov	r1, r3
 8005736:	f001 fcfe 	bl	8007136 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 800573a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800573e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b10      	cmp	r3, #16
 8005746:	f040 80d2 	bne.w	80058ee <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800574a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800574e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8005758:	461a      	mov	r2, r3
 800575a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800575e:	cb03      	ldmia	r3!, {r0, r1}
 8005760:	6010      	str	r0, [r2, #0]
 8005762:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8005764:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005768:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8005772:	461a      	mov	r2, r3
 8005774:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005778:	cb03      	ldmia	r3!, {r0, r1}
 800577a:	6010      	str	r0, [r2, #0]
 800577c:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800577e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005782:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8005790:	4618      	mov	r0, r3
 8005792:	f7fb faf5 	bl	8000d80 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8005796:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800579a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fcc2 	bl	8007136 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80057b8:	e05d      	b.n	8005876 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80057c0:	e04e      	b.n	8005860 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80057c2:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 80057c6:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	005a      	lsls	r2, r3, #1
 80057d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80057dc:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80057e0:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	440b      	add	r3, r1
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057f8:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80057fa:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80057fe:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	440b      	add	r3, r1
 8005806:	3304      	adds	r3, #4
 8005808:	0059      	lsls	r1, r3, #1
 800580a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800580e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005816:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8005818:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800581c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	f103 0109 	add.w	r1, r3, #9
 800582a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800582e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005836:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8005838:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 800583c:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8005840:	0092      	lsls	r2, r2, #2
 8005842:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8005844:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8005846:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800584a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800584e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8005852:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3301      	adds	r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8005860:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8005864:	2b03      	cmp	r3, #3
 8005866:	ddac      	ble.n	80057c2 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8005868:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800586c:	b2db      	uxtb	r3, r3
 800586e:	3301      	adds	r3, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005876:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800587a:	2b03      	cmp	r3, #3
 800587c:	dd9d      	ble.n	80057ba <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800587e:	f107 0308 	add.w	r3, r7, #8
 8005882:	3340      	adds	r3, #64	@ 0x40
 8005884:	22c0      	movs	r2, #192	@ 0xc0
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f001 fc1f 	bl	80070cc <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800588e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005892:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 800589c:	f107 0108 	add.w	r1, r7, #8
 80058a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fc46 	bl	8007136 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80058aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b8:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fb fa5f 	bl	8000d80 <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80058c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80058d0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80058d4:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80058d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80058e4:	2204      	movs	r2, #4
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fbef 	bl	80070cc <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 80058ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80058f6:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80058f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8005906:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800590a:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 800590e:	f7fb f9e5 	bl	8000cdc <VL53L5CX_WrMulti>
 8005912:	4603      	mov	r3, r0
 8005914:	461a      	mov	r2, r3
 8005916:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800591a:	4313      	orrs	r3, r2
 800591c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005924:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8005928:	2303      	movs	r3, #3
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	23ff      	movs	r3, #255	@ 0xff
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8005934:	2201      	movs	r2, #1
 8005936:	2104      	movs	r1, #4
 8005938:	6800      	ldr	r0, [r0, #0]
 800593a:	f7ff fc6c 	bl	8005216 <_vl53l5cx_poll_for_answer>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8005946:	4313      	orrs	r3, r2
 8005948:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800594c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8005950:	4618      	mov	r0, r3
 8005952:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	08008140 	.word	0x08008140
 8005960:	08008148 	.word	0x08008148
 8005964:	0001fca0 	.word	0x0001fca0

08005968 <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
    VL53L5CX_Configuration *p_dev,
    uint8_t *p_is_alive)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
    uint8_t status = VL53L5CX_STATUS_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
    uint8_t device_id = 0, revision_id = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	73bb      	strb	r3, [r7, #14]
 800597a:	2300      	movs	r3, #0
 800597c:	737b      	strb	r3, [r7, #13]

    // Write to register 0x7FFF to switch to page 0
    status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005986:	4618      	mov	r0, r3
 8005988:	f7fb f980 	bl	8000c8c <VL53L5CX_WrByte>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	4313      	orrs	r3, r2
 8005994:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L5CX_STATUS_OK) {
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <vl53l5cx_is_alive+0x3e>
        printf("Error writing to register 0x7FFF\r\n");
 800599c:	482d      	ldr	r0, [pc, #180]	@ (8005a54 <vl53l5cx_is_alive+0xec>)
 800599e:	f001 fb8d 	bl	80070bc <puts>
        return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	e052      	b.n	8005a4c <vl53l5cx_is_alive+0xe4>
    }

    // Read device ID
    status |= VL53L5CX_RdByte(&(p_dev->platform), 0, &device_id);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f107 020e 	add.w	r2, r7, #14
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb f938 	bl	8000c24 <VL53L5CX_RdByte>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L5CX_STATUS_OK) {
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <vl53l5cx_is_alive+0x66>
        printf("Error reading device ID\r\n");
 80059c4:	4824      	ldr	r0, [pc, #144]	@ (8005a58 <vl53l5cx_is_alive+0xf0>)
 80059c6:	f001 fb79 	bl	80070bc <puts>
        return status;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	e03e      	b.n	8005a4c <vl53l5cx_is_alive+0xe4>
    }

    // Read revision ID
    status |= VL53L5CX_RdByte(&(p_dev->platform), 1, &revision_id);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f107 020d 	add.w	r2, r7, #13
 80059d4:	2101      	movs	r1, #1
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fb f924 	bl	8000c24 <VL53L5CX_RdByte>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L5CX_STATUS_OK) {
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <vl53l5cx_is_alive+0x8e>
        printf("Error reading revision ID\r\n");
 80059ec:	481b      	ldr	r0, [pc, #108]	@ (8005a5c <vl53l5cx_is_alive+0xf4>)
 80059ee:	f001 fb65 	bl	80070bc <puts>
        return status;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	e02a      	b.n	8005a4c <vl53l5cx_is_alive+0xe4>
    }

    // Write to register 0x7FFF to switch back to default page
    status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fb f944 	bl	8000c8c <VL53L5CX_WrByte>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L5CX_STATUS_OK) {
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <vl53l5cx_is_alive+0xb6>
        printf("Error writing to register 0x7FFF (page 2)\r\n");
 8005a14:	4812      	ldr	r0, [pc, #72]	@ (8005a60 <vl53l5cx_is_alive+0xf8>)
 8005a16:	f001 fb51 	bl	80070bc <puts>
        return status;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	e016      	b.n	8005a4c <vl53l5cx_is_alive+0xe4>
    }

    // Check if device and revision IDs match expected values
    if ((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02)) {
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	2bf0      	cmp	r3, #240	@ 0xf0
 8005a22:	d106      	bne.n	8005a32 <vl53l5cx_is_alive+0xca>
 8005a24:	7b7b      	ldrb	r3, [r7, #13]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d103      	bne.n	8005a32 <vl53l5cx_is_alive+0xca>
        *p_is_alive = 1;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e002      	b.n	8005a38 <vl53l5cx_is_alive+0xd0>
    } else {
        *p_is_alive = 0;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
    }

    // Print debug information
    printf("Device ID: 0x%02X, Revision ID: 0x%02X, is_alive: %d\r\n", device_id, revision_id, *p_is_alive);
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	7b7b      	ldrb	r3, [r7, #13]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	4807      	ldr	r0, [pc, #28]	@ (8005a64 <vl53l5cx_is_alive+0xfc>)
 8005a46:	f001 fad1 	bl	8006fec <iprintf>

    return status;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	08008150 	.word	0x08008150
 8005a58:	08008174 	.word	0x08008174
 8005a5c:	08008190 	.word	0x08008190
 8005a60:	080081ac 	.word	0x080081ac
 8005a64:	080081d8 	.word	0x080081d8

08005a68 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af04      	add	r7, sp, #16
 8005a6e:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8005a74:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8005a78:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a80      	ldr	r2, [pc, #512]	@ (8005c84 <vl53l5cx_init+0x21c>)
 8005a82:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <vl53l5cx_init+0x220>)
 8005a88:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fb f8f6 	bl	8000c8c <VL53L5CX_WrByte>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2204      	movs	r2, #4
 8005aae:	2109      	movs	r1, #9
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fb f8eb 	bl	8000c8c <VL53L5CX_WrByte>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	@ 0x40
 8005ac4:	210f      	movs	r1, #15
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb f8e0 	bl	8000c8c <VL53L5CX_WrByte>
 8005acc:	4603      	mov	r3, r0
 8005ace:	461a      	mov	r2, r3
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	210a      	movs	r1, #10
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fb f8d5 	bl	8000c8c <VL53L5CX_WrByte>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f107 0216 	add.w	r2, r7, #22
 8005af2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fb f894 	bl	8000c24 <VL53L5CX_RdByte>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	210c      	movs	r1, #12
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fb f8bd 	bl	8000c8c <VL53L5CX_WrByte>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f240 1101 	movw	r1, #257	@ 0x101
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fb f8b1 	bl	8000c8c <VL53L5CX_WrByte>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fb f8a5 	bl	8000c8c <VL53L5CX_WrByte>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fb f899 	bl	8000c8c <VL53L5CX_WrByte>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f244 0102 	movw	r1, #16386	@ 0x4002
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fb f88d 	bl	8000c8c <VL53L5CX_WrByte>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f244 0102 	movw	r1, #16386	@ 0x4002
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fb f881 	bl	8000c8c <VL53L5CX_WrByte>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2203      	movs	r2, #3
 8005b98:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fb f875 	bl	8000c8c <VL53L5CX_WrByte>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f240 1103 	movw	r1, #259	@ 0x103
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fb f869 	bl	8000c8c <VL53L5CX_WrByte>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	210c      	movs	r1, #12
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fb f85e 	bl	8000c8c <VL53L5CX_WrByte>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2243      	movs	r2, #67	@ 0x43
 8005bde:	210f      	movs	r1, #15
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fb f853 	bl	8000c8c <VL53L5CX_WrByte>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fb f8f9 	bl	8000dec <VL53L5CX_WaitMs>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	210f      	movs	r1, #15
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb f83e 	bl	8000c8c <VL53L5CX_WrByte>
 8005c10:	4603      	mov	r3, r0
 8005c12:	461a      	mov	r2, r3
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	210a      	movs	r1, #10
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fb f833 	bl	8000c8c <VL53L5CX_WrByte>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2164      	movs	r1, #100	@ 0x64
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fb f8d9 	bl	8000dec <VL53L5CX_WaitMs>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fb f81d 	bl	8000c8c <VL53L5CX_WrByte>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	23ff      	movs	r3, #255	@ 0xff
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2306      	movs	r3, #6
 8005c66:	2200      	movs	r2, #0
 8005c68:	2101      	movs	r1, #1
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fad3 	bl	8005216 <_vl53l5cx_poll_for_answer>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 8354 	bne.w	800632a <vl53l5cx_init+0x8c2>
 8005c82:	e003      	b.n	8005c8c <vl53l5cx_init+0x224>
 8005c84:	0801d670 	.word	0x0801d670
 8005c88:	0801d2a4 	.word	0x0801d2a4
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	210e      	movs	r1, #14
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa fffa 	bl	8000c8c <VL53L5CX_WrByte>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fa ffee 	bl	8000c8c <VL53L5CX_WrByte>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	220d      	movs	r2, #13
 8005cbe:	2103      	movs	r1, #3
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fa ffe3 	bl	8000c8c <VL53L5CX_WrByte>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fa ffd7 	bl	8000c8c <VL53L5CX_WrByte>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8005ce8:	2310      	movs	r3, #16
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	2310      	movs	r3, #16
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2321      	movs	r3, #33	@ 0x21
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fa8d 	bl	8005216 <_vl53l5cx_poll_for_answer>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa ffbc 	bl	8000c8c <VL53L5CX_WrByte>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f107 0216 	add.w	r2, r7, #22
 8005d24:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fa ff7b 	bl	8000c24 <VL53L5CX_RdByte>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	210c      	movs	r1, #12
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fa ffa4 	bl	8000c8c <VL53L5CX_WrByte>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fa ff98 	bl	8000c8c <VL53L5CX_WrByte>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f240 1101 	movw	r1, #257	@ 0x101
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa ff8c 	bl	8000c8c <VL53L5CX_WrByte>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa ff80 	bl	8000c8c <VL53L5CX_WrByte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa ff74 	bl	8000c8c <VL53L5CX_WrByte>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f244 0102 	movw	r1, #16386	@ 0x4002
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fa ff68 	bl	8000c8c <VL53L5CX_WrByte>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f244 0102 	movw	r1, #16386	@ 0x4002
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fa ff5c 	bl	8000c8c <VL53L5CX_WrByte>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2203      	movs	r2, #3
 8005de2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa ff50 	bl	8000c8c <VL53L5CX_WrByte>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f240 1103 	movw	r1, #259	@ 0x103
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fa ff44 	bl	8000c8c <VL53L5CX_WrByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f244 010f 	movw	r1, #16399	@ 0x400f
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa ff38 	bl	8000c8c <VL53L5CX_WrByte>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2243      	movs	r2, #67	@ 0x43
 8005e2a:	f240 211a 	movw	r1, #538	@ 0x21a
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa ff2c 	bl	8000c8c <VL53L5CX_WrByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2203      	movs	r2, #3
 8005e42:	f240 211a 	movw	r1, #538	@ 0x21a
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fa ff20 	bl	8000c8c <VL53L5CX_WrByte>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f240 211a 	movw	r1, #538	@ 0x21a
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa ff14 	bl	8000c8c <VL53L5CX_WrByte>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f240 211a 	movw	r1, #538	@ 0x21a
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fa ff08 	bl	8000c8c <VL53L5CX_WrByte>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f240 2119 	movw	r1, #537	@ 0x219
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa fefc 	bl	8000c8c <VL53L5CX_WrByte>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f240 211b 	movw	r1, #539	@ 0x21b
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fef0 	bl	8000c8c <VL53L5CX_WrByte>
 8005eac:	4603      	mov	r3, r0
 8005eae:	461a      	mov	r2, r3
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa fee4 	bl	8000c8c <VL53L5CX_WrByte>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f107 0216 	add.w	r2, r7, #22
 8005ed4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fa fea3 	bl	8000c24 <VL53L5CX_RdByte>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	210c      	movs	r1, #12
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa fecc 	bl	8000c8c <VL53L5CX_WrByte>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fec0 	bl	8000c8c <VL53L5CX_WrByte>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2207      	movs	r2, #7
 8005f1a:	2120      	movs	r1, #32
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa feb5 	bl	8000c8c <VL53L5CX_WrByte>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2206      	movs	r2, #6
 8005f30:	2120      	movs	r1, #32
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fa feaa 	bl	8000c8c <VL53L5CX_WrByte>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2209      	movs	r2, #9
 8005f46:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fa fe9e 	bl	8000c8c <VL53L5CX_WrByte>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f60:	4ae1      	ldr	r2, [pc, #900]	@ (80062e8 <vl53l5cx_init+0x880>)
 8005f62:	2100      	movs	r1, #0
 8005f64:	f7fa feba 	bl	8000cdc <VL53L5CX_WrMulti>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	220a      	movs	r2, #10
 8005f76:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fa fe86 	bl	8000c8c <VL53L5CX_WrByte>
 8005f80:	4603      	mov	r3, r0
 8005f82:	461a      	mov	r2, r3
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f90:	4ad6      	ldr	r2, [pc, #856]	@ (80062ec <vl53l5cx_init+0x884>)
 8005f92:	2100      	movs	r1, #0
 8005f94:	f7fa fea2 	bl	8000cdc <VL53L5CX_WrMulti>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	220b      	movs	r2, #11
 8005fa6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa fe6e 	bl	8000c8c <VL53L5CX_WrByte>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8005fc0:	4acb      	ldr	r2, [pc, #812]	@ (80062f0 <vl53l5cx_init+0x888>)
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	f7fa fe8a 	bl	8000cdc <VL53L5CX_WrMulti>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fa fe56 	bl	8000c8c <VL53L5CX_WrByte>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fa fe4a 	bl	8000c8c <VL53L5CX_WrByte>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	220d      	movs	r2, #13
 8006006:	2103      	movs	r1, #3
 8006008:	4618      	mov	r0, r3
 800600a:	f7fa fe3f 	bl	8000c8c <VL53L5CX_WrByte>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	4313      	orrs	r3, r2
 8006016:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006020:	4618      	mov	r0, r3
 8006022:	f7fa fe33 	bl	8000c8c <VL53L5CX_WrByte>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	4313      	orrs	r3, r2
 800602e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8006030:	2310      	movs	r3, #16
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	2310      	movs	r3, #16
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2321      	movs	r3, #33	@ 0x21
 800603a:	2200      	movs	r2, #0
 800603c:	2101      	movs	r1, #1
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff f8e9 	bl	8005216 <_vl53l5cx_poll_for_answer>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	4313      	orrs	r3, r2
 800604c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 816c 	bne.w	800632e <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800605e:	4618      	mov	r0, r3
 8006060:	f7fa fe14 	bl	8000c8c <VL53L5CX_WrByte>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	4313      	orrs	r3, r2
 800606c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f107 0216 	add.w	r2, r7, #22
 8006074:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006078:	4618      	mov	r0, r3
 800607a:	f7fa fdd3 	bl	8000c24 <VL53L5CX_RdByte>
 800607e:	4603      	mov	r3, r0
 8006080:	461a      	mov	r2, r3
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	4313      	orrs	r3, r2
 8006086:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	210c      	movs	r1, #12
 800608e:	4618      	mov	r0, r3
 8006090:	f7fa fdfc 	bl	8000c8c <VL53L5CX_WrByte>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	4313      	orrs	r3, r2
 800609c:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fa fdf0 	bl	8000c8c <VL53L5CX_WrByte>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa fde4 	bl	8000c8c <VL53L5CX_WrByte>
 80060c4:	4603      	mov	r3, r0
 80060c6:	461a      	mov	r2, r3
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f240 1115 	movw	r1, #277	@ 0x115
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa fdd8 	bl	8000c8c <VL53L5CX_WrByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2242      	movs	r2, #66	@ 0x42
 80060ea:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fa fdcc 	bl	8000c8c <VL53L5CX_WrByte>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f240 1117 	movw	r1, #279	@ 0x117
 8006106:	4618      	mov	r0, r3
 8006108:	f7fa fdc0 	bl	8000c8c <VL53L5CX_WrByte>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	4313      	orrs	r3, r2
 8006114:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	210b      	movs	r1, #11
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa fdb5 	bl	8000c8c <VL53L5CX_WrByte>
 8006122:	4603      	mov	r3, r0
 8006124:	461a      	mov	r2, r3
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	4313      	orrs	r3, r2
 800612a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f107 0216 	add.w	r2, r7, #22
 8006132:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa fd74 	bl	8000c24 <VL53L5CX_RdByte>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	4313      	orrs	r3, r2
 8006144:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	210c      	movs	r1, #12
 800614c:	4618      	mov	r0, r3
 800614e:	f7fa fd9d 	bl	8000c8c <VL53L5CX_WrByte>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	4313      	orrs	r3, r2
 800615a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	210b      	movs	r1, #11
 8006162:	4618      	mov	r0, r3
 8006164:	f7fa fd92 	bl	8000c8c <VL53L5CX_WrByte>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	4313      	orrs	r3, r2
 8006170:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff f89f 	bl	80052b6 <_vl53l5cx_poll_for_mcu_boot>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	4313      	orrs	r3, r2
 8006180:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 80d4 	bne.w	8006332 <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006192:	4618      	mov	r0, r3
 8006194:	f7fa fd7a 	bl	8000c8c <VL53L5CX_WrByte>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	4313      	orrs	r3, r2
 80061a0:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	2328      	movs	r3, #40	@ 0x28
 80061a6:	4a53      	ldr	r2, [pc, #332]	@ (80062f4 <vl53l5cx_init+0x88c>)
 80061a8:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 80061ac:	f7fa fd96 	bl	8000cdc <VL53L5CX_WrMulti>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 80061ba:	2302      	movs	r3, #2
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	23ff      	movs	r3, #255	@ 0xff
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80061c6:	2200      	movs	r2, #0
 80061c8:	2104      	movs	r1, #4
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff f823 	bl	8005216 <_vl53l5cx_poll_for_answer>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 80061da:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 80061e2:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 80061e6:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80061ea:	f7fa fd97 	bl	8000d1c <VL53L5CX_RdMulti>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f103 0010 	add.w	r0, r3, #16
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006204:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006208:	4619      	mov	r1, r3
 800620a:	f000 ff94 	bl	8007136 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 800620e:	2110      	movs	r1, #16
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff f891 	bl	8005338 <_vl53l5cx_send_offset_data>
 8006216:	4603      	mov	r3, r0
 8006218:	461a      	mov	r2, r3
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	4313      	orrs	r3, r2
 800621e:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8006226:	4a34      	ldr	r2, [pc, #208]	@ (80062f8 <vl53l5cx_init+0x890>)
 8006228:	4618      	mov	r0, r3
 800622a:	4611      	mov	r1, r2
 800622c:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8006230:	461a      	mov	r2, r3
 8006232:	f000 ff80 	bl	8007136 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8006236:	2110      	movs	r1, #16
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fa49 	bl	80056d0 <_vl53l5cx_send_xtalk_data>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	4313      	orrs	r3, r2
 8006246:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8006252:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8006256:	f7fa fd41 	bl	8000cdc <VL53L5CX_WrMulti>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	4313      	orrs	r3, r2
 8006262:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006264:	2303      	movs	r3, #3
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	23ff      	movs	r3, #255	@ 0xff
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8006270:	2201      	movs	r2, #1
 8006272:	2104      	movs	r1, #4
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fe ffce 	bl	8005216 <_vl53l5cx_poll_for_answer>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	4313      	orrs	r3, r2
 8006282:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8006284:	f107 0110 	add.w	r1, r7, #16
 8006288:	2304      	movs	r3, #4
 800628a:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fd20 	bl	8006cd4 <vl53l5cx_dci_write_data>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	4313      	orrs	r3, r2
 800629c:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800629e:	f107 010c 	add.w	r1, r7, #12
 80062a2:	2304      	movs	r3, #4
 80062a4:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fd13 	bl	8006cd4 <vl53l5cx_dci_write_data>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 80062b8:	2301      	movs	r3, #1
 80062ba:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80062c2:	2326      	movs	r3, #38	@ 0x26
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	2301      	movs	r3, #1
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	f107 0316 	add.w	r3, r7, #22
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2328      	movs	r3, #40	@ 0x28
 80062d2:	f24e 1208 	movw	r2, #57608	@ 0xe108
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fd9a 	bl	8006e10 <vl53l5cx_dci_replace_data>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	e00a      	b.n	80062fc <vl53l5cx_init+0x894>
 80062e6:	bf00      	nop
 80062e8:	080082a4 	.word	0x080082a4
 80062ec:	080102a4 	.word	0x080102a4
 80062f0:	080182a4 	.word	0x080182a4
 80062f4:	0801d978 	.word	0x0801d978
 80062f8:	0801d670 	.word	0x0801d670
 80062fc:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8006304:	2325      	movs	r3, #37	@ 0x25
 8006306:	9302      	str	r3, [sp, #8]
 8006308:	2301      	movs	r3, #1
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	f107 0316 	add.w	r3, r7, #22
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	2328      	movs	r3, #40	@ 0x28
 8006314:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fd79 	bl	8006e10 <vl53l5cx_dci_replace_data>
 800631e:	4603      	mov	r3, r0
 8006320:	461a      	mov	r2, r3
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	4313      	orrs	r3, r2
 8006326:	75fb      	strb	r3, [r7, #23]
 8006328:	e004      	b.n	8006334 <vl53l5cx_init+0x8cc>
		goto exit;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <vl53l5cx_init+0x8cc>
		goto exit;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <vl53l5cx_init+0x8cc>
		goto exit;
 8006332:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006358:	4618      	mov	r0, r3
 800635a:	f7fa fc97 	bl	8000c8c <VL53L5CX_WrByte>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	4313      	orrs	r3, r2
 8006366:	73fb      	strb	r3, [r7, #15]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	b29b      	uxth	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	2104      	movs	r1, #4
 8006376:	f7fa fc89 	bl	8000c8c <VL53L5CX_WrByte>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	4313      	orrs	r3, r2
 8006382:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	801a      	strh	r2, [r3, #0]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006392:	4618      	mov	r0, r3
 8006394:	f7fa fc7a 	bl	8000c8c <VL53L5CX_WrByte>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	4313      	orrs	r3, r2
 80063a0:	73fb      	strb	r3, [r7, #15]

	return status;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 80063ac:	b5b0      	push	{r4, r5, r7, lr}
 80063ae:	b09c      	sub	sp, #112	@ 0x70
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 80063ba:	2300      	movs	r3, #0
 80063bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80063be:	2300      	movs	r3, #0
 80063c0:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80063c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 80063c8:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fbd0 	bl	8006b74 <vl53l5cx_get_resolution>
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80063dc:	4313      	orrs	r3, r2
 80063de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	22ff      	movs	r2, #255	@ 0xff
 80063ec:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 80063ee:	4baa      	ldr	r3, [pc, #680]	@ (8006698 <vl53l5cx_start_ranging+0x2ec>)
 80063f0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80063f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 80063fa:	4ba8      	ldr	r3, [pc, #672]	@ (800669c <vl53l5cx_start_ranging+0x2f0>)
 80063fc:	f107 040c 	add.w	r4, r7, #12
 8006400:	461d      	mov	r5, r3
 8006402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800640e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8006412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006414:	3308      	adds	r3, #8
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8006418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641a:	3310      	adds	r3, #16
 800641c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800641e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006420:	3320      	adds	r3, #32
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8006424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006426:	3340      	adds	r3, #64	@ 0x40
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 800642a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642c:	3380      	adds	r3, #128	@ 0x80
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8006430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006432:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8006438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8006440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8006448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8006450:	2300      	movs	r3, #0
 8006452:	663b      	str	r3, [r7, #96]	@ 0x60
 8006454:	e073      	b.n	800653e <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 8006456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	3368      	adds	r3, #104	@ 0x68
 800645c:	443b      	add	r3, r7
 800645e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d067      	beq.n	8006536 <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 8006466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	3368      	adds	r3, #104	@ 0x68
 800646e:	443b      	add	r3, r7
 8006470:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8006474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d057      	beq.n	8006536 <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8006486:	f107 020c 	add.w	r2, r7, #12
 800648a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8006492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d03a      	beq.n	8006516 <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80064a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d833      	bhi.n	8006516 <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80064ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064b0:	885b      	ldrh	r3, [r3, #2]
 80064b2:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d910      	bls.n	80064dc <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80064ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	f645 028f 	movw	r2, #22671	@ 0x588f
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d80a      	bhi.n	80064dc <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 80064c6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80064ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ce:	b299      	uxth	r1, r3
 80064d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064d2:	8813      	ldrh	r3, [r2, #0]
 80064d4:	f361 130f 	bfi	r3, r1, #4, #12
 80064d8:	8013      	strh	r3, [r2, #0]
 80064da:	e009      	b.n	80064f0 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80064dc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80064e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e4:	b299      	uxth	r1, r3
 80064e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064e8:	8813      	ldrh	r3, [r2, #0]
 80064ea:	f361 130f 	bfi	r3, r1, #4, #12
 80064ee:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	4611      	mov	r1, r2
 8006500:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006502:	8812      	ldrh	r2, [r2, #0]
 8006504:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006508:	b292      	uxth	r2, r2
 800650a:	fb01 f202 	mul.w	r2, r1, r2
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	e009      	b.n	800652a <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800651c:	8812      	ldrh	r2, [r2, #0]
 800651e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8006522:	b292      	uxth	r2, r2
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	e000      	b.n	8006538 <vl53l5cx_start_ranging+0x18c>
			continue;
 8006536:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8006538:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800653a:	3301      	adds	r3, #1
 800653c:	663b      	str	r3, [r7, #96]	@ 0x60
 800653e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006540:	2b0b      	cmp	r3, #11
 8006542:	d988      	bls.n	8006456 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f103 0218 	add.w	r2, r3, #24
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 8006550:	f107 010c 	add.w	r1, r7, #12
 8006554:	2330      	movs	r3, #48	@ 0x30
 8006556:	f64d 1280 	movw	r2, #55680	@ 0xd980
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fbba 	bl	8006cd4 <vl53l5cx_dci_write_data>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006568:	4313      	orrs	r3, r2
 800656a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 8006574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006576:	3301      	adds	r3, #1
 8006578:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 800657a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800657e:	2308      	movs	r3, #8
 8006580:	f64d 1268 	movw	r2, #55656	@ 0xd968
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fba5 	bl	8006cd4 <vl53l5cx_dci_write_data>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006592:	4313      	orrs	r3, r2
 8006594:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8006598:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800659c:	2310      	movs	r3, #16
 800659e:	f64d 1270 	movw	r2, #55664	@ 0xd970
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fb96 	bl	8006cd4 <vl53l5cx_dci_write_data>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fa fb64 	bl	8000c8c <VL53L5CX_WrByte>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2205      	movs	r2, #5
 80065d6:	2109      	movs	r1, #9
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fa fb57 	bl	8000c8c <VL53L5CX_WrByte>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fa fb49 	bl	8000c8c <VL53L5CX_WrByte>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006602:	4313      	orrs	r3, r2
 8006604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800660e:	2304      	movs	r3, #4
 8006610:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8006614:	f7fa fb62 	bl	8000cdc <VL53L5CX_WrMulti>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006620:	4313      	orrs	r3, r2
 8006622:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006626:	2303      	movs	r3, #3
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	23ff      	movs	r3, #255	@ 0xff
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8006632:	2201      	movs	r2, #1
 8006634:	2104      	movs	r1, #4
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fe fded 	bl	8005216 <_vl53l5cx_poll_for_answer>
 800663c:	4603      	mov	r3, r0
 800663e:	461a      	mov	r2, r3
 8006640:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006644:	4313      	orrs	r3, r2
 8006646:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 8006650:	230c      	movs	r3, #12
 8006652:	f245 4240 	movw	r2, #21568	@ 0x5440
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fab2 	bl	8006bc0 <vl53l5cx_dci_read_data>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006664:	4313      	orrs	r3, r2
 8006666:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8006678:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800667c:	461a      	mov	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d002      	beq.n	800668c <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8006686:	23ff      	movs	r3, #255	@ 0xff
 8006688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 800668c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006690:	4618      	mov	r0, r3
 8006692:	3768      	adds	r7, #104	@ 0x68
 8006694:	46bd      	mov	sp, r7
 8006696:	bdb0      	pop	{r4, r5, r7, pc}
 8006698:	08008210 	.word	0x08008210
 800669c:	08008220 	.word	0x08008220

080066a0 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80066b6:	2304      	movs	r3, #4
 80066b8:	2100      	movs	r1, #0
 80066ba:	f7fa fb2f 	bl	8000d1c <VL53L5CX_RdMulti>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	789b      	ldrb	r3, [r3, #2]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d020      	beq.n	8006718 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80066dc:	2bff      	cmp	r3, #255	@ 0xff
 80066de:	d01b      	beq.n	8006718 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d116      	bne.n	8006718 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 80066f0:	f003 0305 	and.w	r3, r3, #5
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	d10f      	bne.n	8006718 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	709a      	strb	r2, [r3, #2]
 8006716:	e00e      	b.n	8006736 <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 800671e:	b25b      	sxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	da05      	bge.n	8006730 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	4313      	orrs	r3, r2
 800672e:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 800674e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2100      	movs	r1, #0
 800675c:	f7fa fade 	bl	8000d1c <VL53L5CX_RdMulti>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	7ffb      	ldrb	r3, [r7, #31]
 8006766:	4313      	orrs	r3, r2
 8006768:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	709a      	strb	r2, [r3, #2]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b29b      	uxth	r3, r3
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fa fafc 	bl	8000d80 <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8006788:	2310      	movs	r3, #16
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e10e      	b.n	80069ac <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	4413      	add	r3, r2
 8006798:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d915      	bls.n	80067d4 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b0c      	cmp	r3, #12
 80067b4:	d80e      	bhi.n	80067d4 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	fb02 f303 	mul.w	r3, r2, r3
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	e005      	b.n	80067e0 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80067dc:	b29b      	uxth	r3, r3
 80067de:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	885b      	ldrh	r3, [r3, #2]
 80067e4:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80067e8:	4293      	cmp	r3, r2
 80067ea:	f000 80bb 	beq.w	8006964 <vl53l5cx_get_ranging_data+0x224>
 80067ee:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80067f2:	4293      	cmp	r3, r2
 80067f4:	f300 80d2 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 80067f8:	f24e 0244 	movw	r2, #57412	@ 0xe044
 80067fc:	4293      	cmp	r3, r2
 80067fe:	f000 80a3 	beq.w	8006948 <vl53l5cx_get_ranging_data+0x208>
 8006802:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8006806:	4293      	cmp	r3, r2
 8006808:	f300 80c8 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 800680c:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8006810:	4293      	cmp	r3, r2
 8006812:	f000 808b 	beq.w	800692c <vl53l5cx_get_ranging_data+0x1ec>
 8006816:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800681a:	4293      	cmp	r3, r2
 800681c:	f300 80be 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 8006820:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8006824:	4293      	cmp	r3, r2
 8006826:	d073      	beq.n	8006910 <vl53l5cx_get_ranging_data+0x1d0>
 8006828:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 800682c:	4293      	cmp	r3, r2
 800682e:	f300 80b5 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 8006832:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8006836:	4293      	cmp	r3, r2
 8006838:	d05c      	beq.n	80068f4 <vl53l5cx_get_ranging_data+0x1b4>
 800683a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800683e:	4293      	cmp	r3, r2
 8006840:	f300 80ac 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 8006844:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8006848:	4293      	cmp	r3, r2
 800684a:	d045      	beq.n	80068d8 <vl53l5cx_get_ranging_data+0x198>
 800684c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8006850:	4293      	cmp	r3, r2
 8006852:	f300 80a3 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 8006856:	f64d 0258 	movw	r2, #55384	@ 0xd858
 800685a:	4293      	cmp	r3, r2
 800685c:	f000 8090 	beq.w	8006980 <vl53l5cx_get_ranging_data+0x240>
 8006860:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8006864:	4293      	cmp	r3, r2
 8006866:	f300 8099 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 800686a:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 800686e:	4293      	cmp	r3, r2
 8006870:	d024      	beq.n	80068bc <vl53l5cx_get_ranging_data+0x17c>
 8006872:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8006876:	4293      	cmp	r3, r2
 8006878:	f300 8090 	bgt.w	800699c <vl53l5cx_get_ranging_data+0x25c>
 800687c:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <vl53l5cx_get_ranging_data+0x14e>
 8006884:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8006888:	4293      	cmp	r3, r2
 800688a:	d00a      	beq.n	80068a2 <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800688c:	e086      	b.n	800699c <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	330c      	adds	r3, #12
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800689a:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	701a      	strb	r2, [r3, #0]
				break;
 80068a0:	e07d      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	3304      	adds	r3, #4
 80068aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4619      	mov	r1, r3
 80068b6:	f000 fc3e 	bl	8007136 <memcpy>
				break;
 80068ba:	e070      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	3304      	adds	r3, #4
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4619      	mov	r1, r3
 80068d2:	f000 fc30 	bl	8007136 <memcpy>
				break;
 80068d6:	e062      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	3304      	adds	r3, #4
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f000 fc22 	bl	8007136 <memcpy>
				break;
 80068f2:	e054      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	3304      	adds	r3, #4
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4619      	mov	r1, r3
 800690a:	f000 fc14 	bl	8007136 <memcpy>
				break;
 800690e:	e046      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3304      	adds	r3, #4
 800691a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4619      	mov	r1, r3
 8006926:	f000 fc06 	bl	8007136 <memcpy>
				break;
 800692a:	e038      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	3304      	adds	r3, #4
 8006936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4619      	mov	r1, r3
 8006942:	f000 fbf8 	bl	8007136 <memcpy>
				break;
 8006946:	e02a      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	3304      	adds	r3, #4
 8006952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4619      	mov	r1, r3
 800695e:	f000 fbea 	bl	8007136 <memcpy>
				break;
 8006962:	e01c      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	3304      	adds	r3, #4
 800696e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4619      	mov	r1, r3
 800697a:	f000 fbdc 	bl	8007136 <memcpy>
				break;
 800697e:	e00e      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	3304      	adds	r3, #4
 800698a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4619      	mov	r1, r3
 8006996:	f000 fbce 	bl	8007136 <memcpy>
				break;
 800699a:	e000      	b.n	800699e <vl53l5cx_get_ranging_data+0x25e>
				break;
 800699c:	bf00      	nop
		}
		i += msize;
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	3304      	adds	r3, #4
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f4ff aeeb 	bcc.w	800678e <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e00d      	b.n	80069da <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	0ada      	lsrs	r2, r3, #11
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	3301      	adds	r3, #1
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80069de:	d9ee      	bls.n	80069be <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e056      	b.n	8006a94 <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da00      	bge.n	80069fc <vl53l5cx_get_ranging_data+0x2bc>
 80069fa:	3303      	adds	r3, #3
 80069fc:	109b      	asrs	r3, r3, #2
 80069fe:	b219      	sxth	r1, r3
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	460a      	mov	r2, r1
 8006a0e:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	da07      	bge.n	8006a34 <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	b2d9      	uxtb	r1, r3
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8006a4e:	460a      	mov	r2, r1
 8006a50:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	889b      	ldrh	r3, [r3, #4]
 8006a60:	09db      	lsrs	r3, r3, #7
 8006a62:	b299      	uxth	r1, r3
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	4413      	add	r3, r2
 8006a70:	460a      	mov	r2, r1
 8006a72:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	3390      	adds	r3, #144	@ 0x90
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	0ada      	lsrs	r2, r3, #11
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3390      	adds	r3, #144	@ 0x90
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a98:	d9a5      	bls.n	80069e6 <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e01b      	b.n	8006ad8 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d110      	bne.n	8006ad2 <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	e00a      	b.n	8006acc <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	4413      	add	r3, r2
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	4413      	add	r3, r2
 8006ac0:	22ff      	movs	r2, #255	@ 0xff
 8006ac2:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f1      	beq.n	8006ab6 <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b3f      	cmp	r3, #63	@ 0x3f
 8006adc:	d9e0      	bls.n	8006aa0 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e014      	b.n	8006b0e <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b70 <vl53l5cx_get_ranging_data+0x430>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	0bda      	lsrs	r2, r3, #15
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b1f      	cmp	r3, #31
 8006b12:	d9e7      	bls.n	8006ae4 <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8006b24:	461a      	mov	r2, r3
 8006b26:	89fb      	ldrh	r3, [r7, #14]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8006b30:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 8006b42:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	89bb      	ldrh	r3, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8006b54:	89fa      	ldrh	r2, [r7, #14]
 8006b56:	89bb      	ldrh	r3, [r7, #12]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d003      	beq.n	8006b64 <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8006b5c:	7ffb      	ldrb	r3, [r7, #31]
 8006b5e:	f043 0302 	orr.w	r3, r3, #2
 8006b62:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8006b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	80008001 	.word	0x80008001

08006b74 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8006b88:	2308      	movs	r3, #8
 8006b8a:	f245 4250 	movw	r2, #21584	@ 0x5450
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f816 	bl	8006bc0 <vl53l5cx_dci_read_data>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8006baa:	fb12 f303 	smulbb	r3, r2, r3
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	701a      	strb	r2, [r3, #0]

	return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08c      	sub	sp, #48	@ 0x30
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8006bd4:	887b      	ldrh	r3, [r7, #2]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8006bda:	4a3d      	ldr	r2, [pc, #244]	@ (8006cd0 <vl53l5cx_dci_read_data+0x110>)
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8006be6:	887b      	ldrh	r3, [r7, #2]
 8006be8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8006bec:	d903      	bls.n	8006bf6 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8006bee:	23ff      	movs	r3, #255	@ 0xff
 8006bf0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006bf4:	e065      	b.n	8006cc2 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8006c04:	887b      	ldrh	r3, [r7, #2]
 8006c06:	111b      	asrs	r3, r3, #4
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f107 0214 	add.w	r2, r7, #20
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8006c22:	f7fa f85b 	bl	8000cdc <VL53L5CX_WrMulti>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006c34:	2303      	movs	r3, #3
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	23ff      	movs	r3, #255	@ 0xff
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8006c40:	2201      	movs	r2, #1
 8006c42:	2104      	movs	r1, #4
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7fe fae6 	bl	8005216 <_vl53l5cx_poll_for_answer>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8006c58:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8006c66:	f7fa f859 	bl	8000d1c <VL53L5CX_RdMulti>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8006c7e:	887b      	ldrh	r3, [r7, #2]
 8006c80:	330c      	adds	r3, #12
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fa f87a 	bl	8000d80 <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c90:	e011      	b.n	8006cb6 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8006c92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006c96:	1d1a      	adds	r2, r3, #4
 8006c98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	440b      	add	r3, r1
 8006ca0:	68f9      	ldr	r1, [r7, #12]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 8006ca8:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006caa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	dbe7      	blt.n	8006c92 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8006cc2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3728      	adds	r7, #40	@ 0x28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	08008250 	.word	0x08008250

08006cd4 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08c      	sub	sp, #48	@ 0x30
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006cec:	2300      	movs	r3, #0
 8006cee:	753b      	strb	r3, [r7, #20]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	757b      	strb	r3, [r7, #21]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	75bb      	strb	r3, [r7, #22]
 8006cf8:	230f      	movs	r3, #15
 8006cfa:	75fb      	strb	r3, [r7, #23]
 8006cfc:	2305      	movs	r3, #5
 8006cfe:	763b      	strb	r3, [r7, #24]
 8006d00:	2301      	movs	r3, #1
 8006d02:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8006d04:	887b      	ldrh	r3, [r7, #2]
 8006d06:	3308      	adds	r3, #8
 8006d08:	121b      	asrs	r3, r3, #8
 8006d0a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006d0c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8006d0e:	887b      	ldrh	r3, [r7, #2]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	3308      	adds	r3, #8
 8006d14:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006d16:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8006d1e:	3334      	adds	r3, #52	@ 0x34
 8006d20:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8006d22:	887b      	ldrh	r3, [r7, #2]
 8006d24:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8006d28:	d903      	bls.n	8006d32 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8006d2a:	23ff      	movs	r3, #255	@ 0xff
 8006d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d30:	e068      	b.n	8006e04 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8006d40:	887b      	ldrh	r3, [r7, #2]
 8006d42:	111b      	asrs	r3, r3, #4
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006d48:	887b      	ldrh	r3, [r7, #2]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 8006d52:	887b      	ldrh	r3, [r7, #2]
 8006d54:	4619      	mov	r1, r3
 8006d56:	68b8      	ldr	r0, [r7, #8]
 8006d58:	f7fa f812 	bl	8000d80 <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006d5c:	887b      	ldrh	r3, [r7, #2]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d64:	e012      	b.n	8006d8c <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8006d66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	441a      	add	r2, r3
 8006d6e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8006d72:	3304      	adds	r3, #4
 8006d74:	7811      	ldrb	r1, [r2, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006d80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dae8      	bge.n	8006d66 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	3304      	adds	r3, #4
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	461a      	mov	r2, r3
 8006dac:	f107 0314 	add.w	r3, r7, #20
 8006db0:	cb03      	ldmia	r3!, {r0, r1}
 8006db2:	6010      	str	r0, [r2, #0]
 8006db4:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 8006db6:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8006dbe:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8006dc4:	f7f9 ff8a 	bl	8000cdc <VL53L5CX_WrMulti>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	23ff      	movs	r3, #255	@ 0xff
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8006de2:	2201      	movs	r2, #1
 8006de4:	2104      	movs	r1, #4
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7fe fa15 	bl	8005216 <_vl53l5cx_poll_for_answer>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 8006dfa:	887b      	ldrh	r3, [r7, #2]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	68b8      	ldr	r0, [r7, #8]
 8006e00:	f7f9 ffbe 	bl	8000d80 <VL53L5CX_SwapBuffer>
	}

	return status;
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3728      	adds	r7, #40	@ 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fec9 	bl	8006bc0 <vl53l5cx_dci_read_data>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461a      	mov	r2, r3
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8006e38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006e40:	6a39      	ldr	r1, [r7, #32]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f977 	bl	8007136 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8006e48:	887b      	ldrh	r3, [r7, #2]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff ff40 	bl	8006cd4 <vl53l5cx_dci_write_data>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	75fb      	strb	r3, [r7, #23]

	return status;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <std>:
 8006e68:	2300      	movs	r3, #0
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e76:	6083      	str	r3, [r0, #8]
 8006e78:	8181      	strh	r1, [r0, #12]
 8006e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e7c:	81c2      	strh	r2, [r0, #14]
 8006e7e:	6183      	str	r3, [r0, #24]
 8006e80:	4619      	mov	r1, r3
 8006e82:	2208      	movs	r2, #8
 8006e84:	305c      	adds	r0, #92	@ 0x5c
 8006e86:	f000 f921 	bl	80070cc <memset>
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <std+0x58>)
 8006e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <std+0x5c>)
 8006e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <std+0x60>)
 8006e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <std+0x64>)
 8006e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <std+0x68>)
 8006e9c:	6224      	str	r4, [r4, #32]
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	d006      	beq.n	8006eb0 <std+0x48>
 8006ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ea6:	4294      	cmp	r4, r2
 8006ea8:	d002      	beq.n	8006eb0 <std+0x48>
 8006eaa:	33d0      	adds	r3, #208	@ 0xd0
 8006eac:	429c      	cmp	r4, r3
 8006eae:	d105      	bne.n	8006ebc <std+0x54>
 8006eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f000 b93a 	b.w	8007130 <__retarget_lock_init_recursive>
 8006ebc:	bd10      	pop	{r4, pc}
 8006ebe:	bf00      	nop
 8006ec0:	080079a5 	.word	0x080079a5
 8006ec4:	080079c7 	.word	0x080079c7
 8006ec8:	080079ff 	.word	0x080079ff
 8006ecc:	08007a23 	.word	0x08007a23
 8006ed0:	2000316c 	.word	0x2000316c

08006ed4 <stdio_exit_handler>:
 8006ed4:	4a02      	ldr	r2, [pc, #8]	@ (8006ee0 <stdio_exit_handler+0xc>)
 8006ed6:	4903      	ldr	r1, [pc, #12]	@ (8006ee4 <stdio_exit_handler+0x10>)
 8006ed8:	4803      	ldr	r0, [pc, #12]	@ (8006ee8 <stdio_exit_handler+0x14>)
 8006eda:	f000 b869 	b.w	8006fb0 <_fwalk_sglue>
 8006ede:	bf00      	nop
 8006ee0:	20000010 	.word	0x20000010
 8006ee4:	0800793d 	.word	0x0800793d
 8006ee8:	20000020 	.word	0x20000020

08006eec <cleanup_stdio>:
 8006eec:	6841      	ldr	r1, [r0, #4]
 8006eee:	4b0c      	ldr	r3, [pc, #48]	@ (8006f20 <cleanup_stdio+0x34>)
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	d001      	beq.n	8006efc <cleanup_stdio+0x10>
 8006ef8:	f000 fd20 	bl	800793c <_fflush_r>
 8006efc:	68a1      	ldr	r1, [r4, #8]
 8006efe:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <cleanup_stdio+0x38>)
 8006f00:	4299      	cmp	r1, r3
 8006f02:	d002      	beq.n	8006f0a <cleanup_stdio+0x1e>
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fd19 	bl	800793c <_fflush_r>
 8006f0a:	68e1      	ldr	r1, [r4, #12]
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <cleanup_stdio+0x3c>)
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	d004      	beq.n	8006f1c <cleanup_stdio+0x30>
 8006f12:	4620      	mov	r0, r4
 8006f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f18:	f000 bd10 	b.w	800793c <_fflush_r>
 8006f1c:	bd10      	pop	{r4, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000316c 	.word	0x2000316c
 8006f24:	200031d4 	.word	0x200031d4
 8006f28:	2000323c 	.word	0x2000323c

08006f2c <global_stdio_init.part.0>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f5c <global_stdio_init.part.0+0x30>)
 8006f30:	4c0b      	ldr	r4, [pc, #44]	@ (8006f60 <global_stdio_init.part.0+0x34>)
 8006f32:	4a0c      	ldr	r2, [pc, #48]	@ (8006f64 <global_stdio_init.part.0+0x38>)
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	4620      	mov	r0, r4
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2104      	movs	r1, #4
 8006f3c:	f7ff ff94 	bl	8006e68 <std>
 8006f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f44:	2201      	movs	r2, #1
 8006f46:	2109      	movs	r1, #9
 8006f48:	f7ff ff8e 	bl	8006e68 <std>
 8006f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f50:	2202      	movs	r2, #2
 8006f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f56:	2112      	movs	r1, #18
 8006f58:	f7ff bf86 	b.w	8006e68 <std>
 8006f5c:	200032a4 	.word	0x200032a4
 8006f60:	2000316c 	.word	0x2000316c
 8006f64:	08006ed5 	.word	0x08006ed5

08006f68 <__sfp_lock_acquire>:
 8006f68:	4801      	ldr	r0, [pc, #4]	@ (8006f70 <__sfp_lock_acquire+0x8>)
 8006f6a:	f000 b8e2 	b.w	8007132 <__retarget_lock_acquire_recursive>
 8006f6e:	bf00      	nop
 8006f70:	200032a9 	.word	0x200032a9

08006f74 <__sfp_lock_release>:
 8006f74:	4801      	ldr	r0, [pc, #4]	@ (8006f7c <__sfp_lock_release+0x8>)
 8006f76:	f000 b8dd 	b.w	8007134 <__retarget_lock_release_recursive>
 8006f7a:	bf00      	nop
 8006f7c:	200032a9 	.word	0x200032a9

08006f80 <__sinit>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	4604      	mov	r4, r0
 8006f84:	f7ff fff0 	bl	8006f68 <__sfp_lock_acquire>
 8006f88:	6a23      	ldr	r3, [r4, #32]
 8006f8a:	b11b      	cbz	r3, 8006f94 <__sinit+0x14>
 8006f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f90:	f7ff bff0 	b.w	8006f74 <__sfp_lock_release>
 8006f94:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <__sinit+0x28>)
 8006f96:	6223      	str	r3, [r4, #32]
 8006f98:	4b04      	ldr	r3, [pc, #16]	@ (8006fac <__sinit+0x2c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f5      	bne.n	8006f8c <__sinit+0xc>
 8006fa0:	f7ff ffc4 	bl	8006f2c <global_stdio_init.part.0>
 8006fa4:	e7f2      	b.n	8006f8c <__sinit+0xc>
 8006fa6:	bf00      	nop
 8006fa8:	08006eed 	.word	0x08006eed
 8006fac:	200032a4 	.word	0x200032a4

08006fb0 <_fwalk_sglue>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	4688      	mov	r8, r1
 8006fb8:	4614      	mov	r4, r2
 8006fba:	2600      	movs	r6, #0
 8006fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fc4:	d505      	bpl.n	8006fd2 <_fwalk_sglue+0x22>
 8006fc6:	6824      	ldr	r4, [r4, #0]
 8006fc8:	2c00      	cmp	r4, #0
 8006fca:	d1f7      	bne.n	8006fbc <_fwalk_sglue+0xc>
 8006fcc:	4630      	mov	r0, r6
 8006fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d907      	bls.n	8006fe8 <_fwalk_sglue+0x38>
 8006fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	d003      	beq.n	8006fe8 <_fwalk_sglue+0x38>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	47c0      	blx	r8
 8006fe6:	4306      	orrs	r6, r0
 8006fe8:	3568      	adds	r5, #104	@ 0x68
 8006fea:	e7e9      	b.n	8006fc0 <_fwalk_sglue+0x10>

08006fec <iprintf>:
 8006fec:	b40f      	push	{r0, r1, r2, r3}
 8006fee:	b507      	push	{r0, r1, r2, lr}
 8006ff0:	4906      	ldr	r1, [pc, #24]	@ (800700c <iprintf+0x20>)
 8006ff2:	ab04      	add	r3, sp, #16
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffa:	6881      	ldr	r1, [r0, #8]
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	f000 f8d1 	bl	80071a4 <_vfiprintf_r>
 8007002:	b003      	add	sp, #12
 8007004:	f85d eb04 	ldr.w	lr, [sp], #4
 8007008:	b004      	add	sp, #16
 800700a:	4770      	bx	lr
 800700c:	2000001c 	.word	0x2000001c

08007010 <_puts_r>:
 8007010:	6a03      	ldr	r3, [r0, #32]
 8007012:	b570      	push	{r4, r5, r6, lr}
 8007014:	6884      	ldr	r4, [r0, #8]
 8007016:	4605      	mov	r5, r0
 8007018:	460e      	mov	r6, r1
 800701a:	b90b      	cbnz	r3, 8007020 <_puts_r+0x10>
 800701c:	f7ff ffb0 	bl	8006f80 <__sinit>
 8007020:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007022:	07db      	lsls	r3, r3, #31
 8007024:	d405      	bmi.n	8007032 <_puts_r+0x22>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	0598      	lsls	r0, r3, #22
 800702a:	d402      	bmi.n	8007032 <_puts_r+0x22>
 800702c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800702e:	f000 f880 	bl	8007132 <__retarget_lock_acquire_recursive>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	0719      	lsls	r1, r3, #28
 8007036:	d502      	bpl.n	800703e <_puts_r+0x2e>
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d135      	bne.n	80070aa <_puts_r+0x9a>
 800703e:	4621      	mov	r1, r4
 8007040:	4628      	mov	r0, r5
 8007042:	f000 fd31 	bl	8007aa8 <__swsetup_r>
 8007046:	b380      	cbz	r0, 80070aa <_puts_r+0x9a>
 8007048:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800704c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d405      	bmi.n	800705e <_puts_r+0x4e>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	059b      	lsls	r3, r3, #22
 8007056:	d402      	bmi.n	800705e <_puts_r+0x4e>
 8007058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800705a:	f000 f86b 	bl	8007134 <__retarget_lock_release_recursive>
 800705e:	4628      	mov	r0, r5
 8007060:	bd70      	pop	{r4, r5, r6, pc}
 8007062:	2b00      	cmp	r3, #0
 8007064:	da04      	bge.n	8007070 <_puts_r+0x60>
 8007066:	69a2      	ldr	r2, [r4, #24]
 8007068:	429a      	cmp	r2, r3
 800706a:	dc17      	bgt.n	800709c <_puts_r+0x8c>
 800706c:	290a      	cmp	r1, #10
 800706e:	d015      	beq.n	800709c <_puts_r+0x8c>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	7019      	strb	r1, [r3, #0]
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800707e:	3b01      	subs	r3, #1
 8007080:	60a3      	str	r3, [r4, #8]
 8007082:	2900      	cmp	r1, #0
 8007084:	d1ed      	bne.n	8007062 <_puts_r+0x52>
 8007086:	2b00      	cmp	r3, #0
 8007088:	da11      	bge.n	80070ae <_puts_r+0x9e>
 800708a:	4622      	mov	r2, r4
 800708c:	210a      	movs	r1, #10
 800708e:	4628      	mov	r0, r5
 8007090:	f000 fccb 	bl	8007a2a <__swbuf_r>
 8007094:	3001      	adds	r0, #1
 8007096:	d0d7      	beq.n	8007048 <_puts_r+0x38>
 8007098:	250a      	movs	r5, #10
 800709a:	e7d7      	b.n	800704c <_puts_r+0x3c>
 800709c:	4622      	mov	r2, r4
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fcc3 	bl	8007a2a <__swbuf_r>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d1e7      	bne.n	8007078 <_puts_r+0x68>
 80070a8:	e7ce      	b.n	8007048 <_puts_r+0x38>
 80070aa:	3e01      	subs	r6, #1
 80070ac:	e7e4      	b.n	8007078 <_puts_r+0x68>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	220a      	movs	r2, #10
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	e7ee      	b.n	8007098 <_puts_r+0x88>
	...

080070bc <puts>:
 80070bc:	4b02      	ldr	r3, [pc, #8]	@ (80070c8 <puts+0xc>)
 80070be:	4601      	mov	r1, r0
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f7ff bfa5 	b.w	8007010 <_puts_r>
 80070c6:	bf00      	nop
 80070c8:	2000001c 	.word	0x2000001c

080070cc <memset>:
 80070cc:	4402      	add	r2, r0
 80070ce:	4603      	mov	r3, r0
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	f803 1b01 	strb.w	r1, [r3], #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <__errno>:
 80070dc:	4b01      	ldr	r3, [pc, #4]	@ (80070e4 <__errno+0x8>)
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	2000001c 	.word	0x2000001c

080070e8 <__libc_init_array>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007120 <__libc_init_array+0x38>)
 80070ec:	4c0d      	ldr	r4, [pc, #52]	@ (8007124 <__libc_init_array+0x3c>)
 80070ee:	1b64      	subs	r4, r4, r5
 80070f0:	10a4      	asrs	r4, r4, #2
 80070f2:	2600      	movs	r6, #0
 80070f4:	42a6      	cmp	r6, r4
 80070f6:	d109      	bne.n	800710c <__libc_init_array+0x24>
 80070f8:	4d0b      	ldr	r5, [pc, #44]	@ (8007128 <__libc_init_array+0x40>)
 80070fa:	4c0c      	ldr	r4, [pc, #48]	@ (800712c <__libc_init_array+0x44>)
 80070fc:	f000 fe4e 	bl	8007d9c <_init>
 8007100:	1b64      	subs	r4, r4, r5
 8007102:	10a4      	asrs	r4, r4, #2
 8007104:	2600      	movs	r6, #0
 8007106:	42a6      	cmp	r6, r4
 8007108:	d105      	bne.n	8007116 <__libc_init_array+0x2e>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007110:	4798      	blx	r3
 8007112:	3601      	adds	r6, #1
 8007114:	e7ee      	b.n	80070f4 <__libc_init_array+0xc>
 8007116:	f855 3b04 	ldr.w	r3, [r5], #4
 800711a:	4798      	blx	r3
 800711c:	3601      	adds	r6, #1
 800711e:	e7f2      	b.n	8007106 <__libc_init_array+0x1e>
 8007120:	0801d9dc 	.word	0x0801d9dc
 8007124:	0801d9dc 	.word	0x0801d9dc
 8007128:	0801d9dc 	.word	0x0801d9dc
 800712c:	0801d9e0 	.word	0x0801d9e0

08007130 <__retarget_lock_init_recursive>:
 8007130:	4770      	bx	lr

08007132 <__retarget_lock_acquire_recursive>:
 8007132:	4770      	bx	lr

08007134 <__retarget_lock_release_recursive>:
 8007134:	4770      	bx	lr

08007136 <memcpy>:
 8007136:	440a      	add	r2, r1
 8007138:	4291      	cmp	r1, r2
 800713a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800713e:	d100      	bne.n	8007142 <memcpy+0xc>
 8007140:	4770      	bx	lr
 8007142:	b510      	push	{r4, lr}
 8007144:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800714c:	4291      	cmp	r1, r2
 800714e:	d1f9      	bne.n	8007144 <memcpy+0xe>
 8007150:	bd10      	pop	{r4, pc}

08007152 <__sfputc_r>:
 8007152:	6893      	ldr	r3, [r2, #8]
 8007154:	3b01      	subs	r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	b410      	push	{r4}
 800715a:	6093      	str	r3, [r2, #8]
 800715c:	da08      	bge.n	8007170 <__sfputc_r+0x1e>
 800715e:	6994      	ldr	r4, [r2, #24]
 8007160:	42a3      	cmp	r3, r4
 8007162:	db01      	blt.n	8007168 <__sfputc_r+0x16>
 8007164:	290a      	cmp	r1, #10
 8007166:	d103      	bne.n	8007170 <__sfputc_r+0x1e>
 8007168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800716c:	f000 bc5d 	b.w	8007a2a <__swbuf_r>
 8007170:	6813      	ldr	r3, [r2, #0]
 8007172:	1c58      	adds	r0, r3, #1
 8007174:	6010      	str	r0, [r2, #0]
 8007176:	7019      	strb	r1, [r3, #0]
 8007178:	4608      	mov	r0, r1
 800717a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800717e:	4770      	bx	lr

08007180 <__sfputs_r>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	4606      	mov	r6, r0
 8007184:	460f      	mov	r7, r1
 8007186:	4614      	mov	r4, r2
 8007188:	18d5      	adds	r5, r2, r3
 800718a:	42ac      	cmp	r4, r5
 800718c:	d101      	bne.n	8007192 <__sfputs_r+0x12>
 800718e:	2000      	movs	r0, #0
 8007190:	e007      	b.n	80071a2 <__sfputs_r+0x22>
 8007192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007196:	463a      	mov	r2, r7
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffda 	bl	8007152 <__sfputc_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d1f3      	bne.n	800718a <__sfputs_r+0xa>
 80071a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071a4 <_vfiprintf_r>:
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	460d      	mov	r5, r1
 80071aa:	b09d      	sub	sp, #116	@ 0x74
 80071ac:	4614      	mov	r4, r2
 80071ae:	4698      	mov	r8, r3
 80071b0:	4606      	mov	r6, r0
 80071b2:	b118      	cbz	r0, 80071bc <_vfiprintf_r+0x18>
 80071b4:	6a03      	ldr	r3, [r0, #32]
 80071b6:	b90b      	cbnz	r3, 80071bc <_vfiprintf_r+0x18>
 80071b8:	f7ff fee2 	bl	8006f80 <__sinit>
 80071bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071be:	07d9      	lsls	r1, r3, #31
 80071c0:	d405      	bmi.n	80071ce <_vfiprintf_r+0x2a>
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	059a      	lsls	r2, r3, #22
 80071c6:	d402      	bmi.n	80071ce <_vfiprintf_r+0x2a>
 80071c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ca:	f7ff ffb2 	bl	8007132 <__retarget_lock_acquire_recursive>
 80071ce:	89ab      	ldrh	r3, [r5, #12]
 80071d0:	071b      	lsls	r3, r3, #28
 80071d2:	d501      	bpl.n	80071d8 <_vfiprintf_r+0x34>
 80071d4:	692b      	ldr	r3, [r5, #16]
 80071d6:	b99b      	cbnz	r3, 8007200 <_vfiprintf_r+0x5c>
 80071d8:	4629      	mov	r1, r5
 80071da:	4630      	mov	r0, r6
 80071dc:	f000 fc64 	bl	8007aa8 <__swsetup_r>
 80071e0:	b170      	cbz	r0, 8007200 <_vfiprintf_r+0x5c>
 80071e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071e4:	07dc      	lsls	r4, r3, #31
 80071e6:	d504      	bpl.n	80071f2 <_vfiprintf_r+0x4e>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ec:	b01d      	add	sp, #116	@ 0x74
 80071ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f2:	89ab      	ldrh	r3, [r5, #12]
 80071f4:	0598      	lsls	r0, r3, #22
 80071f6:	d4f7      	bmi.n	80071e8 <_vfiprintf_r+0x44>
 80071f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071fa:	f7ff ff9b 	bl	8007134 <__retarget_lock_release_recursive>
 80071fe:	e7f3      	b.n	80071e8 <_vfiprintf_r+0x44>
 8007200:	2300      	movs	r3, #0
 8007202:	9309      	str	r3, [sp, #36]	@ 0x24
 8007204:	2320      	movs	r3, #32
 8007206:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800720a:	f8cd 800c 	str.w	r8, [sp, #12]
 800720e:	2330      	movs	r3, #48	@ 0x30
 8007210:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073c0 <_vfiprintf_r+0x21c>
 8007214:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007218:	f04f 0901 	mov.w	r9, #1
 800721c:	4623      	mov	r3, r4
 800721e:	469a      	mov	sl, r3
 8007220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007224:	b10a      	cbz	r2, 800722a <_vfiprintf_r+0x86>
 8007226:	2a25      	cmp	r2, #37	@ 0x25
 8007228:	d1f9      	bne.n	800721e <_vfiprintf_r+0x7a>
 800722a:	ebba 0b04 	subs.w	fp, sl, r4
 800722e:	d00b      	beq.n	8007248 <_vfiprintf_r+0xa4>
 8007230:	465b      	mov	r3, fp
 8007232:	4622      	mov	r2, r4
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ffa2 	bl	8007180 <__sfputs_r>
 800723c:	3001      	adds	r0, #1
 800723e:	f000 80a7 	beq.w	8007390 <_vfiprintf_r+0x1ec>
 8007242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007244:	445a      	add	r2, fp
 8007246:	9209      	str	r2, [sp, #36]	@ 0x24
 8007248:	f89a 3000 	ldrb.w	r3, [sl]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 809f 	beq.w	8007390 <_vfiprintf_r+0x1ec>
 8007252:	2300      	movs	r3, #0
 8007254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800725c:	f10a 0a01 	add.w	sl, sl, #1
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	9307      	str	r3, [sp, #28]
 8007264:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007268:	931a      	str	r3, [sp, #104]	@ 0x68
 800726a:	4654      	mov	r4, sl
 800726c:	2205      	movs	r2, #5
 800726e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007272:	4853      	ldr	r0, [pc, #332]	@ (80073c0 <_vfiprintf_r+0x21c>)
 8007274:	f7f8 ffac 	bl	80001d0 <memchr>
 8007278:	9a04      	ldr	r2, [sp, #16]
 800727a:	b9d8      	cbnz	r0, 80072b4 <_vfiprintf_r+0x110>
 800727c:	06d1      	lsls	r1, r2, #27
 800727e:	bf44      	itt	mi
 8007280:	2320      	movmi	r3, #32
 8007282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007286:	0713      	lsls	r3, r2, #28
 8007288:	bf44      	itt	mi
 800728a:	232b      	movmi	r3, #43	@ 0x2b
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007290:	f89a 3000 	ldrb.w	r3, [sl]
 8007294:	2b2a      	cmp	r3, #42	@ 0x2a
 8007296:	d015      	beq.n	80072c4 <_vfiprintf_r+0x120>
 8007298:	9a07      	ldr	r2, [sp, #28]
 800729a:	4654      	mov	r4, sl
 800729c:	2000      	movs	r0, #0
 800729e:	f04f 0c0a 	mov.w	ip, #10
 80072a2:	4621      	mov	r1, r4
 80072a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a8:	3b30      	subs	r3, #48	@ 0x30
 80072aa:	2b09      	cmp	r3, #9
 80072ac:	d94b      	bls.n	8007346 <_vfiprintf_r+0x1a2>
 80072ae:	b1b0      	cbz	r0, 80072de <_vfiprintf_r+0x13a>
 80072b0:	9207      	str	r2, [sp, #28]
 80072b2:	e014      	b.n	80072de <_vfiprintf_r+0x13a>
 80072b4:	eba0 0308 	sub.w	r3, r0, r8
 80072b8:	fa09 f303 	lsl.w	r3, r9, r3
 80072bc:	4313      	orrs	r3, r2
 80072be:	9304      	str	r3, [sp, #16]
 80072c0:	46a2      	mov	sl, r4
 80072c2:	e7d2      	b.n	800726a <_vfiprintf_r+0xc6>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	1d19      	adds	r1, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	9103      	str	r1, [sp, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bfbb      	ittet	lt
 80072d0:	425b      	neglt	r3, r3
 80072d2:	f042 0202 	orrlt.w	r2, r2, #2
 80072d6:	9307      	strge	r3, [sp, #28]
 80072d8:	9307      	strlt	r3, [sp, #28]
 80072da:	bfb8      	it	lt
 80072dc:	9204      	strlt	r2, [sp, #16]
 80072de:	7823      	ldrb	r3, [r4, #0]
 80072e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072e2:	d10a      	bne.n	80072fa <_vfiprintf_r+0x156>
 80072e4:	7863      	ldrb	r3, [r4, #1]
 80072e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e8:	d132      	bne.n	8007350 <_vfiprintf_r+0x1ac>
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	1d1a      	adds	r2, r3, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	9203      	str	r2, [sp, #12]
 80072f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072f6:	3402      	adds	r4, #2
 80072f8:	9305      	str	r3, [sp, #20]
 80072fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073d0 <_vfiprintf_r+0x22c>
 80072fe:	7821      	ldrb	r1, [r4, #0]
 8007300:	2203      	movs	r2, #3
 8007302:	4650      	mov	r0, sl
 8007304:	f7f8 ff64 	bl	80001d0 <memchr>
 8007308:	b138      	cbz	r0, 800731a <_vfiprintf_r+0x176>
 800730a:	9b04      	ldr	r3, [sp, #16]
 800730c:	eba0 000a 	sub.w	r0, r0, sl
 8007310:	2240      	movs	r2, #64	@ 0x40
 8007312:	4082      	lsls	r2, r0
 8007314:	4313      	orrs	r3, r2
 8007316:	3401      	adds	r4, #1
 8007318:	9304      	str	r3, [sp, #16]
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4829      	ldr	r0, [pc, #164]	@ (80073c4 <_vfiprintf_r+0x220>)
 8007320:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007324:	2206      	movs	r2, #6
 8007326:	f7f8 ff53 	bl	80001d0 <memchr>
 800732a:	2800      	cmp	r0, #0
 800732c:	d03f      	beq.n	80073ae <_vfiprintf_r+0x20a>
 800732e:	4b26      	ldr	r3, [pc, #152]	@ (80073c8 <_vfiprintf_r+0x224>)
 8007330:	bb1b      	cbnz	r3, 800737a <_vfiprintf_r+0x1d6>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	3307      	adds	r3, #7
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	3308      	adds	r3, #8
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007340:	443b      	add	r3, r7
 8007342:	9309      	str	r3, [sp, #36]	@ 0x24
 8007344:	e76a      	b.n	800721c <_vfiprintf_r+0x78>
 8007346:	fb0c 3202 	mla	r2, ip, r2, r3
 800734a:	460c      	mov	r4, r1
 800734c:	2001      	movs	r0, #1
 800734e:	e7a8      	b.n	80072a2 <_vfiprintf_r+0xfe>
 8007350:	2300      	movs	r3, #0
 8007352:	3401      	adds	r4, #1
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	4619      	mov	r1, r3
 8007358:	f04f 0c0a 	mov.w	ip, #10
 800735c:	4620      	mov	r0, r4
 800735e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007362:	3a30      	subs	r2, #48	@ 0x30
 8007364:	2a09      	cmp	r2, #9
 8007366:	d903      	bls.n	8007370 <_vfiprintf_r+0x1cc>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0c6      	beq.n	80072fa <_vfiprintf_r+0x156>
 800736c:	9105      	str	r1, [sp, #20]
 800736e:	e7c4      	b.n	80072fa <_vfiprintf_r+0x156>
 8007370:	fb0c 2101 	mla	r1, ip, r1, r2
 8007374:	4604      	mov	r4, r0
 8007376:	2301      	movs	r3, #1
 8007378:	e7f0      	b.n	800735c <_vfiprintf_r+0x1b8>
 800737a:	ab03      	add	r3, sp, #12
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	462a      	mov	r2, r5
 8007380:	4b12      	ldr	r3, [pc, #72]	@ (80073cc <_vfiprintf_r+0x228>)
 8007382:	a904      	add	r1, sp, #16
 8007384:	4630      	mov	r0, r6
 8007386:	f3af 8000 	nop.w
 800738a:	4607      	mov	r7, r0
 800738c:	1c78      	adds	r0, r7, #1
 800738e:	d1d6      	bne.n	800733e <_vfiprintf_r+0x19a>
 8007390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007392:	07d9      	lsls	r1, r3, #31
 8007394:	d405      	bmi.n	80073a2 <_vfiprintf_r+0x1fe>
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	059a      	lsls	r2, r3, #22
 800739a:	d402      	bmi.n	80073a2 <_vfiprintf_r+0x1fe>
 800739c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800739e:	f7ff fec9 	bl	8007134 <__retarget_lock_release_recursive>
 80073a2:	89ab      	ldrh	r3, [r5, #12]
 80073a4:	065b      	lsls	r3, r3, #25
 80073a6:	f53f af1f 	bmi.w	80071e8 <_vfiprintf_r+0x44>
 80073aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073ac:	e71e      	b.n	80071ec <_vfiprintf_r+0x48>
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	462a      	mov	r2, r5
 80073b4:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <_vfiprintf_r+0x228>)
 80073b6:	a904      	add	r1, sp, #16
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 f91b 	bl	80075f4 <_printf_i>
 80073be:	e7e4      	b.n	800738a <_vfiprintf_r+0x1e6>
 80073c0:	0801d9a0 	.word	0x0801d9a0
 80073c4:	0801d9aa 	.word	0x0801d9aa
 80073c8:	00000000 	.word	0x00000000
 80073cc:	08007181 	.word	0x08007181
 80073d0:	0801d9a6 	.word	0x0801d9a6

080073d4 <sbrk_aligned>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007414 <sbrk_aligned+0x40>)
 80073d8:	460c      	mov	r4, r1
 80073da:	6831      	ldr	r1, [r6, #0]
 80073dc:	4605      	mov	r5, r0
 80073de:	b911      	cbnz	r1, 80073e6 <sbrk_aligned+0x12>
 80073e0:	f000 fc70 	bl	8007cc4 <_sbrk_r>
 80073e4:	6030      	str	r0, [r6, #0]
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 fc6b 	bl	8007cc4 <_sbrk_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d103      	bne.n	80073fa <sbrk_aligned+0x26>
 80073f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80073f6:	4620      	mov	r0, r4
 80073f8:	bd70      	pop	{r4, r5, r6, pc}
 80073fa:	1cc4      	adds	r4, r0, #3
 80073fc:	f024 0403 	bic.w	r4, r4, #3
 8007400:	42a0      	cmp	r0, r4
 8007402:	d0f8      	beq.n	80073f6 <sbrk_aligned+0x22>
 8007404:	1a21      	subs	r1, r4, r0
 8007406:	4628      	mov	r0, r5
 8007408:	f000 fc5c 	bl	8007cc4 <_sbrk_r>
 800740c:	3001      	adds	r0, #1
 800740e:	d1f2      	bne.n	80073f6 <sbrk_aligned+0x22>
 8007410:	e7ef      	b.n	80073f2 <sbrk_aligned+0x1e>
 8007412:	bf00      	nop
 8007414:	200032ac 	.word	0x200032ac

08007418 <_malloc_r>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	1ccd      	adds	r5, r1, #3
 800741e:	f025 0503 	bic.w	r5, r5, #3
 8007422:	3508      	adds	r5, #8
 8007424:	2d0c      	cmp	r5, #12
 8007426:	bf38      	it	cc
 8007428:	250c      	movcc	r5, #12
 800742a:	2d00      	cmp	r5, #0
 800742c:	4606      	mov	r6, r0
 800742e:	db01      	blt.n	8007434 <_malloc_r+0x1c>
 8007430:	42a9      	cmp	r1, r5
 8007432:	d904      	bls.n	800743e <_malloc_r+0x26>
 8007434:	230c      	movs	r3, #12
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	2000      	movs	r0, #0
 800743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007514 <_malloc_r+0xfc>
 8007442:	f000 faa3 	bl	800798c <__malloc_lock>
 8007446:	f8d8 3000 	ldr.w	r3, [r8]
 800744a:	461c      	mov	r4, r3
 800744c:	bb44      	cbnz	r4, 80074a0 <_malloc_r+0x88>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff ffbf 	bl	80073d4 <sbrk_aligned>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	4604      	mov	r4, r0
 800745a:	d158      	bne.n	800750e <_malloc_r+0xf6>
 800745c:	f8d8 4000 	ldr.w	r4, [r8]
 8007460:	4627      	mov	r7, r4
 8007462:	2f00      	cmp	r7, #0
 8007464:	d143      	bne.n	80074ee <_malloc_r+0xd6>
 8007466:	2c00      	cmp	r4, #0
 8007468:	d04b      	beq.n	8007502 <_malloc_r+0xea>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	4639      	mov	r1, r7
 800746e:	4630      	mov	r0, r6
 8007470:	eb04 0903 	add.w	r9, r4, r3
 8007474:	f000 fc26 	bl	8007cc4 <_sbrk_r>
 8007478:	4581      	cmp	r9, r0
 800747a:	d142      	bne.n	8007502 <_malloc_r+0xea>
 800747c:	6821      	ldr	r1, [r4, #0]
 800747e:	1a6d      	subs	r5, r5, r1
 8007480:	4629      	mov	r1, r5
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ffa6 	bl	80073d4 <sbrk_aligned>
 8007488:	3001      	adds	r0, #1
 800748a:	d03a      	beq.n	8007502 <_malloc_r+0xea>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	442b      	add	r3, r5
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	f8d8 3000 	ldr.w	r3, [r8]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	bb62      	cbnz	r2, 80074f4 <_malloc_r+0xdc>
 800749a:	f8c8 7000 	str.w	r7, [r8]
 800749e:	e00f      	b.n	80074c0 <_malloc_r+0xa8>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	1b52      	subs	r2, r2, r5
 80074a4:	d420      	bmi.n	80074e8 <_malloc_r+0xd0>
 80074a6:	2a0b      	cmp	r2, #11
 80074a8:	d917      	bls.n	80074da <_malloc_r+0xc2>
 80074aa:	1961      	adds	r1, r4, r5
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	6025      	str	r5, [r4, #0]
 80074b0:	bf18      	it	ne
 80074b2:	6059      	strne	r1, [r3, #4]
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	bf08      	it	eq
 80074b8:	f8c8 1000 	streq.w	r1, [r8]
 80074bc:	5162      	str	r2, [r4, r5]
 80074be:	604b      	str	r3, [r1, #4]
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 fa69 	bl	8007998 <__malloc_unlock>
 80074c6:	f104 000b 	add.w	r0, r4, #11
 80074ca:	1d23      	adds	r3, r4, #4
 80074cc:	f020 0007 	bic.w	r0, r0, #7
 80074d0:	1ac2      	subs	r2, r0, r3
 80074d2:	bf1c      	itt	ne
 80074d4:	1a1b      	subne	r3, r3, r0
 80074d6:	50a3      	strne	r3, [r4, r2]
 80074d8:	e7af      	b.n	800743a <_malloc_r+0x22>
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	42a3      	cmp	r3, r4
 80074de:	bf0c      	ite	eq
 80074e0:	f8c8 2000 	streq.w	r2, [r8]
 80074e4:	605a      	strne	r2, [r3, #4]
 80074e6:	e7eb      	b.n	80074c0 <_malloc_r+0xa8>
 80074e8:	4623      	mov	r3, r4
 80074ea:	6864      	ldr	r4, [r4, #4]
 80074ec:	e7ae      	b.n	800744c <_malloc_r+0x34>
 80074ee:	463c      	mov	r4, r7
 80074f0:	687f      	ldr	r7, [r7, #4]
 80074f2:	e7b6      	b.n	8007462 <_malloc_r+0x4a>
 80074f4:	461a      	mov	r2, r3
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d1fb      	bne.n	80074f4 <_malloc_r+0xdc>
 80074fc:	2300      	movs	r3, #0
 80074fe:	6053      	str	r3, [r2, #4]
 8007500:	e7de      	b.n	80074c0 <_malloc_r+0xa8>
 8007502:	230c      	movs	r3, #12
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	4630      	mov	r0, r6
 8007508:	f000 fa46 	bl	8007998 <__malloc_unlock>
 800750c:	e794      	b.n	8007438 <_malloc_r+0x20>
 800750e:	6005      	str	r5, [r0, #0]
 8007510:	e7d6      	b.n	80074c0 <_malloc_r+0xa8>
 8007512:	bf00      	nop
 8007514:	200032b0 	.word	0x200032b0

08007518 <_printf_common>:
 8007518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	4616      	mov	r6, r2
 800751e:	4698      	mov	r8, r3
 8007520:	688a      	ldr	r2, [r1, #8]
 8007522:	690b      	ldr	r3, [r1, #16]
 8007524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007528:	4293      	cmp	r3, r2
 800752a:	bfb8      	it	lt
 800752c:	4613      	movlt	r3, r2
 800752e:	6033      	str	r3, [r6, #0]
 8007530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007534:	4607      	mov	r7, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b10a      	cbz	r2, 800753e <_printf_common+0x26>
 800753a:	3301      	adds	r3, #1
 800753c:	6033      	str	r3, [r6, #0]
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	0699      	lsls	r1, r3, #26
 8007542:	bf42      	ittt	mi
 8007544:	6833      	ldrmi	r3, [r6, #0]
 8007546:	3302      	addmi	r3, #2
 8007548:	6033      	strmi	r3, [r6, #0]
 800754a:	6825      	ldr	r5, [r4, #0]
 800754c:	f015 0506 	ands.w	r5, r5, #6
 8007550:	d106      	bne.n	8007560 <_printf_common+0x48>
 8007552:	f104 0a19 	add.w	sl, r4, #25
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	6832      	ldr	r2, [r6, #0]
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	42ab      	cmp	r3, r5
 800755e:	dc26      	bgt.n	80075ae <_printf_common+0x96>
 8007560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	3b00      	subs	r3, #0
 8007568:	bf18      	it	ne
 800756a:	2301      	movne	r3, #1
 800756c:	0692      	lsls	r2, r2, #26
 800756e:	d42b      	bmi.n	80075c8 <_printf_common+0xb0>
 8007570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007574:	4641      	mov	r1, r8
 8007576:	4638      	mov	r0, r7
 8007578:	47c8      	blx	r9
 800757a:	3001      	adds	r0, #1
 800757c:	d01e      	beq.n	80075bc <_printf_common+0xa4>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	6922      	ldr	r2, [r4, #16]
 8007582:	f003 0306 	and.w	r3, r3, #6
 8007586:	2b04      	cmp	r3, #4
 8007588:	bf02      	ittt	eq
 800758a:	68e5      	ldreq	r5, [r4, #12]
 800758c:	6833      	ldreq	r3, [r6, #0]
 800758e:	1aed      	subeq	r5, r5, r3
 8007590:	68a3      	ldr	r3, [r4, #8]
 8007592:	bf0c      	ite	eq
 8007594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007598:	2500      	movne	r5, #0
 800759a:	4293      	cmp	r3, r2
 800759c:	bfc4      	itt	gt
 800759e:	1a9b      	subgt	r3, r3, r2
 80075a0:	18ed      	addgt	r5, r5, r3
 80075a2:	2600      	movs	r6, #0
 80075a4:	341a      	adds	r4, #26
 80075a6:	42b5      	cmp	r5, r6
 80075a8:	d11a      	bne.n	80075e0 <_printf_common+0xc8>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e008      	b.n	80075c0 <_printf_common+0xa8>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4652      	mov	r2, sl
 80075b2:	4641      	mov	r1, r8
 80075b4:	4638      	mov	r0, r7
 80075b6:	47c8      	blx	r9
 80075b8:	3001      	adds	r0, #1
 80075ba:	d103      	bne.n	80075c4 <_printf_common+0xac>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c4:	3501      	adds	r5, #1
 80075c6:	e7c6      	b.n	8007556 <_printf_common+0x3e>
 80075c8:	18e1      	adds	r1, r4, r3
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	2030      	movs	r0, #48	@ 0x30
 80075ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075d2:	4422      	add	r2, r4
 80075d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075dc:	3302      	adds	r3, #2
 80075de:	e7c7      	b.n	8007570 <_printf_common+0x58>
 80075e0:	2301      	movs	r3, #1
 80075e2:	4622      	mov	r2, r4
 80075e4:	4641      	mov	r1, r8
 80075e6:	4638      	mov	r0, r7
 80075e8:	47c8      	blx	r9
 80075ea:	3001      	adds	r0, #1
 80075ec:	d0e6      	beq.n	80075bc <_printf_common+0xa4>
 80075ee:	3601      	adds	r6, #1
 80075f0:	e7d9      	b.n	80075a6 <_printf_common+0x8e>
	...

080075f4 <_printf_i>:
 80075f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	7e0f      	ldrb	r7, [r1, #24]
 80075fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075fc:	2f78      	cmp	r7, #120	@ 0x78
 80075fe:	4691      	mov	r9, r2
 8007600:	4680      	mov	r8, r0
 8007602:	460c      	mov	r4, r1
 8007604:	469a      	mov	sl, r3
 8007606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800760a:	d807      	bhi.n	800761c <_printf_i+0x28>
 800760c:	2f62      	cmp	r7, #98	@ 0x62
 800760e:	d80a      	bhi.n	8007626 <_printf_i+0x32>
 8007610:	2f00      	cmp	r7, #0
 8007612:	f000 80d2 	beq.w	80077ba <_printf_i+0x1c6>
 8007616:	2f58      	cmp	r7, #88	@ 0x58
 8007618:	f000 80b9 	beq.w	800778e <_printf_i+0x19a>
 800761c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007624:	e03a      	b.n	800769c <_printf_i+0xa8>
 8007626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800762a:	2b15      	cmp	r3, #21
 800762c:	d8f6      	bhi.n	800761c <_printf_i+0x28>
 800762e:	a101      	add	r1, pc, #4	@ (adr r1, 8007634 <_printf_i+0x40>)
 8007630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007634:	0800768d 	.word	0x0800768d
 8007638:	080076a1 	.word	0x080076a1
 800763c:	0800761d 	.word	0x0800761d
 8007640:	0800761d 	.word	0x0800761d
 8007644:	0800761d 	.word	0x0800761d
 8007648:	0800761d 	.word	0x0800761d
 800764c:	080076a1 	.word	0x080076a1
 8007650:	0800761d 	.word	0x0800761d
 8007654:	0800761d 	.word	0x0800761d
 8007658:	0800761d 	.word	0x0800761d
 800765c:	0800761d 	.word	0x0800761d
 8007660:	080077a1 	.word	0x080077a1
 8007664:	080076cb 	.word	0x080076cb
 8007668:	0800775b 	.word	0x0800775b
 800766c:	0800761d 	.word	0x0800761d
 8007670:	0800761d 	.word	0x0800761d
 8007674:	080077c3 	.word	0x080077c3
 8007678:	0800761d 	.word	0x0800761d
 800767c:	080076cb 	.word	0x080076cb
 8007680:	0800761d 	.word	0x0800761d
 8007684:	0800761d 	.word	0x0800761d
 8007688:	08007763 	.word	0x08007763
 800768c:	6833      	ldr	r3, [r6, #0]
 800768e:	1d1a      	adds	r2, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6032      	str	r2, [r6, #0]
 8007694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800769c:	2301      	movs	r3, #1
 800769e:	e09d      	b.n	80077dc <_printf_i+0x1e8>
 80076a0:	6833      	ldr	r3, [r6, #0]
 80076a2:	6820      	ldr	r0, [r4, #0]
 80076a4:	1d19      	adds	r1, r3, #4
 80076a6:	6031      	str	r1, [r6, #0]
 80076a8:	0606      	lsls	r6, r0, #24
 80076aa:	d501      	bpl.n	80076b0 <_printf_i+0xbc>
 80076ac:	681d      	ldr	r5, [r3, #0]
 80076ae:	e003      	b.n	80076b8 <_printf_i+0xc4>
 80076b0:	0645      	lsls	r5, r0, #25
 80076b2:	d5fb      	bpl.n	80076ac <_printf_i+0xb8>
 80076b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	da03      	bge.n	80076c4 <_printf_i+0xd0>
 80076bc:	232d      	movs	r3, #45	@ 0x2d
 80076be:	426d      	negs	r5, r5
 80076c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076c4:	4859      	ldr	r0, [pc, #356]	@ (800782c <_printf_i+0x238>)
 80076c6:	230a      	movs	r3, #10
 80076c8:	e011      	b.n	80076ee <_printf_i+0xfa>
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	6833      	ldr	r3, [r6, #0]
 80076ce:	0608      	lsls	r0, r1, #24
 80076d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80076d4:	d402      	bmi.n	80076dc <_printf_i+0xe8>
 80076d6:	0649      	lsls	r1, r1, #25
 80076d8:	bf48      	it	mi
 80076da:	b2ad      	uxthmi	r5, r5
 80076dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80076de:	4853      	ldr	r0, [pc, #332]	@ (800782c <_printf_i+0x238>)
 80076e0:	6033      	str	r3, [r6, #0]
 80076e2:	bf14      	ite	ne
 80076e4:	230a      	movne	r3, #10
 80076e6:	2308      	moveq	r3, #8
 80076e8:	2100      	movs	r1, #0
 80076ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ee:	6866      	ldr	r6, [r4, #4]
 80076f0:	60a6      	str	r6, [r4, #8]
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	bfa2      	ittt	ge
 80076f6:	6821      	ldrge	r1, [r4, #0]
 80076f8:	f021 0104 	bicge.w	r1, r1, #4
 80076fc:	6021      	strge	r1, [r4, #0]
 80076fe:	b90d      	cbnz	r5, 8007704 <_printf_i+0x110>
 8007700:	2e00      	cmp	r6, #0
 8007702:	d04b      	beq.n	800779c <_printf_i+0x1a8>
 8007704:	4616      	mov	r6, r2
 8007706:	fbb5 f1f3 	udiv	r1, r5, r3
 800770a:	fb03 5711 	mls	r7, r3, r1, r5
 800770e:	5dc7      	ldrb	r7, [r0, r7]
 8007710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007714:	462f      	mov	r7, r5
 8007716:	42bb      	cmp	r3, r7
 8007718:	460d      	mov	r5, r1
 800771a:	d9f4      	bls.n	8007706 <_printf_i+0x112>
 800771c:	2b08      	cmp	r3, #8
 800771e:	d10b      	bne.n	8007738 <_printf_i+0x144>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	07df      	lsls	r7, r3, #31
 8007724:	d508      	bpl.n	8007738 <_printf_i+0x144>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	6861      	ldr	r1, [r4, #4]
 800772a:	4299      	cmp	r1, r3
 800772c:	bfde      	ittt	le
 800772e:	2330      	movle	r3, #48	@ 0x30
 8007730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007734:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007738:	1b92      	subs	r2, r2, r6
 800773a:	6122      	str	r2, [r4, #16]
 800773c:	f8cd a000 	str.w	sl, [sp]
 8007740:	464b      	mov	r3, r9
 8007742:	aa03      	add	r2, sp, #12
 8007744:	4621      	mov	r1, r4
 8007746:	4640      	mov	r0, r8
 8007748:	f7ff fee6 	bl	8007518 <_printf_common>
 800774c:	3001      	adds	r0, #1
 800774e:	d14a      	bne.n	80077e6 <_printf_i+0x1f2>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007754:	b004      	add	sp, #16
 8007756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	f043 0320 	orr.w	r3, r3, #32
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	4833      	ldr	r0, [pc, #204]	@ (8007830 <_printf_i+0x23c>)
 8007764:	2778      	movs	r7, #120	@ 0x78
 8007766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	6831      	ldr	r1, [r6, #0]
 800776e:	061f      	lsls	r7, r3, #24
 8007770:	f851 5b04 	ldr.w	r5, [r1], #4
 8007774:	d402      	bmi.n	800777c <_printf_i+0x188>
 8007776:	065f      	lsls	r7, r3, #25
 8007778:	bf48      	it	mi
 800777a:	b2ad      	uxthmi	r5, r5
 800777c:	6031      	str	r1, [r6, #0]
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	bf44      	itt	mi
 8007782:	f043 0320 	orrmi.w	r3, r3, #32
 8007786:	6023      	strmi	r3, [r4, #0]
 8007788:	b11d      	cbz	r5, 8007792 <_printf_i+0x19e>
 800778a:	2310      	movs	r3, #16
 800778c:	e7ac      	b.n	80076e8 <_printf_i+0xf4>
 800778e:	4827      	ldr	r0, [pc, #156]	@ (800782c <_printf_i+0x238>)
 8007790:	e7e9      	b.n	8007766 <_printf_i+0x172>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	f023 0320 	bic.w	r3, r3, #32
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	e7f6      	b.n	800778a <_printf_i+0x196>
 800779c:	4616      	mov	r6, r2
 800779e:	e7bd      	b.n	800771c <_printf_i+0x128>
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	6825      	ldr	r5, [r4, #0]
 80077a4:	6961      	ldr	r1, [r4, #20]
 80077a6:	1d18      	adds	r0, r3, #4
 80077a8:	6030      	str	r0, [r6, #0]
 80077aa:	062e      	lsls	r6, r5, #24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	d501      	bpl.n	80077b4 <_printf_i+0x1c0>
 80077b0:	6019      	str	r1, [r3, #0]
 80077b2:	e002      	b.n	80077ba <_printf_i+0x1c6>
 80077b4:	0668      	lsls	r0, r5, #25
 80077b6:	d5fb      	bpl.n	80077b0 <_printf_i+0x1bc>
 80077b8:	8019      	strh	r1, [r3, #0]
 80077ba:	2300      	movs	r3, #0
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	4616      	mov	r6, r2
 80077c0:	e7bc      	b.n	800773c <_printf_i+0x148>
 80077c2:	6833      	ldr	r3, [r6, #0]
 80077c4:	1d1a      	adds	r2, r3, #4
 80077c6:	6032      	str	r2, [r6, #0]
 80077c8:	681e      	ldr	r6, [r3, #0]
 80077ca:	6862      	ldr	r2, [r4, #4]
 80077cc:	2100      	movs	r1, #0
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7f8 fcfe 	bl	80001d0 <memchr>
 80077d4:	b108      	cbz	r0, 80077da <_printf_i+0x1e6>
 80077d6:	1b80      	subs	r0, r0, r6
 80077d8:	6060      	str	r0, [r4, #4]
 80077da:	6863      	ldr	r3, [r4, #4]
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	2300      	movs	r3, #0
 80077e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077e4:	e7aa      	b.n	800773c <_printf_i+0x148>
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	4632      	mov	r2, r6
 80077ea:	4649      	mov	r1, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	47d0      	blx	sl
 80077f0:	3001      	adds	r0, #1
 80077f2:	d0ad      	beq.n	8007750 <_printf_i+0x15c>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	079b      	lsls	r3, r3, #30
 80077f8:	d413      	bmi.n	8007822 <_printf_i+0x22e>
 80077fa:	68e0      	ldr	r0, [r4, #12]
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	4298      	cmp	r0, r3
 8007800:	bfb8      	it	lt
 8007802:	4618      	movlt	r0, r3
 8007804:	e7a6      	b.n	8007754 <_printf_i+0x160>
 8007806:	2301      	movs	r3, #1
 8007808:	4632      	mov	r2, r6
 800780a:	4649      	mov	r1, r9
 800780c:	4640      	mov	r0, r8
 800780e:	47d0      	blx	sl
 8007810:	3001      	adds	r0, #1
 8007812:	d09d      	beq.n	8007750 <_printf_i+0x15c>
 8007814:	3501      	adds	r5, #1
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	9903      	ldr	r1, [sp, #12]
 800781a:	1a5b      	subs	r3, r3, r1
 800781c:	42ab      	cmp	r3, r5
 800781e:	dcf2      	bgt.n	8007806 <_printf_i+0x212>
 8007820:	e7eb      	b.n	80077fa <_printf_i+0x206>
 8007822:	2500      	movs	r5, #0
 8007824:	f104 0619 	add.w	r6, r4, #25
 8007828:	e7f5      	b.n	8007816 <_printf_i+0x222>
 800782a:	bf00      	nop
 800782c:	0801d9b1 	.word	0x0801d9b1
 8007830:	0801d9c2 	.word	0x0801d9c2

08007834 <__sflush_r>:
 8007834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783c:	0716      	lsls	r6, r2, #28
 800783e:	4605      	mov	r5, r0
 8007840:	460c      	mov	r4, r1
 8007842:	d454      	bmi.n	80078ee <__sflush_r+0xba>
 8007844:	684b      	ldr	r3, [r1, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	dc02      	bgt.n	8007850 <__sflush_r+0x1c>
 800784a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd48      	ble.n	80078e2 <__sflush_r+0xae>
 8007850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007852:	2e00      	cmp	r6, #0
 8007854:	d045      	beq.n	80078e2 <__sflush_r+0xae>
 8007856:	2300      	movs	r3, #0
 8007858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800785c:	682f      	ldr	r7, [r5, #0]
 800785e:	6a21      	ldr	r1, [r4, #32]
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	d030      	beq.n	80078c6 <__sflush_r+0x92>
 8007864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	0759      	lsls	r1, r3, #29
 800786a:	d505      	bpl.n	8007878 <__sflush_r+0x44>
 800786c:	6863      	ldr	r3, [r4, #4]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007872:	b10b      	cbz	r3, 8007878 <__sflush_r+0x44>
 8007874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	2300      	movs	r3, #0
 800787a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800787c:	6a21      	ldr	r1, [r4, #32]
 800787e:	4628      	mov	r0, r5
 8007880:	47b0      	blx	r6
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	d106      	bne.n	8007896 <__sflush_r+0x62>
 8007888:	6829      	ldr	r1, [r5, #0]
 800788a:	291d      	cmp	r1, #29
 800788c:	d82b      	bhi.n	80078e6 <__sflush_r+0xb2>
 800788e:	4a2a      	ldr	r2, [pc, #168]	@ (8007938 <__sflush_r+0x104>)
 8007890:	410a      	asrs	r2, r1
 8007892:	07d6      	lsls	r6, r2, #31
 8007894:	d427      	bmi.n	80078e6 <__sflush_r+0xb2>
 8007896:	2200      	movs	r2, #0
 8007898:	6062      	str	r2, [r4, #4]
 800789a:	04d9      	lsls	r1, r3, #19
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	6022      	str	r2, [r4, #0]
 80078a0:	d504      	bpl.n	80078ac <__sflush_r+0x78>
 80078a2:	1c42      	adds	r2, r0, #1
 80078a4:	d101      	bne.n	80078aa <__sflush_r+0x76>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b903      	cbnz	r3, 80078ac <__sflush_r+0x78>
 80078aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80078ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ae:	602f      	str	r7, [r5, #0]
 80078b0:	b1b9      	cbz	r1, 80078e2 <__sflush_r+0xae>
 80078b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078b6:	4299      	cmp	r1, r3
 80078b8:	d002      	beq.n	80078c0 <__sflush_r+0x8c>
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 fa24 	bl	8007d08 <_free_r>
 80078c0:	2300      	movs	r3, #0
 80078c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80078c4:	e00d      	b.n	80078e2 <__sflush_r+0xae>
 80078c6:	2301      	movs	r3, #1
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b0      	blx	r6
 80078cc:	4602      	mov	r2, r0
 80078ce:	1c50      	adds	r0, r2, #1
 80078d0:	d1c9      	bne.n	8007866 <__sflush_r+0x32>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0c6      	beq.n	8007866 <__sflush_r+0x32>
 80078d8:	2b1d      	cmp	r3, #29
 80078da:	d001      	beq.n	80078e0 <__sflush_r+0xac>
 80078dc:	2b16      	cmp	r3, #22
 80078de:	d11e      	bne.n	800791e <__sflush_r+0xea>
 80078e0:	602f      	str	r7, [r5, #0]
 80078e2:	2000      	movs	r0, #0
 80078e4:	e022      	b.n	800792c <__sflush_r+0xf8>
 80078e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	e01b      	b.n	8007926 <__sflush_r+0xf2>
 80078ee:	690f      	ldr	r7, [r1, #16]
 80078f0:	2f00      	cmp	r7, #0
 80078f2:	d0f6      	beq.n	80078e2 <__sflush_r+0xae>
 80078f4:	0793      	lsls	r3, r2, #30
 80078f6:	680e      	ldr	r6, [r1, #0]
 80078f8:	bf08      	it	eq
 80078fa:	694b      	ldreq	r3, [r1, #20]
 80078fc:	600f      	str	r7, [r1, #0]
 80078fe:	bf18      	it	ne
 8007900:	2300      	movne	r3, #0
 8007902:	eba6 0807 	sub.w	r8, r6, r7
 8007906:	608b      	str	r3, [r1, #8]
 8007908:	f1b8 0f00 	cmp.w	r8, #0
 800790c:	dde9      	ble.n	80078e2 <__sflush_r+0xae>
 800790e:	6a21      	ldr	r1, [r4, #32]
 8007910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007912:	4643      	mov	r3, r8
 8007914:	463a      	mov	r2, r7
 8007916:	4628      	mov	r0, r5
 8007918:	47b0      	blx	r6
 800791a:	2800      	cmp	r0, #0
 800791c:	dc08      	bgt.n	8007930 <__sflush_r+0xfc>
 800791e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	4407      	add	r7, r0
 8007932:	eba8 0800 	sub.w	r8, r8, r0
 8007936:	e7e7      	b.n	8007908 <__sflush_r+0xd4>
 8007938:	dfbffffe 	.word	0xdfbffffe

0800793c <_fflush_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	690b      	ldr	r3, [r1, #16]
 8007940:	4605      	mov	r5, r0
 8007942:	460c      	mov	r4, r1
 8007944:	b913      	cbnz	r3, 800794c <_fflush_r+0x10>
 8007946:	2500      	movs	r5, #0
 8007948:	4628      	mov	r0, r5
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	b118      	cbz	r0, 8007956 <_fflush_r+0x1a>
 800794e:	6a03      	ldr	r3, [r0, #32]
 8007950:	b90b      	cbnz	r3, 8007956 <_fflush_r+0x1a>
 8007952:	f7ff fb15 	bl	8006f80 <__sinit>
 8007956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0f3      	beq.n	8007946 <_fflush_r+0xa>
 800795e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007960:	07d0      	lsls	r0, r2, #31
 8007962:	d404      	bmi.n	800796e <_fflush_r+0x32>
 8007964:	0599      	lsls	r1, r3, #22
 8007966:	d402      	bmi.n	800796e <_fflush_r+0x32>
 8007968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800796a:	f7ff fbe2 	bl	8007132 <__retarget_lock_acquire_recursive>
 800796e:	4628      	mov	r0, r5
 8007970:	4621      	mov	r1, r4
 8007972:	f7ff ff5f 	bl	8007834 <__sflush_r>
 8007976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007978:	07da      	lsls	r2, r3, #31
 800797a:	4605      	mov	r5, r0
 800797c:	d4e4      	bmi.n	8007948 <_fflush_r+0xc>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	059b      	lsls	r3, r3, #22
 8007982:	d4e1      	bmi.n	8007948 <_fflush_r+0xc>
 8007984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007986:	f7ff fbd5 	bl	8007134 <__retarget_lock_release_recursive>
 800798a:	e7dd      	b.n	8007948 <_fflush_r+0xc>

0800798c <__malloc_lock>:
 800798c:	4801      	ldr	r0, [pc, #4]	@ (8007994 <__malloc_lock+0x8>)
 800798e:	f7ff bbd0 	b.w	8007132 <__retarget_lock_acquire_recursive>
 8007992:	bf00      	nop
 8007994:	200032a8 	.word	0x200032a8

08007998 <__malloc_unlock>:
 8007998:	4801      	ldr	r0, [pc, #4]	@ (80079a0 <__malloc_unlock+0x8>)
 800799a:	f7ff bbcb 	b.w	8007134 <__retarget_lock_release_recursive>
 800799e:	bf00      	nop
 80079a0:	200032a8 	.word	0x200032a8

080079a4 <__sread>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	f000 f978 	bl	8007ca0 <_read_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bfab      	itete	ge
 80079b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079b6:	89a3      	ldrhlt	r3, [r4, #12]
 80079b8:	181b      	addge	r3, r3, r0
 80079ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079be:	bfac      	ite	ge
 80079c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079c2:	81a3      	strhlt	r3, [r4, #12]
 80079c4:	bd10      	pop	{r4, pc}

080079c6 <__swrite>:
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	461f      	mov	r7, r3
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	05db      	lsls	r3, r3, #23
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	4616      	mov	r6, r2
 80079d6:	d505      	bpl.n	80079e4 <__swrite+0x1e>
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	2302      	movs	r3, #2
 80079de:	2200      	movs	r2, #0
 80079e0:	f000 f94c 	bl	8007c7c <_lseek_r>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	4632      	mov	r2, r6
 80079f2:	463b      	mov	r3, r7
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	f000 b973 	b.w	8007ce4 <_write_r>

080079fe <__sseek>:
 80079fe:	b510      	push	{r4, lr}
 8007a00:	460c      	mov	r4, r1
 8007a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a06:	f000 f939 	bl	8007c7c <_lseek_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	bf15      	itete	ne
 8007a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a1a:	81a3      	strheq	r3, [r4, #12]
 8007a1c:	bf18      	it	ne
 8007a1e:	81a3      	strhne	r3, [r4, #12]
 8007a20:	bd10      	pop	{r4, pc}

08007a22 <__sclose>:
 8007a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a26:	f000 b8f7 	b.w	8007c18 <_close_r>

08007a2a <__swbuf_r>:
 8007a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2c:	460e      	mov	r6, r1
 8007a2e:	4614      	mov	r4, r2
 8007a30:	4605      	mov	r5, r0
 8007a32:	b118      	cbz	r0, 8007a3c <__swbuf_r+0x12>
 8007a34:	6a03      	ldr	r3, [r0, #32]
 8007a36:	b90b      	cbnz	r3, 8007a3c <__swbuf_r+0x12>
 8007a38:	f7ff faa2 	bl	8006f80 <__sinit>
 8007a3c:	69a3      	ldr	r3, [r4, #24]
 8007a3e:	60a3      	str	r3, [r4, #8]
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	071a      	lsls	r2, r3, #28
 8007a44:	d501      	bpl.n	8007a4a <__swbuf_r+0x20>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b943      	cbnz	r3, 8007a5c <__swbuf_r+0x32>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f000 f82b 	bl	8007aa8 <__swsetup_r>
 8007a52:	b118      	cbz	r0, 8007a5c <__swbuf_r+0x32>
 8007a54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a58:	4638      	mov	r0, r7
 8007a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	6922      	ldr	r2, [r4, #16]
 8007a60:	1a98      	subs	r0, r3, r2
 8007a62:	6963      	ldr	r3, [r4, #20]
 8007a64:	b2f6      	uxtb	r6, r6
 8007a66:	4283      	cmp	r3, r0
 8007a68:	4637      	mov	r7, r6
 8007a6a:	dc05      	bgt.n	8007a78 <__swbuf_r+0x4e>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f7ff ff64 	bl	800793c <_fflush_r>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d1ed      	bne.n	8007a54 <__swbuf_r+0x2a>
 8007a78:	68a3      	ldr	r3, [r4, #8]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	6022      	str	r2, [r4, #0]
 8007a84:	701e      	strb	r6, [r3, #0]
 8007a86:	6962      	ldr	r2, [r4, #20]
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d004      	beq.n	8007a98 <__swbuf_r+0x6e>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	07db      	lsls	r3, r3, #31
 8007a92:	d5e1      	bpl.n	8007a58 <__swbuf_r+0x2e>
 8007a94:	2e0a      	cmp	r6, #10
 8007a96:	d1df      	bne.n	8007a58 <__swbuf_r+0x2e>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f7ff ff4e 	bl	800793c <_fflush_r>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d0d9      	beq.n	8007a58 <__swbuf_r+0x2e>
 8007aa4:	e7d6      	b.n	8007a54 <__swbuf_r+0x2a>
	...

08007aa8 <__swsetup_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4b29      	ldr	r3, [pc, #164]	@ (8007b50 <__swsetup_r+0xa8>)
 8007aac:	4605      	mov	r5, r0
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	b118      	cbz	r0, 8007abc <__swsetup_r+0x14>
 8007ab4:	6a03      	ldr	r3, [r0, #32]
 8007ab6:	b90b      	cbnz	r3, 8007abc <__swsetup_r+0x14>
 8007ab8:	f7ff fa62 	bl	8006f80 <__sinit>
 8007abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac0:	0719      	lsls	r1, r3, #28
 8007ac2:	d422      	bmi.n	8007b0a <__swsetup_r+0x62>
 8007ac4:	06da      	lsls	r2, r3, #27
 8007ac6:	d407      	bmi.n	8007ad8 <__swsetup_r+0x30>
 8007ac8:	2209      	movs	r2, #9
 8007aca:	602a      	str	r2, [r5, #0]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ad6:	e033      	b.n	8007b40 <__swsetup_r+0x98>
 8007ad8:	0758      	lsls	r0, r3, #29
 8007ada:	d512      	bpl.n	8007b02 <__swsetup_r+0x5a>
 8007adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ade:	b141      	cbz	r1, 8007af2 <__swsetup_r+0x4a>
 8007ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	d002      	beq.n	8007aee <__swsetup_r+0x46>
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 f90d 	bl	8007d08 <_free_r>
 8007aee:	2300      	movs	r3, #0
 8007af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	2300      	movs	r3, #0
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f043 0308 	orr.w	r3, r3, #8
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	6923      	ldr	r3, [r4, #16]
 8007b0c:	b94b      	cbnz	r3, 8007b22 <__swsetup_r+0x7a>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b18:	d003      	beq.n	8007b22 <__swsetup_r+0x7a>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 f83f 	bl	8007ba0 <__smakebuf_r>
 8007b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b26:	f013 0201 	ands.w	r2, r3, #1
 8007b2a:	d00a      	beq.n	8007b42 <__swsetup_r+0x9a>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	60a2      	str	r2, [r4, #8]
 8007b30:	6962      	ldr	r2, [r4, #20]
 8007b32:	4252      	negs	r2, r2
 8007b34:	61a2      	str	r2, [r4, #24]
 8007b36:	6922      	ldr	r2, [r4, #16]
 8007b38:	b942      	cbnz	r2, 8007b4c <__swsetup_r+0xa4>
 8007b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b3e:	d1c5      	bne.n	8007acc <__swsetup_r+0x24>
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	0799      	lsls	r1, r3, #30
 8007b44:	bf58      	it	pl
 8007b46:	6962      	ldrpl	r2, [r4, #20]
 8007b48:	60a2      	str	r2, [r4, #8]
 8007b4a:	e7f4      	b.n	8007b36 <__swsetup_r+0x8e>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e7f7      	b.n	8007b40 <__swsetup_r+0x98>
 8007b50:	2000001c 	.word	0x2000001c

08007b54 <__swhatbuf_r>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	460c      	mov	r4, r1
 8007b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	b096      	sub	sp, #88	@ 0x58
 8007b60:	4615      	mov	r5, r2
 8007b62:	461e      	mov	r6, r3
 8007b64:	da0d      	bge.n	8007b82 <__swhatbuf_r+0x2e>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b6c:	f04f 0100 	mov.w	r1, #0
 8007b70:	bf14      	ite	ne
 8007b72:	2340      	movne	r3, #64	@ 0x40
 8007b74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b78:	2000      	movs	r0, #0
 8007b7a:	6031      	str	r1, [r6, #0]
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	b016      	add	sp, #88	@ 0x58
 8007b80:	bd70      	pop	{r4, r5, r6, pc}
 8007b82:	466a      	mov	r2, sp
 8007b84:	f000 f858 	bl	8007c38 <_fstat_r>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dbec      	blt.n	8007b66 <__swhatbuf_r+0x12>
 8007b8c:	9901      	ldr	r1, [sp, #4]
 8007b8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b96:	4259      	negs	r1, r3
 8007b98:	4159      	adcs	r1, r3
 8007b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b9e:	e7eb      	b.n	8007b78 <__swhatbuf_r+0x24>

08007ba0 <__smakebuf_r>:
 8007ba0:	898b      	ldrh	r3, [r1, #12]
 8007ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ba4:	079d      	lsls	r5, r3, #30
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	d507      	bpl.n	8007bbc <__smakebuf_r+0x1c>
 8007bac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	6163      	str	r3, [r4, #20]
 8007bb8:	b003      	add	sp, #12
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bbc:	ab01      	add	r3, sp, #4
 8007bbe:	466a      	mov	r2, sp
 8007bc0:	f7ff ffc8 	bl	8007b54 <__swhatbuf_r>
 8007bc4:	9f00      	ldr	r7, [sp, #0]
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff fc24 	bl	8007418 <_malloc_r>
 8007bd0:	b948      	cbnz	r0, 8007be6 <__smakebuf_r+0x46>
 8007bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd6:	059a      	lsls	r2, r3, #22
 8007bd8:	d4ee      	bmi.n	8007bb8 <__smakebuf_r+0x18>
 8007bda:	f023 0303 	bic.w	r3, r3, #3
 8007bde:	f043 0302 	orr.w	r3, r3, #2
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	e7e2      	b.n	8007bac <__smakebuf_r+0xc>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	6020      	str	r0, [r4, #0]
 8007bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bf6:	b15b      	cbz	r3, 8007c10 <__smakebuf_r+0x70>
 8007bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f000 f82d 	bl	8007c5c <_isatty_r>
 8007c02:	b128      	cbz	r0, 8007c10 <__smakebuf_r+0x70>
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	81a3      	strh	r3, [r4, #12]
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	431d      	orrs	r5, r3
 8007c14:	81a5      	strh	r5, [r4, #12]
 8007c16:	e7cf      	b.n	8007bb8 <__smakebuf_r+0x18>

08007c18 <_close_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d06      	ldr	r5, [pc, #24]	@ (8007c34 <_close_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7f9 f96b 	bl	8000efe <_close>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_close_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_close_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	200032b4 	.word	0x200032b4

08007c38 <_fstat_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	@ (8007c58 <_fstat_r+0x20>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f7f9 f966 	bl	8000f16 <_fstat>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <_fstat_r+0x1c>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b103      	cbz	r3, 8007c54 <_fstat_r+0x1c>
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	200032b4 	.word	0x200032b4

08007c5c <_isatty_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d06      	ldr	r5, [pc, #24]	@ (8007c78 <_isatty_r+0x1c>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7f9 f965 	bl	8000f36 <_isatty>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_isatty_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_isatty_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	200032b4 	.word	0x200032b4

08007c7c <_lseek_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	@ (8007c9c <_lseek_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7f9 f95e 	bl	8000f4c <_lseek>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_lseek_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_lseek_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200032b4 	.word	0x200032b4

08007ca0 <_read_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d07      	ldr	r5, [pc, #28]	@ (8007cc0 <_read_r+0x20>)
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	602a      	str	r2, [r5, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7f9 f908 	bl	8000ec4 <_read>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_read_r+0x1e>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_read_r+0x1e>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200032b4 	.word	0x200032b4

08007cc4 <_sbrk_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d06      	ldr	r5, [pc, #24]	@ (8007ce0 <_sbrk_r+0x1c>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7f9 f94a 	bl	8000f68 <_sbrk>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_sbrk_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_sbrk_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	200032b4 	.word	0x200032b4

08007ce4 <_write_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_write_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7f8 fd4e 	bl	8000794 <_write>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_write_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_write_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	200032b4 	.word	0x200032b4

08007d08 <_free_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d041      	beq.n	8007d94 <_free_r+0x8c>
 8007d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d14:	1f0c      	subs	r4, r1, #4
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bfb8      	it	lt
 8007d1a:	18e4      	addlt	r4, r4, r3
 8007d1c:	f7ff fe36 	bl	800798c <__malloc_lock>
 8007d20:	4a1d      	ldr	r2, [pc, #116]	@ (8007d98 <_free_r+0x90>)
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	b933      	cbnz	r3, 8007d34 <_free_r+0x2c>
 8007d26:	6063      	str	r3, [r4, #4]
 8007d28:	6014      	str	r4, [r2, #0]
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d30:	f7ff be32 	b.w	8007998 <__malloc_unlock>
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d908      	bls.n	8007d4a <_free_r+0x42>
 8007d38:	6820      	ldr	r0, [r4, #0]
 8007d3a:	1821      	adds	r1, r4, r0
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	bf01      	itttt	eq
 8007d40:	6819      	ldreq	r1, [r3, #0]
 8007d42:	685b      	ldreq	r3, [r3, #4]
 8007d44:	1809      	addeq	r1, r1, r0
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	e7ed      	b.n	8007d26 <_free_r+0x1e>
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	b10b      	cbz	r3, 8007d54 <_free_r+0x4c>
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d9fa      	bls.n	8007d4a <_free_r+0x42>
 8007d54:	6811      	ldr	r1, [r2, #0]
 8007d56:	1850      	adds	r0, r2, r1
 8007d58:	42a0      	cmp	r0, r4
 8007d5a:	d10b      	bne.n	8007d74 <_free_r+0x6c>
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	4401      	add	r1, r0
 8007d60:	1850      	adds	r0, r2, r1
 8007d62:	4283      	cmp	r3, r0
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	d1e0      	bne.n	8007d2a <_free_r+0x22>
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	6053      	str	r3, [r2, #4]
 8007d6e:	4408      	add	r0, r1
 8007d70:	6010      	str	r0, [r2, #0]
 8007d72:	e7da      	b.n	8007d2a <_free_r+0x22>
 8007d74:	d902      	bls.n	8007d7c <_free_r+0x74>
 8007d76:	230c      	movs	r3, #12
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	e7d6      	b.n	8007d2a <_free_r+0x22>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	1821      	adds	r1, r4, r0
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf04      	itt	eq
 8007d84:	6819      	ldreq	r1, [r3, #0]
 8007d86:	685b      	ldreq	r3, [r3, #4]
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	bf04      	itt	eq
 8007d8c:	1809      	addeq	r1, r1, r0
 8007d8e:	6021      	streq	r1, [r4, #0]
 8007d90:	6054      	str	r4, [r2, #4]
 8007d92:	e7ca      	b.n	8007d2a <_free_r+0x22>
 8007d94:	bd38      	pop	{r3, r4, r5, pc}
 8007d96:	bf00      	nop
 8007d98:	200032b0 	.word	0x200032b0

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
