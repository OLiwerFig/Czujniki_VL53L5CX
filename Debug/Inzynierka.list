
Inzynierka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015dc8  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c910  0801c910  0001e068  2**0
                  CONTENTS
  4 .ARM          00000008  0801c910  0801c910  0001d910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c918  0801c918  0001e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c918  0801c918  0001d918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c91c  0801c91c  0001d91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0801c920  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000225c  20000068  0801c988  0001e068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022c4  0801c988  0001e2c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fec  00000000  00000000  0001e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c72  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00032cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc2  00000000  00000000  00033c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028048  00000000  00000000  0003480a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142aa  00000000  00000000  0005c852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee2f9  00000000  00000000  00070afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015edf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d0  00000000  00000000  0015ee38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00163408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b30 	.word	0x08006b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006b30 	.word	0x08006b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b36      	ldr	r3, [pc, #216]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a35      	ldr	r2, [pc, #212]	@ (8000650 <MX_GPIO_Init+0xf0>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b33      	ldr	r3, [pc, #204]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b30      	ldr	r3, [pc, #192]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a2f      	ldr	r2, [pc, #188]	@ (8000650 <MX_GPIO_Init+0xf0>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <MX_GPIO_Init+0xf0>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a29      	ldr	r2, [pc, #164]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a23      	ldr	r2, [pc, #140]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_GPIO_Init+0xf0>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 fff9 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e8:	481a      	ldr	r0, [pc, #104]	@ (8000654 <MX_GPIO_Init+0xf4>)
 80005ea:	f000 fff3 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4813      	ldr	r0, [pc, #76]	@ (8000654 <MX_GPIO_Init+0xf4>)
 8000606:	f000 fe3b 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060a:	2320      	movs	r3, #32
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 fe2c 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <MX_GPIO_Init+0xf4>)
 8000642:	f000 fe1d 	bl	8001280 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	@ 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	48000800 	.word	0x48000800

08000658 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_I2C1_Init+0x74>)
 800065e:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <MX_I2C1_Init+0x78>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <MX_I2C1_Init+0x7c>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000670:	2201      	movs	r2, #1
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	480e      	ldr	r0, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x74>)
 8000694:	f000 ffb6 	bl	8001604 <HAL_I2C_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fa03 	bl	8000aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4809      	ldr	r0, [pc, #36]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006a6:	f001 f9a0 	bl	80019ea <HAL_I2CEx_ConfigAnalogFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 f9fa 	bl	8000aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_I2C1_Init+0x74>)
 80006b8:	f001 f9e2 	bl	8001a80 <HAL_I2CEx_ConfigDigitalFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 f9f1 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084
 80006d0:	40005400 	.word	0x40005400
 80006d4:	10909cec 	.word	0x10909cec

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0ac      	sub	sp, #176	@ 0xb0
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2288      	movs	r2, #136	@ 0x88
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fbb1 	bl	8005e60 <memset>
  if(i2cHandle->Instance==I2C1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <HAL_I2C_MspInit+0xb0>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d13b      	bne.n	8000780 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f002 f863 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000720:	f000 f9c2 	bl	8000aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800073c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000744:	2312      	movs	r3, #18
 8000746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000760:	4619      	mov	r1, r3
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <HAL_I2C_MspInit+0xb8>)
 8000764:	f000 fd8c 	bl	8001280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800076a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 800076e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000772:	6593      	str	r3, [r2, #88]	@ 0x58
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_I2C_MspInit+0xb4>)
 8000776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000780:	bf00      	nop
 8000782:	37b0      	adds	r7, #176	@ 0xb0
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40005400 	.word	0x40005400
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char* ptr, int len){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <_write+0x28>)
 80007ac:	f002 fd22 	bl	80031f4 <HAL_UART_Transmit>
    return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200020ec 	.word	0x200020ec

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fb2c 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f82a 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff fec8 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 fa68 	bl	8000ca4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d4:	f7ff ff40 	bl	8000658 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Test UART
  printf("UART działa poprawnie\r\n");
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <main+0x4c>)
 80007da:	f005 fb39 	bl	8005e50 <puts>

  Reset_Sensors();
 80007de:	f000 f945 	bl	8000a6c <Reset_Sensors>


  // Skanowanie magistrali I2C
  I2C_Scan();
 80007e2:	f000 f86f 	bl	80008c4 <I2C_Scan>

  // Inicjalizacja czujników
  Initialize_Sensors();
 80007e6:	f000 f8c5 	bl	8000974 <Initialize_Sensors>

  // Startowanie pomiarów
  printf("Rozpoczynanie pomiarów...\r\n");
 80007ea:	4809      	ldr	r0, [pc, #36]	@ (8000810 <main+0x50>)
 80007ec:	f005 fb30 	bl	8005e50 <puts>
  vl53l7cx_start_ranging(&dev1);
 80007f0:	4808      	ldr	r0, [pc, #32]	@ (8000814 <main+0x54>)
 80007f2:	f004 ff0f 	bl	8005614 <vl53l7cx_start_ranging>
  vl53l7cx_start_ranging(&dev2);
 80007f6:	4808      	ldr	r0, [pc, #32]	@ (8000818 <main+0x58>)
 80007f8:	f004 ff0c 	bl	8005614 <vl53l7cx_start_ranging>
  vl53l7cx_start_ranging(&dev3);
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <main+0x5c>)
 80007fe:	f004 ff09 	bl	8005614 <vl53l7cx_start_ranging>
      } else {
          printf("Błąd odczytu z czujnika 3\r\n");
      }
*/

      HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	@ 0x64
 8000804:	f000 fb88 	bl	8000f18 <HAL_Delay>
 8000808:	e7fb      	b.n	8000802 <main+0x42>
 800080a:	bf00      	nop
 800080c:	08006b48 	.word	0x08006b48
 8000810:	08006b60 	.word	0x08006b60
 8000814:	200000d8 	.word	0x200000d8
 8000818:	20000b88 	.word	0x20000b88
 800081c:	20001638 	.word	0x20001638

08000820 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b096      	sub	sp, #88	@ 0x58
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2244      	movs	r2, #68	@ 0x44
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f005 fb16 	bl	8005e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000842:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000846:	f001 f975 	bl	8001b34 <HAL_PWREx_ControlVoltageScaling>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000850:	f000 f92a 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	2310      	movs	r3, #16
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800086e:	230a      	movs	r3, #10
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000872:	2307      	movs	r3, #7
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f9ac 	bl	8001be0 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800088e:	f000 f90b 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2303      	movs	r3, #3
 8000898:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2104      	movs	r1, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fd74 	bl	8002398 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f8f7 	bl	8000aa8 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3758      	adds	r7, #88	@ 0x58
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <I2C_Scan>:
    snprintf(msg, sizeof(msg), "Czujnik %d: Odległość = %lu mm\r\n", sensor_id, distance);
    printf("%s", msg);
}

void I2C_Scan(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    printf("Rozpoczęcie skanowania I2C...\r\n");
 80008ca:	4812      	ldr	r0, [pc, #72]	@ (8000914 <I2C_Scan+0x50>)
 80008cc:	f005 fac0 	bl	8005e50 <puts>
    for(uint8_t address = 1; address < 127; address++ )
 80008d0:	2301      	movs	r3, #1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	e013      	b.n	80008fe <I2C_Scan+0x3a>
    {
        // Spróbuj odczytać 1 bajt z aktualnego adresu
        if(HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 1, 10) == HAL_OK)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	b299      	uxth	r1, r3
 80008de:	230a      	movs	r3, #10
 80008e0:	2201      	movs	r2, #1
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <I2C_Scan+0x54>)
 80008e4:	f000 ff29 	bl	800173a <HAL_I2C_IsDeviceReady>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d104      	bne.n	80008f8 <I2C_Scan+0x34>
        {
            printf("Urządzenie znalezione pod adresem 0x%02X\r\n", address);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4619      	mov	r1, r3
 80008f2:	480a      	ldr	r0, [pc, #40]	@ (800091c <I2C_Scan+0x58>)
 80008f4:	f005 fa44 	bl	8005d80 <iprintf>
    for(uint8_t address = 1; address < 127; address++ )
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	3301      	adds	r3, #1
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b7e      	cmp	r3, #126	@ 0x7e
 8000902:	d9e8      	bls.n	80008d6 <I2C_Scan+0x12>
        }
    }
    printf("Skanowanie I2C zakończone.\r\n");
 8000904:	4806      	ldr	r0, [pc, #24]	@ (8000920 <I2C_Scan+0x5c>)
 8000906:	f005 faa3 	bl	8005e50 <puts>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08006ba4 	.word	0x08006ba4
 8000918:	20000084 	.word	0x20000084
 800091c:	08006bc4 	.word	0x08006bc4
 8000920:	08006bf0 	.word	0x08006bf0

08000924 <Check_Sensor_Communication>:


uint8_t Check_Sensor_Communication(VL53L7CX_Configuration *dev) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    uint8_t data;
    uint8_t status = VL53L7CX_WrByte(&dev->platform, 0x7FFF, 0x00); // Switch to page 0
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000934:	4618      	mov	r0, r3
 8000936:	f003 fd18 	bl	800436a <VL53L7CX_WrByte>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
    if (status == VL53L7CX_STATUS_OK) {
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d110      	bne.n	8000966 <Check_Sensor_Communication+0x42>
        status = VL53L7CX_RdByte(&dev->platform, 0x010F, &data); // Read WHO_AM_I or similar register
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f107 020e 	add.w	r2, r7, #14
 800094a:	f240 110f 	movw	r1, #271	@ 0x10f
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fcfb 	bl	800434a <VL53L7CX_RdByte>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]
        printf("WHO_AM_I register: 0x%02X, status: %d\r\n", data, status);
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	4619      	mov	r1, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	461a      	mov	r2, r3
 8000960:	4803      	ldr	r0, [pc, #12]	@ (8000970 <Check_Sensor_Communication+0x4c>)
 8000962:	f005 fa0d 	bl	8005d80 <iprintf>
    }
    return status;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08006c10 	.word	0x08006c10

08000974 <Initialize_Sensors>:

void Initialize_Sensors(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
    uint8_t status;
    uint8_t is_alive;
    uint8_t new_address1 = 0x30; // Nowy adres dla czujnika 1
 800097a:	2330      	movs	r3, #48	@ 0x30
 800097c:	71fb      	strb	r3, [r7, #7]
//    uint8_t new_address2 = 0x31; // Nowy adres dla czujnika 2
//    uint8_t new_address3 = 0x32; // Nowy adres dla czujnika 3

    printf("Rozpoczęcie inicjalizacji czujników...\r\n");
 800097e:	482f      	ldr	r0, [pc, #188]	@ (8000a3c <Initialize_Sensors+0xc8>)
 8000980:	f005 fa66 	bl	8005e50 <puts>

    // Inicjalizacja pierwszego czujnika
    printf("Sprawdzanie czujnika 1...\r\n");
 8000984:	482e      	ldr	r0, [pc, #184]	@ (8000a40 <Initialize_Sensors+0xcc>)
 8000986:	f005 fa63 	bl	8005e50 <puts>
    status = vl53l7cx_is_alive(&dev1, &is_alive);
 800098a:	1d7b      	adds	r3, r7, #5
 800098c:	4619      	mov	r1, r3
 800098e:	482d      	ldr	r0, [pc, #180]	@ (8000a44 <Initialize_Sensors+0xd0>)
 8000990:	f004 f90c 	bl	8004bac <vl53l7cx_is_alive>
 8000994:	4603      	mov	r3, r0
 8000996:	71bb      	strb	r3, [r7, #6]
    printf("Status czujnika 1: %d, is_alive: %d\r\n", status, is_alive);
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	797a      	ldrb	r2, [r7, #5]
 800099c:	4619      	mov	r1, r3
 800099e:	482a      	ldr	r0, [pc, #168]	@ (8000a48 <Initialize_Sensors+0xd4>)
 80009a0:	f005 f9ee 	bl	8005d80 <iprintf>
    if (status == VL53L7CX_STATUS_OK && is_alive) {
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d12b      	bne.n	8000a02 <Initialize_Sensors+0x8e>
 80009aa:	797b      	ldrb	r3, [r7, #5]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d028      	beq.n	8000a02 <Initialize_Sensors+0x8e>
        status = vl53l7cx_set_i2c_address(&dev1, new_address1 << 1);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	4822      	ldr	r0, [pc, #136]	@ (8000a44 <Initialize_Sensors+0xd0>)
 80009bc:	f004 fdf4 	bl	80055a8 <vl53l7cx_set_i2c_address>
 80009c0:	4603      	mov	r3, r0
 80009c2:	71bb      	strb	r3, [r7, #6]
        if (status == VL53L7CX_STATUS_OK) {
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d115      	bne.n	80009f6 <Initialize_Sensors+0x82>
            dev1.platform.address = new_address1 << 1;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <Initialize_Sensors+0xd0>)
 80009d4:	801a      	strh	r2, [r3, #0]
            if (vl53l7cx_init(&dev1) == VL53L7CX_STATUS_OK) {
 80009d6:	481b      	ldr	r0, [pc, #108]	@ (8000a44 <Initialize_Sensors+0xd0>)
 80009d8:	f004 f932 	bl	8004c40 <vl53l7cx_init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <Initialize_Sensors+0x7a>
                printf("Czujnik 1 zainicjalizowany z adresem 0x%02X\r\n", new_address1);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4819      	ldr	r0, [pc, #100]	@ (8000a4c <Initialize_Sensors+0xd8>)
 80009e8:	f005 f9ca 	bl	8005d80 <iprintf>
        if (status == VL53L7CX_STATUS_OK) {
 80009ec:	e00f      	b.n	8000a0e <Initialize_Sensors+0x9a>
            } else {
                printf("Błąd inicjalizacji czujnika 1\r\n");
 80009ee:	4818      	ldr	r0, [pc, #96]	@ (8000a50 <Initialize_Sensors+0xdc>)
 80009f0:	f005 fa2e 	bl	8005e50 <puts>
        if (status == VL53L7CX_STATUS_OK) {
 80009f4:	e00b      	b.n	8000a0e <Initialize_Sensors+0x9a>
            }
        } else {
            printf("Nie udało się ustawić adresu czujnika 1, status: %d\r\n", status);
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4816      	ldr	r0, [pc, #88]	@ (8000a54 <Initialize_Sensors+0xe0>)
 80009fc:	f005 f9c0 	bl	8005d80 <iprintf>
        if (status == VL53L7CX_STATUS_OK) {
 8000a00:	e005      	b.n	8000a0e <Initialize_Sensors+0x9a>
        }
    } else {
        printf("Czujnik 1 nie jest żywy lub błąd sprawdzania statusu, status: %d, is_alive: %d\r\n", status, is_alive);
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	797a      	ldrb	r2, [r7, #5]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <Initialize_Sensors+0xe4>)
 8000a0a:	f005 f9b9 	bl	8005d80 <iprintf>
        }
    } else {
        printf("Czujnik 3 nie jest żywy lub błąd sprawdzania statusu, status: %d, is_alive: %d\r\n", status, is_alive);
    }
    */
    printf("Inicjalizacja czujników zakończona.\r\n");
 8000a0e:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <Initialize_Sensors+0xe8>)
 8000a10:	f005 fa1e 	bl	8005e50 <puts>



    // Add communication check
    printf("Sprawdzanie komunikacji z czujnikiem 1...\r\n");
 8000a14:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <Initialize_Sensors+0xec>)
 8000a16:	f005 fa1b 	bl	8005e50 <puts>
    if (Check_Sensor_Communication(&dev1) == VL53L7CX_STATUS_OK) {
 8000a1a:	480a      	ldr	r0, [pc, #40]	@ (8000a44 <Initialize_Sensors+0xd0>)
 8000a1c:	f7ff ff82 	bl	8000924 <Check_Sensor_Communication>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <Initialize_Sensors+0xba>
        printf("Komunikacja z czujnikiem 1 jest OK\r\n");
 8000a26:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <Initialize_Sensors+0xf0>)
 8000a28:	f005 fa12 	bl	8005e50 <puts>
        printf("Błąd komunikacji z czujnikiem 3\r\n");
    }

*/

}
 8000a2c:	e002      	b.n	8000a34 <Initialize_Sensors+0xc0>
        printf("Błąd komunikacji z czujnikiem 1\r\n");
 8000a2e:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <Initialize_Sensors+0xf4>)
 8000a30:	f005 fa0e 	bl	8005e50 <puts>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08006c38 	.word	0x08006c38
 8000a40:	08006c64 	.word	0x08006c64
 8000a44:	200000d8 	.word	0x200000d8
 8000a48:	08006c80 	.word	0x08006c80
 8000a4c:	08006ca8 	.word	0x08006ca8
 8000a50:	08006cd8 	.word	0x08006cd8
 8000a54:	08006cfc 	.word	0x08006cfc
 8000a58:	08006d38 	.word	0x08006d38
 8000a5c:	08006d8c 	.word	0x08006d8c
 8000a60:	08006db4 	.word	0x08006db4
 8000a64:	08006de0 	.word	0x08006de0
 8000a68:	08006e04 	.word	0x08006e04

08000a6c <Reset_Sensors>:
        }
    }
    return temp_buffer[1];
}

void Reset_Sensors(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0


    // Resetowanie czujnika
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a76:	480a      	ldr	r0, [pc, #40]	@ (8000aa0 <Reset_Sensors+0x34>)
 8000a78:	f000 fdac 	bl	80015d4 <HAL_GPIO_WritePin>
    HAL_Delay(10); // 10 ms
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f000 fa4b 	bl	8000f18 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <Reset_Sensors+0x34>)
 8000a8a:	f000 fda3 	bl	80015d4 <HAL_GPIO_WritePin>
    HAL_Delay(10); // 10 ms
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 fa42 	bl	8000f18 <HAL_Delay>
    printf("Magistrala zresetowana\r\n");
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <Reset_Sensors+0x38>)
 8000a96:	f005 f9db 	bl	8005e50 <puts>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	08006e5c 	.word	0x08006e5c

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad6:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f9c1 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USART2_IRQHandler+0x10>)
 8000b62:	f002 fbd1 	bl	8003308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200020ec 	.word	0x200020ec

08000b70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
  }

  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f005 f914 	bl	8005e70 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20018000 	.word	0x20018000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200020e8 	.word	0x200020e8
 8000c7c:	200022c8 	.word	0x200022c8

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <MX_USART2_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x58>)
 8000ce8:	f002 fa36 	bl	8003158 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f7ff fed9 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200020ec 	.word	0x200020ec
 8000d00:	40004400 	.word	0x40004400

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ac      	sub	sp, #176	@ 0xb0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2288      	movs	r2, #136	@ 0x88
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 f89b 	bl	8005e60 <memset>
  if(uartHandle->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a25      	ldr	r2, [pc, #148]	@ (8000dc4 <HAL_UART_MspInit+0xc0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d143      	bne.n	8000dbc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fd4d 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d4c:	f7ff feac 	bl	8000aa8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d50:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_UART_MspInit+0xc4>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <HAL_UART_MspInit+0xc4>)
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <HAL_UART_MspInit+0xc4>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_UART_MspInit+0xc4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <HAL_UART_MspInit+0xc4>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_UART_MspInit+0xc4>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d80:	230c      	movs	r3, #12
 8000d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da8:	f000 fa6a 	bl	8001280 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2026      	movs	r0, #38	@ 0x26
 8000db2:	f000 f9b0 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db6:	2026      	movs	r0, #38	@ 0x26
 8000db8:	f000 f9c9 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	37b0      	adds	r7, #176	@ 0xb0
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40021000 	.word	0x40021000

08000dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd0:	f7ff ff56 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	@ (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f005 f83f 	bl	8005e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfe:	f7ff fcdf 	bl	80007c0 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e10:	0801c920 	.word	0x0801c920
  ldr r2, =_sbss
 8000e14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e18:	200022c4 	.word	0x200022c4

08000e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_2_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_Init+0x3c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_Init+0x3c>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f962 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f80f 	bl	8000e60 <HAL_InitTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e001      	b.n	8000e52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4e:	f7ff fe31 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_InitTick+0x6c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d023      	beq.n	8000ebc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_InitTick+0x70>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_InitTick+0x6c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f96d 	bl	800116a <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10f      	bne.n	8000eb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d809      	bhi.n	8000eb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea4:	f000 f937 	bl	8001116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_InitTick+0x74>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e007      	b.n	8000ec0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e004      	b.n	8000ec0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e001      	b.n	8000ec0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20002174 	.word	0x20002174

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20002174 	.word	0x20002174

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d008      	beq.n	80011ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2204      	movs	r2, #4
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e022      	b.n	80011f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 020e 	bic.w	r2, r2, #14
 80011ba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d0:	f003 021c 	and.w	r2, r3, #28
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f202 	lsl.w	r2, r1, r2
 80011de:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d005      	beq.n	8001222 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e029      	b.n	8001276 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 020e 	bic.w	r2, r2, #14
 8001230:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f003 021c 	and.w	r2, r3, #28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
    }
  }
  return status;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e17f      	b.n	8001590 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8171 	beq.w	800158a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x40>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d118      	bne.n	8001360 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80ac 	beq.w	800158a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b5f      	ldr	r3, [pc, #380]	@ (80015b0 <HAL_GPIO_Init+0x330>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	4a5e      	ldr	r2, [pc, #376]	@ (80015b0 <HAL_GPIO_Init+0x330>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6613      	str	r3, [r2, #96]	@ 0x60
 800143e:	4b5c      	ldr	r3, [pc, #368]	@ (80015b0 <HAL_GPIO_Init+0x330>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144a:	4a5a      	ldr	r2, [pc, #360]	@ (80015b4 <HAL_GPIO_Init+0x334>)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x242>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4f      	ldr	r2, [pc, #316]	@ (80015b8 <HAL_GPIO_Init+0x338>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x23e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4e      	ldr	r2, [pc, #312]	@ (80015bc <HAL_GPIO_Init+0x33c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x23a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4d      	ldr	r2, [pc, #308]	@ (80015c0 <HAL_GPIO_Init+0x340>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x236>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4c      	ldr	r2, [pc, #304]	@ (80015c4 <HAL_GPIO_Init+0x344>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x232>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4b      	ldr	r2, [pc, #300]	@ (80015c8 <HAL_GPIO_Init+0x348>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x22e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4a      	ldr	r2, [pc, #296]	@ (80015cc <HAL_GPIO_Init+0x34c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x22a>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014c2:	2300      	movs	r3, #0
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d4:	4937      	ldr	r1, [pc, #220]	@ (80015b4 <HAL_GPIO_Init+0x334>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001506:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001530:	4a27      	ldr	r2, [pc, #156]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800155a:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f ae78 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000c00 	.word	0x48000c00
 80015c4:	48001000 	.word	0x48001000
 80015c8:	48001400 	.word	0x48001400
 80015cc:	48001800 	.word	0x48001800
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e08d      	b.n	8001732 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff f854 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	@ 0x24
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e006      	b.n	800168c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800168a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d108      	bne.n	80016a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	e007      	b.n	80016b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69d9      	ldr	r1, [r3, #28]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b08a      	sub	sp, #40	@ 0x28
 800173e:	af02      	add	r7, sp, #8
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	460b      	mov	r3, r1
 8001748:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b20      	cmp	r3, #32
 8001758:	f040 80f3 	bne.w	8001942 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800176a:	d101      	bne.n	8001770 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800176c:	2302      	movs	r3, #2
 800176e:	e0e9      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_I2C_IsDeviceReady+0x44>
 800177a:	2302      	movs	r3, #2
 800177c:	e0e2      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2224      	movs	r2, #36	@ 0x24
 800178a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_I2C_IsDeviceReady+0x72>
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017aa:	e006      	b.n	80017ba <HAL_I2C_IsDeviceReady+0x80>
 80017ac:	897b      	ldrh	r3, [r7, #10]
 80017ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fb9e 	bl	8000f00 <HAL_GetTick>
 80017c4:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80017f2:	e034      	b.n	800185e <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017fa:	d01a      	beq.n	8001832 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017fc:	f7ff fb80 	bl	8000f00 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d302      	bcc.n	8001812 <HAL_I2C_IsDeviceReady+0xd8>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	f043 0220 	orr.w	r2, r3, #32
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e088      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	2b20      	cmp	r3, #32
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b10      	cmp	r3, #16
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800185e:	7ffb      	ldrb	r3, [r7, #31]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <HAL_I2C_IsDeviceReady+0x130>
 8001864:	7fbb      	ldrb	r3, [r7, #30]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0c4      	beq.n	80017f4 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b10      	cmp	r3, #16
 8001876:	d01a      	beq.n	80018ae <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	2120      	movs	r1, #32
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f862 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e058      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e04a      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2120      	movs	r1, #32
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f847 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e03d      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2210      	movs	r2, #16
 80018ce:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2220      	movs	r2, #32
 80018d6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d118      	bne.n	8001912 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018ee:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2120      	movs	r1, #32
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f826 	bl	800194c <I2C_WaitOnFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e01c      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2220      	movs	r2, #32
 8001910:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	f63f af39 	bhi.w	8001794 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001942:	2302      	movs	r3, #2
  }
}
 8001944:	4618      	mov	r0, r3
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800195c:	e031      	b.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001964:	d02d      	beq.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff facb 	bl	8000f00 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d122      	bne.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4013      	ands	r3, r2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	429a      	cmp	r2, r3
 8001998:	d113      	bne.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f043 0220 	orr.w	r2, r3, #32
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4013      	ands	r3, r2
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d0be      	beq.n	800195e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d138      	bne.n	8001a72 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e032      	b.n	8001a74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2224      	movs	r2, #36	@ 0x24
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d139      	bne.n	8001b0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e033      	b.n	8001b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ad2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000

08001b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b42:	d130      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b50:	d038      	beq.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2232      	movs	r2, #50	@ 0x32
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9b      	lsrs	r3, r3, #18
 8001b74:	3301      	adds	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b78:	e002      	b.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8c:	d102      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f2      	bne.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba0:	d110      	bne.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e00f      	b.n	8001bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb2:	d007      	beq.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bbc:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	431bde83 	.word	0x431bde83

08001be0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e3ca      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf2:	4b97      	ldr	r3, [pc, #604]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfc:	4b94      	ldr	r3, [pc, #592]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80e4 	beq.w	8001ddc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4a>
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	f040 808b 	bne.w	8001d38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f040 8087 	bne.w	8001d38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x62>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e3a2      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	4b82      	ldr	r3, [pc, #520]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <HAL_RCC_OscConfig+0x7c>
 8001c52:	4b7f      	ldr	r3, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c5a:	e005      	b.n	8001c68 <HAL_RCC_OscConfig+0x88>
 8001c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d223      	bcs.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fd55 	bl	8002720 <RCC_SetFlashLatencyFromMSIRange>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e383      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c80:	4b73      	ldr	r3, [pc, #460]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a72      	ldr	r2, [pc, #456]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b70      	ldr	r3, [pc, #448]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	496d      	ldr	r1, [pc, #436]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	4968      	ldr	r1, [pc, #416]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
 8001cb2:	e025      	b.n	8001d00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb4:	4b66      	ldr	r3, [pc, #408]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a65      	ldr	r2, [pc, #404]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b63      	ldr	r3, [pc, #396]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4960      	ldr	r1, [pc, #384]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	495b      	ldr	r1, [pc, #364]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fd15 	bl	8002720 <RCC_SetFlashLatencyFromMSIRange>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e343      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d00:	f000 fc4a 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b52      	ldr	r3, [pc, #328]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	4950      	ldr	r1, [pc, #320]	@ (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e58 <HAL_RCC_OscConfig+0x278>)
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d20:	4b4e      	ldr	r3, [pc, #312]	@ (8001e5c <HAL_RCC_OscConfig+0x27c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f89b 	bl	8000e60 <HAL_InitTick>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d052      	beq.n	8001dda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	e327      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d032      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d40:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a42      	ldr	r2, [pc, #264]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f8d8 	bl	8000f00 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d54:	f7ff f8d4 	bl	8000f00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e310      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d66:	4b3a      	ldr	r3, [pc, #232]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d72:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a36      	ldr	r2, [pc, #216]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4931      	ldr	r1, [pc, #196]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d90:	4b2f      	ldr	r3, [pc, #188]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	492c      	ldr	r1, [pc, #176]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
 8001da4:	e01a      	b.n	8001ddc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a29      	ldr	r2, [pc, #164]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db2:	f7ff f8a5 	bl	8000f00 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dba:	f7ff f8a1 	bl	8000f00 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e2dd      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x1da>
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d074      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x21a>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d10e      	bne.n	8001e12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d064      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d160      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e2ba      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x24a>
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e026      	b.n	8001e78 <HAL_RCC_OscConfig+0x298>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e32:	d115      	bne.n	8001e60 <HAL_RCC_OscConfig+0x280>
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a02      	ldr	r2, [pc, #8]	@ (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x298>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08007198 	.word	0x08007198
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	4ba0      	ldr	r3, [pc, #640]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a9f      	ldr	r2, [pc, #636]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b9d      	ldr	r3, [pc, #628]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a9c      	ldr	r2, [pc, #624]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f83e 	bl	8000f00 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff f83a 	bl	8000f00 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e276      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9a:	4b92      	ldr	r3, [pc, #584]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2a8>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f82a 	bl	8000f00 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f826 	bl	8000f00 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e262      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec2:	4b88      	ldr	r3, [pc, #544]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2d0>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d060      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x310>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d119      	bne.n	8001f1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d116      	bne.n	8001f1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef0:	4b7c      	ldr	r3, [pc, #496]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_OscConfig+0x328>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e23f      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b76      	ldr	r3, [pc, #472]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	4973      	ldr	r1, [pc, #460]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f1c:	e040      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d023      	beq.n	8001f6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f26:	4b6f      	ldr	r3, [pc, #444]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6e      	ldr	r2, [pc, #440]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ffe5 	bl	8000f00 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ffe1 	bl	8000f00 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e21d      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4c:	4b65      	ldr	r3, [pc, #404]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b62      	ldr	r3, [pc, #392]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	495f      	ldr	r1, [pc, #380]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
 8001f6c:	e018      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a5c      	ldr	r2, [pc, #368]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe ffc1 	bl	8000f00 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7fe ffbd 	bl	8000f00 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1f9      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f94:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03c      	beq.n	8002026 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01c      	beq.n	8001fee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fba:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff9c 	bl	8000f00 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe ff98 	bl	8000f00 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1d4      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fde:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ef      	beq.n	8001fcc <HAL_RCC_OscConfig+0x3ec>
 8001fec:	e01b      	b.n	8002026 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7fe ff7f 	bl	8000f00 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002006:	f7fe ff7b 	bl	8000f00 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1b7      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002018:	4b32      	ldr	r3, [pc, #200]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ef      	bne.n	8002006 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80a6 	beq.w	8002180 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002048:	4a26      	ldr	r2, [pc, #152]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002050:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_RCC_OscConfig+0x508>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d118      	bne.n	800209e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_RCC_OscConfig+0x508>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_RCC_OscConfig+0x508>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002078:	f7fe ff42 	bl	8000f00 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7fe ff3e 	bl	8000f00 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e17a      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_RCC_OscConfig+0x508>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d8>
 80020a6:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b6:	e029      	b.n	800210c <HAL_RCC_OscConfig+0x52c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d115      	bne.n	80020ec <HAL_RCC_OscConfig+0x50c>
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	4a03      	ldr	r2, [pc, #12]	@ (80020e4 <HAL_RCC_OscConfig+0x504>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e0:	e014      	b.n	800210c <HAL_RCC_OscConfig+0x52c>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	4b9c      	ldr	r3, [pc, #624]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f2:	4a9b      	ldr	r2, [pc, #620]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020fc:	4b98      	ldr	r3, [pc, #608]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	4a97      	ldr	r2, [pc, #604]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d016      	beq.n	8002142 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fef4 	bl	8000f00 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe fef0 	bl	8000f00 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e12a      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002132:	4b8b      	ldr	r3, [pc, #556]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ed      	beq.n	800211c <HAL_RCC_OscConfig+0x53c>
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe fedd 	bl	8000f00 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fed9 	bl	8000f00 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e113      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002160:	4b7f      	ldr	r3, [pc, #508]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ed      	bne.n	800214a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4b7a      	ldr	r3, [pc, #488]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	4a79      	ldr	r2, [pc, #484]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800217e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80fe 	beq.w	8002386 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	2b02      	cmp	r3, #2
 8002190:	f040 80d0 	bne.w	8002334 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002194:	4b72      	ldr	r3, [pc, #456]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d130      	bne.n	800220a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	3b01      	subs	r3, #1
 80021b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d127      	bne.n	800220a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11f      	bne.n	800220a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021d4:	2a07      	cmp	r2, #7
 80021d6:	bf14      	ite	ne
 80021d8:	2201      	movne	r2, #1
 80021da:	2200      	moveq	r2, #0
 80021dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021de:	4293      	cmp	r3, r2
 80021e0:	d113      	bne.n	800220a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d109      	bne.n	800220a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d06e      	beq.n	80022e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d069      	beq.n	80022e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002210:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800221c:	4b50      	ldr	r3, [pc, #320]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0ad      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800222c:	4b4c      	ldr	r3, [pc, #304]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4b      	ldr	r2, [pc, #300]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002238:	f7fe fe62 	bl	8000f00 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fe5e 	bl	8000f00 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e09a      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225e:	4b40      	ldr	r3, [pc, #256]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b40      	ldr	r3, [pc, #256]	@ (8002364 <HAL_RCC_OscConfig+0x784>)
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800226e:	3a01      	subs	r2, #1
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002278:	0212      	lsls	r2, r2, #8
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002280:	0852      	lsrs	r2, r2, #1
 8002282:	3a01      	subs	r2, #1
 8002284:	0552      	lsls	r2, r2, #21
 8002286:	4311      	orrs	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800228c:	0852      	lsrs	r2, r2, #1
 800228e:	3a01      	subs	r2, #1
 8002290:	0652      	lsls	r2, r2, #25
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002298:	0912      	lsrs	r2, r2, #4
 800229a:	0452      	lsls	r2, r2, #17
 800229c:	430a      	orrs	r2, r1
 800229e:	4930      	ldr	r1, [pc, #192]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022bc:	f7fe fe20 	bl	8000f00 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fe1c 	bl	8000f00 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e058      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e2:	e050      	b.n	8002386 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e04f      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d148      	bne.n	8002386 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a16      	ldr	r2, [pc, #88]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800230a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800230c:	f7fe fdf8 	bl	8000f00 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe fdf4 	bl	8000f00 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e030      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x734>
 8002332:	e028      	b.n	8002386 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d023      	beq.n	8002382 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <HAL_RCC_OscConfig+0x780>)
 8002340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fddb 	bl	8000f00 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	e00c      	b.n	8002368 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe fdd7 	bl	8000f00 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d905      	bls.n	8002368 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
 8002360:	40021000 	.word	0x40021000
 8002364:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_OscConfig+0x7b0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ec      	bne.n	800234e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_OscConfig+0x7b0>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4905      	ldr	r1, [pc, #20]	@ (8002390 <HAL_RCC_OscConfig+0x7b0>)
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_RCC_OscConfig+0x7b4>)
 800237c:	4013      	ands	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
 8002380:	e001      	b.n	8002386 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	feeefffc 	.word	0xfeeefffc

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0e7      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b75      	ldr	r3, [pc, #468]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b72      	ldr	r3, [pc, #456]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4970      	ldr	r1, [pc, #448]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cf      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4b66      	ldr	r3, [pc, #408]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d908      	bls.n	800240a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b63      	ldr	r3, [pc, #396]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4960      	ldr	r1, [pc, #384]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d04c      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d121      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0a6      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002436:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e09a      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244e:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e08e      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245e:	4b4a      	ldr	r3, [pc, #296]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e086      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b46      	ldr	r3, [pc, #280]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4943      	ldr	r1, [pc, #268]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fd3e 	bl	8000f00 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fd3a 	bl	8000f00 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e06e      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d208      	bcs.n	80024de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	492b      	ldr	r1, [pc, #172]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024de:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d210      	bcs.n	800250e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ec:	4b25      	ldr	r3, [pc, #148]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	4923      	ldr	r1, [pc, #140]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <HAL_RCC_ClockConfig+0x1ec>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e036      	b.n	800257c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4918      	ldr	r1, [pc, #96]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002538:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4910      	ldr	r1, [pc, #64]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800254c:	f000 f824 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	490b      	ldr	r1, [pc, #44]	@ (800258c <HAL_RCC_ClockConfig+0x1f4>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1f8>)
 800256a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1fc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fc75 	bl	8000e60 <HAL_InitTick>
 8002576:	4603      	mov	r3, r0
 8002578:	72fb      	strb	r3, [r7, #11]

  return status;
 800257a:	7afb      	ldrb	r3, [r7, #11]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
 800258c:	08007198 	.word	0x08007198
 8002590:	20000000 	.word	0x20000000
 8002594:	20000004 	.word	0x20000004

08002598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	@ 0x24
 800259c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4b3e      	ldr	r3, [pc, #248]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x34>
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d121      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d11e      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d8:	4b31      	ldr	r3, [pc, #196]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e005      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10d      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d102      	bne.n	8002616 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002610:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e004      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d101      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800261c:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x114>)
 800261e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d134      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0xa6>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d003      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0xac>
 800263c:	e005      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800263e:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	e005      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002646:	617b      	str	r3, [r7, #20]
      break;
 8002648:	e002      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	617b      	str	r3, [r7, #20]
      break;
 800264e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002650:	4b13      	ldr	r3, [pc, #76]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	3301      	adds	r3, #1
 800265c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800265e:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	fb03 f202 	mul.w	r2, r3, r2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	0e5b      	lsrs	r3, r3, #25
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	3301      	adds	r3, #1
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002690:	69bb      	ldr	r3, [r7, #24]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	080071b0 	.word	0x080071b0
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4904      	ldr	r1, [pc, #16]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080071a8 	.word	0x080071a8

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f8:	f7ff ffda 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4904      	ldr	r1, [pc, #16]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x28>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	080071a8 	.word	0x080071a8

08002720 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800272c:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002738:	f7ff f9ee 	bl	8001b18 <HAL_PWREx_GetVoltageRange>
 800273c:	6178      	str	r0, [r7, #20]
 800273e:	e014      	b.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	4a24      	ldr	r2, [pc, #144]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	@ 0x58
 800274c:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002758:	f7ff f9de 	bl	8001b18 <HAL_PWREx_GetVoltageRange>
 800275c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002762:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002770:	d10b      	bne.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b80      	cmp	r3, #128	@ 0x80
 8002776:	d919      	bls.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2ba0      	cmp	r3, #160	@ 0xa0
 800277c:	d902      	bls.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800277e:	2302      	movs	r3, #2
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e013      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e010      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b80      	cmp	r3, #128	@ 0x80
 800278e:	d902      	bls.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002790:	2303      	movs	r3, #3
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e00a      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b80      	cmp	r3, #128	@ 0x80
 800279a:	d102      	bne.n	80027a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800279c:	2302      	movs	r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e004      	b.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b70      	cmp	r3, #112	@ 0x70
 80027a6:	d101      	bne.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a8:	2301      	movs	r3, #1
 80027aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 0207 	bic.w	r2, r3, #7
 80027b4:	4909      	ldr	r1, [pc, #36]	@ (80027dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40022000 	.word	0x40022000

080027e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ec:	2300      	movs	r3, #0
 80027ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d041      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002800:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002804:	d02a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002806:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800280a:	d824      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800280c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002810:	d008      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002812:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002816:	d81e      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800281c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002820:	d010      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002822:	e018      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002824:	4b86      	ldr	r3, [pc, #536]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a85      	ldr	r2, [pc, #532]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002830:	e015      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fabb 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002842:	e00c      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3320      	adds	r3, #32
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fba6 	bl	8002f9c <RCCEx_PLLSAI2_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002854:	e003      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	74fb      	strb	r3, [r7, #19]
      break;
 800285a:	e000      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800285c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002864:	4b76      	ldr	r3, [pc, #472]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002872:	4973      	ldr	r1, [pc, #460]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800287a:	e001      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d041      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002890:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002894:	d02a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002896:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800289a:	d824      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800289c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028a6:	d81e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b0:	d010      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028b2:	e018      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b4:	4b62      	ldr	r3, [pc, #392]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a61      	ldr	r2, [pc, #388]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c0:	e015      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fa73 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d2:	e00c      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3320      	adds	r3, #32
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fb5e 	bl	8002f9c <RCCEx_PLLSAI2_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e4:	e003      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	74fb      	strb	r3, [r7, #19]
      break;
 80028ea:	e000      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f4:	4b52      	ldr	r3, [pc, #328]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002902:	494f      	ldr	r1, [pc, #316]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800290a:	e001      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a0 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002922:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002938:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	4a40      	ldr	r2, [pc, #256]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6593      	str	r3, [r2, #88]	@ 0x58
 8002944:	4b3e      	ldr	r3, [pc, #248]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002950:	2301      	movs	r3, #1
 8002952:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002954:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3a      	ldr	r2, [pc, #232]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002960:	f7fe face 	bl	8000f00 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002966:	e009      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe faca 	bl	8000f00 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d902      	bls.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	74fb      	strb	r3, [r7, #19]
        break;
 800297a:	e005      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ef      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d15c      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800298e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002998:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d019      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ac:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b8:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	4a20      	ldr	r2, [pc, #128]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d8:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fa89 	bl	8000f00 <HAL_GetTick>
 80029ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f0:	e00b      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fa85 	bl	8000f00 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d902      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	74fb      	strb	r3, [r7, #19]
            break;
 8002a08:	e006      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ec      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2e:	4904      	ldr	r1, [pc, #16]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a36:	e009      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4c:	7c7b      	ldrb	r3, [r7, #17]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4b9e      	ldr	r3, [pc, #632]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	4a9d      	ldr	r2, [pc, #628]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6a:	4b98      	ldr	r3, [pc, #608]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f023 0203 	bic.w	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a78:	4994      	ldr	r1, [pc, #592]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 020c 	bic.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9a:	498c      	ldr	r1, [pc, #560]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aae:	4b87      	ldr	r3, [pc, #540]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	4983      	ldr	r1, [pc, #524]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	497b      	ldr	r1, [pc, #492]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002af2:	4b76      	ldr	r3, [pc, #472]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b00:	4972      	ldr	r1, [pc, #456]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b14:	4b6d      	ldr	r3, [pc, #436]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	496a      	ldr	r1, [pc, #424]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b36:	4b65      	ldr	r3, [pc, #404]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	4961      	ldr	r1, [pc, #388]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b58:	4b5c      	ldr	r3, [pc, #368]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b66:	4959      	ldr	r1, [pc, #356]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7a:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b88:	4950      	ldr	r1, [pc, #320]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002baa:	4948      	ldr	r1, [pc, #288]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	493f      	ldr	r1, [pc, #252]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d028      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bee:	4937      	ldr	r1, [pc, #220]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b32      	ldr	r3, [pc, #200]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
 8002c0c:	e011      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f8c8 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	491f      	ldr	r1, [pc, #124]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c68:	60d3      	str	r3, [r2, #12]
 8002c6a:	e011      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f899 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02b      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002caa:	4908      	ldr	r1, [pc, #32]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cba:	d109      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a02      	ldr	r2, [pc, #8]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc6:	60d3      	str	r3, [r2, #12]
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f867 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02f      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d00:	4b2b      	ldr	r3, [pc, #172]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d0e:	4928      	ldr	r1, [pc, #160]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f844 	bl	8002db4 <RCCEx_PLLSAI1_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d014      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	74bb      	strb	r3, [r7, #18]
 8002d3a:	e011      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3320      	adds	r3, #32
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f925 	bl	8002f9c <RCCEx_PLLSAI2_Config>
 8002d52:	4603      	mov	r3, r0
 8002d54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d7a:	490d      	ldr	r1, [pc, #52]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9e:	4904      	ldr	r1, [pc, #16]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002da6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dc2:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dce:	4b72      	ldr	r3, [pc, #456]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
       ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002de6:	4b6c      	ldr	r3, [pc, #432]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
       ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d047      	beq.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e044      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d018      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x86>
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d825      	bhi.n	8002e58 <RCCEx_PLLSAI1_Config+0xa4>
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d002      	beq.n	8002e16 <RCCEx_PLLSAI1_Config+0x62>
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d009      	beq.n	8002e28 <RCCEx_PLLSAI1_Config+0x74>
 8002e14:	e020      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e16:	4b60      	ldr	r3, [pc, #384]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e26:	e01a      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e28:	4b5b      	ldr	r3, [pc, #364]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e38:	e013      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e3a:	4b57      	ldr	r3, [pc, #348]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e46:	4b54      	ldr	r3, [pc, #336]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e56:	e006      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e004      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	430b      	orrs	r3, r1
 8002e84:	4944      	ldr	r1, [pc, #272]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d17d      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e90:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a40      	ldr	r2, [pc, #256]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe f830 	bl	8000f00 <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea2:	e009      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea4:	f7fe f82c 	bl	8000f00 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d902      	bls.n	8002eb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb6:	e005      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb8:	4b37      	ldr	r3, [pc, #220]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ef      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d160      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed0:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	0211      	lsls	r1, r2, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	0912      	lsrs	r2, r2, #4
 8002ee8:	0452      	lsls	r2, r2, #17
 8002eea:	430a      	orrs	r2, r1
 8002eec:	492a      	ldr	r1, [pc, #168]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	610b      	str	r3, [r1, #16]
 8002ef2:	e027      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d112      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002efa:	4b27      	ldr	r3, [pc, #156]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f02:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	0211      	lsls	r1, r2, #8
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6912      	ldr	r2, [r2, #16]
 8002f10:	0852      	lsrs	r2, r2, #1
 8002f12:	3a01      	subs	r2, #1
 8002f14:	0552      	lsls	r2, r2, #21
 8002f16:	430a      	orrs	r2, r1
 8002f18:	491f      	ldr	r1, [pc, #124]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]
 8002f1e:	e011      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	0211      	lsls	r1, r2, #8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6952      	ldr	r2, [r2, #20]
 8002f36:	0852      	lsrs	r2, r2, #1
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0652      	lsls	r2, r2, #25
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	4916      	ldr	r1, [pc, #88]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fd ffd6 	bl	8000f00 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f58:	f7fd ffd2 	bl	8000f00 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
          break;
 8002f6a:	e005      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4904      	ldr	r1, [pc, #16]	@ (8002f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000

08002f9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002faa:	4b6a      	ldr	r3, [pc, #424]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fb6:	4b67      	ldr	r3, [pc, #412]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d10d      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fce:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d047      	beq.n	8003072 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e044      	b.n	8003072 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d018      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0x86>
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d825      	bhi.n	8003040 <RCCEx_PLLSAI2_Config+0xa4>
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d002      	beq.n	8002ffe <RCCEx_PLLSAI2_Config+0x62>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d009      	beq.n	8003010 <RCCEx_PLLSAI2_Config+0x74>
 8002ffc:	e020      	b.n	8003040 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ffe:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11d      	bne.n	8003046 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300e:	e01a      	b.n	8003046 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003010:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003020:	e013      	b.n	800304a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003022:	4b4c      	ldr	r3, [pc, #304]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800302e:	4b49      	ldr	r3, [pc, #292]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800303e:	e006      	b.n	800304e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e004      	b.n	8003050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003046:	bf00      	nop
 8003048:	e002      	b.n	8003050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003056:	4b3f      	ldr	r3, [pc, #252]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	430b      	orrs	r3, r1
 800306c:	4939      	ldr	r1, [pc, #228]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d167      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a35      	ldr	r2, [pc, #212]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fd ff3c 	bl	8000f00 <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800308a:	e009      	b.n	80030a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800308c:	f7fd ff38 	bl	8000f00 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	73fb      	strb	r3, [r7, #15]
        break;
 800309e:	e005      	b.n	80030ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ef      	bne.n	800308c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d14a      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030b8:	4b26      	ldr	r3, [pc, #152]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	0211      	lsls	r1, r2, #8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	0912      	lsrs	r2, r2, #4
 80030d0:	0452      	lsls	r2, r2, #17
 80030d2:	430a      	orrs	r2, r1
 80030d4:	491f      	ldr	r1, [pc, #124]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	614b      	str	r3, [r1, #20]
 80030da:	e011      	b.n	8003100 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6892      	ldr	r2, [r2, #8]
 80030ec:	0211      	lsls	r1, r2, #8
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6912      	ldr	r2, [r2, #16]
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0652      	lsls	r2, r2, #25
 80030f8:	430a      	orrs	r2, r1
 80030fa:	4916      	ldr	r1, [pc, #88]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a13      	ldr	r2, [pc, #76]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fd fef8 	bl	8000f00 <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003112:	e009      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003114:	f7fd fef4 	bl	8000f00 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	73fb      	strb	r3, [r7, #15]
          break;
 8003126:	e005      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003128:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ef      	beq.n	8003114 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4904      	ldr	r1, [pc, #16]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000

08003158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e040      	b.n	80031ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fdc2 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	@ 0x24
 8003184:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fe74 	bl	8003e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fbb9 	bl	800391c <UART_SetConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e01b      	b.n	80031ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fef3 	bl	8003fd0 <UART_CheckIdleState>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	@ 0x28
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003208:	2b20      	cmp	r3, #32
 800320a:	d177      	bne.n	80032fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_UART_Transmit+0x24>
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e070      	b.n	80032fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2221      	movs	r2, #33	@ 0x21
 8003228:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800322a:	f7fd fe69 	bl	8000f00 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003248:	d108      	bne.n	800325c <HAL_UART_Transmit+0x68>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e003      	b.n	8003264 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003264:	e02f      	b.n	80032c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	@ 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 ff55 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e03b      	b.n	80032fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003298:	b292      	uxth	r2, r2
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	3302      	adds	r3, #2
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e007      	b.n	80032b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3301      	adds	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1c9      	bne.n	8003266 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2140      	movs	r1, #64	@ 0x40
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 ff1f 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e005      	b.n	80032fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0ba      	sub	sp, #232	@ 0xe8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800332e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003332:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003336:	4013      	ands	r3, r2
 8003338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800333c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d115      	bne.n	8003370 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00f      	beq.n	8003370 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 82ae 	beq.w	80038c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
      }
      return;
 800336e:	e2a8      	b.n	80038c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8117 	beq.w	80035a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800337a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003386:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800338a:	4b85      	ldr	r3, [pc, #532]	@ (80035a0 <HAL_UART_IRQHandler+0x298>)
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 810a 	beq.w	80035a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d011      	beq.n	80033c4 <HAL_UART_IRQHandler+0xbc>
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2201      	movs	r2, #1
 80033b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d011      	beq.n	80033f4 <HAL_UART_IRQHandler+0xec>
 80033d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2202      	movs	r2, #2
 80033e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ea:	f043 0204 	orr.w	r2, r3, #4
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d011      	beq.n	8003424 <HAL_UART_IRQHandler+0x11c>
 8003400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2204      	movs	r2, #4
 8003412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341a:	f043 0202 	orr.w	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d017      	beq.n	8003460 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800343c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003440:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2208      	movs	r2, #8
 800344e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003456:	f043 0208 	orr.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_UART_IRQHandler+0x18a>
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003470:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8214 	beq.w	80038c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034da:	2b40      	cmp	r3, #64	@ 0x40
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04f      	beq.n	800358a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fe7f 	bl	80041ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fa:	2b40      	cmp	r3, #64	@ 0x40
 80034fc:	d141      	bne.n	8003582 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800351c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3308      	adds	r3, #8
 8003526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800352a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800352e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1d9      	bne.n	80034fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354e:	2b00      	cmp	r3, #0
 8003550:	d013      	beq.n	800357a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <HAL_UART_IRQHandler+0x29c>)
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fe4d 	bl	80011fe <HAL_DMA_Abort_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003574:	4610      	mov	r0, r2
 8003576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	e00f      	b.n	800359a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9b8 	bl	80038f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	e00b      	b.n	800359a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9b4 	bl	80038f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	e007      	b.n	800359a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9b0 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003598:	e195      	b.n	80038c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359a:	bf00      	nop
    return;
 800359c:	e193      	b.n	80038c6 <HAL_UART_IRQHandler+0x5be>
 800359e:	bf00      	nop
 80035a0:	04000120 	.word	0x04000120
 80035a4:	080042b7 	.word	0x080042b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f040 814e 	bne.w	800384e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8147 	beq.w	800384e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8140 	beq.w	800384e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	f040 80b8 	bne.w	8003756 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8167 	beq.w	80038ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003606:	429a      	cmp	r2, r3
 8003608:	f080 815f 	bcs.w	80038ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003612:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8086 	bne.w	8003734 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800363c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003656:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800365e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800366a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1da      	bne.n	8003628 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003696:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800369a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800369e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e1      	bne.n	8003672 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3308      	adds	r3, #8
 80036b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e3      	bne.n	80036ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003716:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003718:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800371c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e4      	bne.n	80036f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fd27 	bl	8001182 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003746:	b29b      	uxth	r3, r3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8d8 	bl	8003904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003754:	e0b9      	b.n	80038ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003762:	b29b      	uxth	r3, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80ab 	beq.w	80038ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a6 	beq.w	80038ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003792:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003796:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e4      	bne.n	8003782 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	623b      	str	r3, [r7, #32]
   return(result);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3308      	adds	r3, #8
 80037d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e3      	bne.n	80037b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	60fb      	str	r3, [r7, #12]
   return(result);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f023 0310 	bic.w	r3, r3, #16
 8003818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	69b9      	ldr	r1, [r7, #24]
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	617b      	str	r3, [r7, #20]
   return(result);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e4      	bne.n	8003804 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f85c 	bl	8003904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800384c:	e03f      	b.n	80038ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00e      	beq.n	8003878 <HAL_UART_IRQHandler+0x570>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800386e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fd60 	bl	8004336 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003876:	e02d      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01c      	beq.n	80038d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
    }
    return;
 80038a0:	e017      	b.n	80038d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
 80038ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fd11 	bl	80042e2 <UART_EndTransmit_IT>
    return;
 80038c0:	e008      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80038c2:	bf00      	nop
 80038c4:	e006      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80038d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038d4:	37e8      	adds	r7, #232	@ 0xe8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003920:	b08a      	sub	sp, #40	@ 0x28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4ba4      	ldr	r3, [pc, #656]	@ (8003bdc <UART_SetConfig+0x2c0>)
 800394c:	4013      	ands	r3, r2
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003954:	430b      	orrs	r3, r1
 8003956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a99      	ldr	r2, [pc, #612]	@ (8003be0 <UART_SetConfig+0x2c4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	4313      	orrs	r3, r2
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003998:	430a      	orrs	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a90      	ldr	r2, [pc, #576]	@ (8003be4 <UART_SetConfig+0x2c8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d126      	bne.n	80039f4 <UART_SetConfig+0xd8>
 80039a6:	4b90      	ldr	r3, [pc, #576]	@ (8003be8 <UART_SetConfig+0x2cc>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d81b      	bhi.n	80039ec <UART_SetConfig+0xd0>
 80039b4:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <UART_SetConfig+0xa0>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039e5 	.word	0x080039e5
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e116      	b.n	8003c02 <UART_SetConfig+0x2e6>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e112      	b.n	8003c02 <UART_SetConfig+0x2e6>
 80039dc:	2304      	movs	r3, #4
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e10e      	b.n	8003c02 <UART_SetConfig+0x2e6>
 80039e4:	2308      	movs	r3, #8
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ea:	e10a      	b.n	8003c02 <UART_SetConfig+0x2e6>
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f2:	e106      	b.n	8003c02 <UART_SetConfig+0x2e6>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7c      	ldr	r2, [pc, #496]	@ (8003bec <UART_SetConfig+0x2d0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d138      	bne.n	8003a70 <UART_SetConfig+0x154>
 80039fe:	4b7a      	ldr	r3, [pc, #488]	@ (8003be8 <UART_SetConfig+0x2cc>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d82d      	bhi.n	8003a68 <UART_SetConfig+0x14c>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <UART_SetConfig+0xf8>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a69 	.word	0x08003a69
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a51 	.word	0x08003a51
 8003a38:	08003a69 	.word	0x08003a69
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a69 	.word	0x08003a69
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4e:	e0d8      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a56:	e0d4      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5e:	e0d0      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003a60:	2308      	movs	r3, #8
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a66:	e0cc      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6e:	e0c8      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <UART_SetConfig+0x2d4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d125      	bne.n	8003ac6 <UART_SetConfig+0x1aa>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003be8 <UART_SetConfig+0x2cc>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a84:	2b30      	cmp	r3, #48	@ 0x30
 8003a86:	d016      	beq.n	8003ab6 <UART_SetConfig+0x19a>
 8003a88:	2b30      	cmp	r3, #48	@ 0x30
 8003a8a:	d818      	bhi.n	8003abe <UART_SetConfig+0x1a2>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d00a      	beq.n	8003aa6 <UART_SetConfig+0x18a>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d814      	bhi.n	8003abe <UART_SetConfig+0x1a2>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <UART_SetConfig+0x182>
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d008      	beq.n	8003aae <UART_SetConfig+0x192>
 8003a9c:	e00f      	b.n	8003abe <UART_SetConfig+0x1a2>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa4:	e0ad      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aac:	e0a9      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab4:	e0a5      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003abc:	e0a1      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003abe:	2310      	movs	r3, #16
 8003ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac4:	e09d      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <UART_SetConfig+0x2d8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d125      	bne.n	8003b1c <UART_SetConfig+0x200>
 8003ad0:	4b45      	ldr	r3, [pc, #276]	@ (8003be8 <UART_SetConfig+0x2cc>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8003adc:	d016      	beq.n	8003b0c <UART_SetConfig+0x1f0>
 8003ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae0:	d818      	bhi.n	8003b14 <UART_SetConfig+0x1f8>
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d00a      	beq.n	8003afc <UART_SetConfig+0x1e0>
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d814      	bhi.n	8003b14 <UART_SetConfig+0x1f8>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <UART_SetConfig+0x1d8>
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d008      	beq.n	8003b04 <UART_SetConfig+0x1e8>
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x1f8>
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afa:	e082      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b02:	e07e      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0a:	e07a      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b12:	e076      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1a:	e072      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a35      	ldr	r2, [pc, #212]	@ (8003bf8 <UART_SetConfig+0x2dc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12a      	bne.n	8003b7c <UART_SetConfig+0x260>
 8003b26:	4b30      	ldr	r3, [pc, #192]	@ (8003be8 <UART_SetConfig+0x2cc>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b34:	d01a      	beq.n	8003b6c <UART_SetConfig+0x250>
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d81b      	bhi.n	8003b74 <UART_SetConfig+0x258>
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b40:	d00c      	beq.n	8003b5c <UART_SetConfig+0x240>
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b46:	d815      	bhi.n	8003b74 <UART_SetConfig+0x258>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <UART_SetConfig+0x238>
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b50:	d008      	beq.n	8003b64 <UART_SetConfig+0x248>
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x258>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5a:	e052      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b62:	e04e      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6a:	e04a      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b72:	e046      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7a:	e042      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <UART_SetConfig+0x2c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d13a      	bne.n	8003bfc <UART_SetConfig+0x2e0>
 8003b86:	4b18      	ldr	r3, [pc, #96]	@ (8003be8 <UART_SetConfig+0x2cc>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b94:	d01a      	beq.n	8003bcc <UART_SetConfig+0x2b0>
 8003b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b9a:	d81b      	bhi.n	8003bd4 <UART_SetConfig+0x2b8>
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba0:	d00c      	beq.n	8003bbc <UART_SetConfig+0x2a0>
 8003ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba6:	d815      	bhi.n	8003bd4 <UART_SetConfig+0x2b8>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <UART_SetConfig+0x298>
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	d008      	beq.n	8003bc4 <UART_SetConfig+0x2a8>
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x2b8>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e022      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc2:	e01e      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e01a      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e016      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bda:	e012      	b.n	8003c02 <UART_SetConfig+0x2e6>
 8003bdc:	efff69f3 	.word	0xefff69f3
 8003be0:	40008000 	.word	0x40008000
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40004400 	.word	0x40004400
 8003bf0:	40004800 	.word	0x40004800
 8003bf4:	40004c00 	.word	0x40004c00
 8003bf8:	40005000 	.word	0x40005000
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a9f      	ldr	r2, [pc, #636]	@ (8003e84 <UART_SetConfig+0x568>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d17a      	bne.n	8003d02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d824      	bhi.n	8003c5e <UART_SetConfig+0x342>
 8003c14:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0x300>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c4f 	.word	0x08003c4f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c5f 	.word	0x08003c5f
 8003c38:	08003c5f 	.word	0x08003c5f
 8003c3c:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7fe fd42 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003c44:	61f8      	str	r0, [r7, #28]
        break;
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b8f      	ldr	r3, [pc, #572]	@ (8003e88 <UART_SetConfig+0x56c>)
 8003c4a:	61fb      	str	r3, [r7, #28]
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fca3 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8003c52:	61f8      	str	r0, [r7, #28]
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5a:	61fb      	str	r3, [r7, #28]
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80fb 	beq.w	8003e68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d305      	bcc.n	8003c8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d903      	bls.n	8003c96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c94:	e0e8      	b.n	8003e68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	4615      	mov	r5, r2
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	022b      	lsls	r3, r5, #8
 8003ca8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cac:	0222      	lsls	r2, r4, #8
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	6849      	ldr	r1, [r1, #4]
 8003cb2:	0849      	lsrs	r1, r1, #1
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4688      	mov	r8, r1
 8003cb8:	4681      	mov	r9, r0
 8003cba:	eb12 0a08 	adds.w	sl, r2, r8
 8003cbe:	eb43 0b09 	adc.w	fp, r3, r9
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	4659      	mov	r1, fp
 8003cd4:	f7fc facc 	bl	8000270 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ce6:	d308      	bcc.n	8003cfa <UART_SetConfig+0x3de>
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cee:	d204      	bcs.n	8003cfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	60da      	str	r2, [r3, #12]
 8003cf8:	e0b6      	b.n	8003e68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d00:	e0b2      	b.n	8003e68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d0a:	d15e      	bne.n	8003dca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d828      	bhi.n	8003d66 <UART_SetConfig+0x44a>
 8003d14:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0x400>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d67 	.word	0x08003d67
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7fe fcc2 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003d44:	61f8      	str	r0, [r7, #28]
        break;
 8003d46:	e014      	b.n	8003d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7fe fcd4 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	61f8      	str	r0, [r7, #28]
        break;
 8003d4e:	e010      	b.n	8003d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	@ (8003e88 <UART_SetConfig+0x56c>)
 8003d52:	61fb      	str	r3, [r7, #28]
        break;
 8003d54:	e00d      	b.n	8003d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7fe fc1f 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8003d5a:	61f8      	str	r0, [r7, #28]
        break;
 8003d5c:	e009      	b.n	8003d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d62:	61fb      	str	r3, [r7, #28]
        break;
 8003d64:	e005      	b.n	8003d72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d077      	beq.n	8003e68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005a      	lsls	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	441a      	add	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d916      	bls.n	8003dc2 <UART_SetConfig+0x4a6>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9a:	d212      	bcs.n	8003dc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f023 030f 	bic.w	r3, r3, #15
 8003da4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	8afb      	ldrh	r3, [r7, #22]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	8afa      	ldrh	r2, [r7, #22]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e052      	b.n	8003e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dc8:	e04e      	b.n	8003e68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d827      	bhi.n	8003e22 <UART_SetConfig+0x506>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0x4bc>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e23 	.word	0x08003e23
 8003de8:	08003e13 	.word	0x08003e13
 8003dec:	08003e23 	.word	0x08003e23
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e23 	.word	0x08003e23
 8003df8:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe fc64 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003e00:	61f8      	str	r0, [r7, #28]
        break;
 8003e02:	e014      	b.n	8003e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7fe fc76 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8003e08:	61f8      	str	r0, [r7, #28]
        break;
 8003e0a:	e010      	b.n	8003e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <UART_SetConfig+0x56c>)
 8003e0e:	61fb      	str	r3, [r7, #28]
        break;
 8003e10:	e00d      	b.n	8003e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe fbc1 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8003e16:	61f8      	str	r0, [r7, #28]
        break;
 8003e18:	e009      	b.n	8003e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1e:	61fb      	str	r3, [r7, #28]
        break;
 8003e20:	e005      	b.n	8003e2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d019      	beq.n	8003e68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	085a      	lsrs	r2, r3, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d909      	bls.n	8003e62 <UART_SetConfig+0x546>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e54:	d205      	bcs.n	8003e62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e002      	b.n	8003e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	@ 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e82:	bf00      	nop
 8003e84:	40008000 	.word	0x40008000
 8003e88:	00f42400 	.word	0x00f42400

08003e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8a:	d10a      	bne.n	8003fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b098      	sub	sp, #96	@ 0x60
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fe0:	f7fc ff8e 	bl	8000f00 <HAL_GetTick>
 8003fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d12e      	bne.n	8004052 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f88c 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d021      	beq.n	8004052 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004022:	653b      	str	r3, [r7, #80]	@ 0x50
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800402c:	647b      	str	r3, [r7, #68]	@ 0x44
 800402e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800403a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e6      	bne.n	800400e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e062      	b.n	8004118 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d149      	bne.n	80040f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f856 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	623b      	str	r3, [r7, #32]
   return(result);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004098:	633b      	str	r3, [r7, #48]	@ 0x30
 800409a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e6      	bne.n	800407a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	617b      	str	r3, [r7, #20]
   return(result);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e011      	b.n	8004118 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3758      	adds	r7, #88	@ 0x58
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e049      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004138:	d045      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fc fee1 	bl	8000f00 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e048      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d031      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d110      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2208      	movs	r2, #8
 8004176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f838 	bl	80041ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2208      	movs	r2, #8
 8004182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e029      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a0:	d111      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f81e 	bl	80041ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e00f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0a6      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b095      	sub	sp, #84	@ 0x54
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800420a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004214:	643b      	str	r3, [r7, #64]	@ 0x40
 8004216:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800421a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	61fb      	str	r3, [r7, #28]
   return(result);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004248:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800424e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004260:	2b01      	cmp	r3, #1
 8004262:	d118      	bne.n	8004296 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	60bb      	str	r3, [r7, #8]
   return(result);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6979      	ldr	r1, [r7, #20]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e6      	bne.n	8004264 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042aa:	bf00      	nop
 80042ac:	3754      	adds	r7, #84	@ 0x54
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff fb0b 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b088      	sub	sp, #32
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	613b      	str	r3, [r7, #16]
   return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e6      	bne.n	80042ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fad7 	bl	80038dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <VL53L7CX_RdByte>:

uint8_t VL53L7CX_RdByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	460b      	mov	r3, r1
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	817b      	strh	r3, [r7, #10]
	uint8_t status = 255;
 8004358:	23ff      	movs	r3, #255	@ 0xff
 800435a:	75fb      	strb	r3, [r7, #23]
	
	/* Need to be implemented by customer. This function returns 0 if OK */

	return status;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <VL53L7CX_WrByte>:

uint8_t VL53L7CX_WrByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	807b      	strh	r3, [r7, #2]
 8004376:	4613      	mov	r3, r2
 8004378:	707b      	strb	r3, [r7, #1]
	uint8_t status = 255;
 800437a:	23ff      	movs	r3, #255	@ 0xff
 800437c:	73fb      	strb	r3, [r7, #15]

	/* Need to be implemented by customer. This function returns 0 if OK */

	return status;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <VL53L7CX_WrMulti>:
uint8_t VL53L7CX_WrMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	460b      	mov	r3, r1
 800439a:	817b      	strh	r3, [r7, #10]
	uint8_t status = 255;
 800439c:	23ff      	movs	r3, #255	@ 0xff
 800439e:	75fb      	strb	r3, [r7, #23]
	
		/* Need to be implemented by customer. This function returns 0 if OK */

	return status;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <VL53L7CX_RdMulti>:
uint8_t VL53L7CX_RdMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	460b      	mov	r3, r1
 80043bc:	817b      	strh	r3, [r7, #10]
	uint8_t status = 255;
 80043be:	23ff      	movs	r3, #255	@ 0xff
 80043c0:	75fb      	strb	r3, [r7, #23]
	
	/* Need to be implemented by customer. This function returns 0 if OK */
	
	return status;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <VL53L7CX_SwapBuffer>:
}

void VL53L7CX_SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;
	
	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4) 
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e021      	b.n	8004426 <VL53L7CX_SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	440b      	add	r3, r1
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3302      	adds	r3, #2
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	440b      	add	r3, r1
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	3203      	adds	r2, #3
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	440a      	add	r2, r1
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	4313      	orrs	r3, r2
		tmp = (
 8004414:	60bb      	str	r3, [r7, #8]
		
		memcpy(&(buffer[i]), &tmp, 4);
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4) 
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3304      	adds	r3, #4
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d3d9      	bcc.n	80043e2 <VL53L7CX_SwapBuffer+0x12>
	}
}	
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <VL53L7CX_WaitMs>:

uint8_t VL53L7CX_WaitMs(
		VL53L7CX_Platform *p_platform,
		uint32_t TimeMs)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
	uint8_t status = 255;
 8004446:	23ff      	movs	r3, #255	@ 0xff
 8004448:	73fb      	strb	r3, [r7, #15]

	/* Need to be implemented by customer. This function returns 0 if OK */
	
	return status;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_vl53l7cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	461a      	mov	r2, r3
 8004466:	4603      	mov	r3, r0
 8004468:	70fb      	strb	r3, [r7, #3]
 800446a:	460b      	mov	r3, r1
 800446c:	70bb      	strb	r3, [r7, #2]
 800446e:	4613      	mov	r3, r2
 8004470:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L7CX_RdMulti(&(p_dev->platform), address,
 800447a:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L7CX_RdMulti(&(p_dev->platform), address,
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	8839      	ldrh	r1, [r7, #0]
 8004486:	f7ff ff92 	bl	80043ae <VL53L7CX_RdMulti>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	4313      	orrs	r3, r2
 8004492:	73fb      	strb	r3, [r7, #15]
		status |= VL53L7CX_WaitMs(&(p_dev->platform), 10);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	210a      	movs	r1, #10
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ffcf 	bl	800443c <VL53L7CX_WaitMs>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	73fb      	strb	r3, [r7, #15]

		//printf("Polling: temp_buffer[%d] = 0x%02X, status = 0x%02X, timeout = %d\r\n",
		//        pos, p_dev->temp_buffer[pos], status, timeout);

		if(timeout >= (uint8_t)500)	/* 5s timeout */
 80044a8:	7bbb      	ldrb	r3, [r7, #14]
 80044aa:	2bf3      	cmp	r3, #243	@ 0xf3
 80044ac:	d904      	bls.n	80044b8 <_vl53l7cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L7CX_STATUS_TIMEOUT_ERROR;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
			break;
 80044b6:	e01a      	b.n	80044ee <_vl53l7cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d909      	bls.n	80044d2 <_vl53l7cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 80044c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80044c6:	d904      	bls.n	80044d2 <_vl53l7cx_poll_for_answer+0x7a>
		{
			status |= VL53L7CX_MCU_ERROR;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80044ce:	73fb      	strb	r3, [r7, #15]
			break;
 80044d0:	e00d      	b.n	80044ee <_vl53l7cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80044d2:	7bbb      	ldrb	r3, [r7, #14]
 80044d4:	3301      	adds	r3, #1
 80044d6:	73bb      	strb	r3, [r7, #14]
		}
	} while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80044d8:	78bb      	ldrb	r3, [r7, #2]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80044e2:	7e3b      	ldrb	r3, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	7f3a      	ldrb	r2, [r7, #28]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d1c5      	bne.n	800447a <_vl53l7cx_poll_for_answer+0x22>

	return status;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_vl53l7cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l7cx_poll_for_mcu_boot(
              VL53L7CX_Configuration      *p_dev)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L7CX_STATUS_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L7CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f107 020b 	add.w	r2, r7, #11
 800450e:	2106      	movs	r1, #6
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff1a 	bl	800434a <VL53L7CX_RdByte>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	4313      	orrs	r3, r2
 800451e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8004520:	7afb      	ldrb	r3, [r7, #11]
 8004522:	b25b      	sxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	da10      	bge.n	800454a <_vl53l7cx_poll_for_mcu_boot+0x52>
			status |= VL53L7CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f107 020a 	add.w	r2, r7, #10
 800452e:	2107      	movs	r1, #7
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff0a 	bl	800434a <VL53L7CX_RdByte>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	4313      	orrs	r3, r2
 800453e:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8004540:	7aba      	ldrb	r2, [r7, #10]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	4313      	orrs	r3, r2
 8004546:	73fb      	strb	r3, [r7, #15]
			break;
 8004548:	e012      	b.n	8004570 <_vl53l7cx_poll_for_mcu_boot+0x78>
		}
		(void)VL53L7CX_WaitMs(&(p_dev->platform), 1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2101      	movs	r1, #1
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ff74 	bl	800443c <VL53L7CX_WaitMs>
		timeout++;
 8004554:	89bb      	ldrh	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <_vl53l7cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8004564:	89bb      	ldrh	r3, [r7, #12]
 8004566:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800456a:	d3cd      	bcc.n	8004508 <_vl53l7cx_poll_for_mcu_boot+0x10>
 800456c:	e000      	b.n	8004570 <_vl53l7cx_poll_for_mcu_boot+0x78>
			break;
 800456e:	bf00      	nop

   return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <_vl53l7cx_send_offset_data>:
 */

static uint8_t _vl53l7cx_send_offset_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0ea      	sub	sp, #424	@ 0x1a8
 8004580:	af02      	add	r7, sp, #8
 8004582:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004586:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800458a:	6018      	str	r0, [r3, #0]
 800458c:	460a      	mov	r2, r1
 800458e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004592:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8004596:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800459e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80045a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045a6:	4ad9      	ldr	r2, [pc, #868]	@ (800490c <_vl53l7cx_send_offset_data+0x390>)
 80045a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045ac:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80045b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80045b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045b8:	4ad5      	ldr	r2, [pc, #852]	@ (8004910 <_vl53l7cx_send_offset_data+0x394>)
 80045ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045be:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80045c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80045c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L7CX_OFFSET_BUFFER_SIZE);
 80045d0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80045d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 80045dc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80045e0:	4619      	mov	r1, r3
 80045e2:	f001 fc72 	bl	8005eca <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4){
 80045e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80045ea:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	f040 8122 	bne.w	800483a <_vl53l7cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80045f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80045fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8004604:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004608:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800460c:	cb03      	ldmia	r3!, {r0, r1}
 800460e:	6010      	str	r0, [r2, #0]
 8004610:	6051      	str	r1, [r2, #4]
		VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 8004612:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004616:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004620:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fed3 	bl	80043d0 <VL53L7CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800462a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800462e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 8004638:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800463c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004640:	4618      	mov	r0, r3
 8004642:	f001 fc42 	bl	8005eca <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8004646:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800464a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8004654:	f107 0318 	add.w	r3, r7, #24
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fc35 	bl	8005eca <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8004660:	2300      	movs	r3, #0
 8004662:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8004666:	e0ac      	b.n	80047c2 <_vl53l7cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800466e:	e09c      	b.n	80047aa <_vl53l7cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8004670:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8004674:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	005a      	lsls	r2, r3, #1
 800467e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800468a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800468e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800469e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046a6:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80046a8:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80046ac:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	440b      	add	r3, r1
 80046b4:	3304      	adds	r3, #4
 80046b6:	0059      	lsls	r1, r3, #1
 80046b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80046bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046c4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80046c6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80046ca:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	440b      	add	r3, r1
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	f103 0109 	add.w	r1, r3, #9
 80046d8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80046dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046e4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80046e6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80046ea:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	440a      	add	r2, r1
                                  /(uint32_t)4;
 80046f2:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80046f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8004700:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8004704:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	005a      	lsls	r2, r3, #1
 800470e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004712:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004716:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800471a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800471c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8004720:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004730:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004734:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004738:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800473a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800473e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8004742:	00d2      	lsls	r2, r2, #3
 8004744:	440a      	add	r2, r1
 8004746:	3204      	adds	r2, #4
 8004748:	0051      	lsls	r1, r2, #1
 800474a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800474e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8004752:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004756:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8004758:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800475c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8004760:	00d2      	lsls	r2, r2, #3
 8004762:	440a      	add	r2, r1
 8004764:	0052      	lsls	r2, r2, #1
 8004766:	f102 0109 	add.w	r1, r2, #9
 800476a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800476e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8004772:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8004776:	4413      	add	r3, r2
                                  /(int16_t)4;
 8004778:	2b00      	cmp	r3, #0
 800477a:	da00      	bge.n	800477e <_vl53l7cx_send_offset_data+0x202>
 800477c:	3303      	adds	r3, #3
 800477e:	109b      	asrs	r3, r3, #2
 8004780:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8004782:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8004786:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	b209      	sxth	r1, r1
 8004790:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004794:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004798:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 800479c:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80047aa:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	f77f af5e 	ble.w	8004670 <_vl53l7cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80047b4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80047c2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	f77f af4e 	ble.w	8004668 <_vl53l7cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80047cc:	f107 0318 	add.w	r3, r7, #24
 80047d0:	3320      	adds	r3, #32
 80047d2:	2260      	movs	r2, #96	@ 0x60
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 fb42 	bl	8005e60 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80047dc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80047e0:	3340      	adds	r3, #64	@ 0x40
 80047e2:	22c0      	movs	r2, #192	@ 0xc0
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 fb3a 	bl	8005e60 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80047ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80047f0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 80047fa:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80047fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fb61 	bl	8005eca <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8004808:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800480c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8004816:	f107 0118 	add.w	r1, r7, #24
 800481a:	2280      	movs	r2, #128	@ 0x80
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fb54 	bl	8005eca <memcpy>
		range_grid, sizeof(range_grid));
            VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 8004822:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004826:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004830:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fdcb 	bl	80043d0 <VL53L7CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800483a:	2300      	movs	r3, #0
 800483c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8004840:	e01b      	b.n	800487a <_vl53l7cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8004842:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8004846:	f103 0208 	add.w	r2, r3, #8
 800484a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800484e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8004852:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8004856:	6809      	ldr	r1, [r1, #0]
 8004858:	440a      	add	r2, r1
 800485a:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 800485e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8004862:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	4413      	add	r3, r2
 800486a:	460a      	mov	r2, r1
 800486c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8004870:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8004874:	3301      	adds	r3, #1
 8004876:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 800487a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800487e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8004882:	d3de      	bcc.n	8004842 <_vl53l7cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8004884:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004888:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 8004892:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8004896:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800489a:	cb03      	ldmia	r3!, {r0, r1}
 800489c:	6010      	str	r0, [r2, #0]
 800489e:	6051      	str	r1, [r2, #4]
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80048a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80048a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80048ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80048b8:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80048bc:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80048c0:	f7ff fd64 	bl	800438c <VL53L7CX_WrMulti>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80048d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80048d6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80048da:	2303      	movs	r3, #3
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	23ff      	movs	r3, #255	@ 0xff
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80048e6:	2201      	movs	r2, #1
 80048e8:	2104      	movs	r1, #4
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	f7ff fdb4 	bl	8004458 <_vl53l7cx_poll_for_answer>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80048fe:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8004902:	4618      	mov	r0, r3
 8004904:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	08006e74 	.word	0x08006e74
 8004910:	08006e7c 	.word	0x08006e7c

08004914 <_vl53l7cx_send_xtalk_data>:
 */

static uint8_t _vl53l7cx_send_xtalk_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b0ca      	sub	sp, #296	@ 0x128
 8004918:	af02      	add	r7, sp, #8
 800491a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800491e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004922:	6018      	str	r0, [r3, #0]
 8004924:	460a      	mov	r2, r1
 8004926:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800492a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800492e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8004936:	4a9a      	ldr	r2, [pc, #616]	@ (8004ba0 <_vl53l7cx_send_xtalk_data+0x28c>)
 8004938:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800493c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004940:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8004944:	4a97      	ldr	r2, [pc, #604]	@ (8004ba4 <_vl53l7cx_send_xtalk_data+0x290>)
 8004946:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800494a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800494e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8004952:	4b95      	ldr	r3, [pc, #596]	@ (8004ba8 <_vl53l7cx_send_xtalk_data+0x294>)
 8004954:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8004958:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800495c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 8004966:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800496a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004974:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8004978:	4619      	mov	r1, r3
 800497a:	f001 faa6 	bl	8005eca <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4)
 800497e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004982:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b10      	cmp	r3, #16
 800498a:	f040 80d2 	bne.w	8004b32 <_vl53l7cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800498e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004992:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800499c:	461a      	mov	r2, r3
 800499e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80049a2:	cb03      	ldmia	r3!, {r0, r1}
 80049a4:	6010      	str	r0, [r2, #0]
 80049a6:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80049a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80049b6:	461a      	mov	r2, r3
 80049b8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80049bc:	cb03      	ldmia	r3!, {r0, r1}
 80049be:	6010      	str	r0, [r2, #0]
 80049c0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80049c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049d0:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fcfb 	bl	80043d0 <VL53L7CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80049da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80049de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 80049e8:	f107 0308 	add.w	r3, r7, #8
 80049ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fa6a 	bl	8005eca <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80049fc:	e05d      	b.n	8004aba <_vl53l7cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8004a04:	e04e      	b.n	8004aa4 <_vl53l7cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8004a06:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8004a0a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	005a      	lsls	r2, r3, #1
 8004a14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8004a20:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8004a24:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a3c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8004a3e:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8004a42:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	440b      	add	r3, r1
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	0059      	lsls	r1, r3, #1
 8004a4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a52:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a5a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8004a5c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8004a60:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	440b      	add	r3, r1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	f103 0109 	add.w	r1, r3, #9
 8004a6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a72:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a7a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8004a7c:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8004a80:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8004a84:	0092      	lsls	r2, r2, #2
 8004a86:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8004a88:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8004a8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004a8e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8004a96:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8004aa4:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	ddac      	ble.n	8004a06 <_vl53l7cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8004aac:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004aba:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	dd9d      	ble.n	80049fe <_vl53l7cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8004ac2:	f107 0308 	add.w	r3, r7, #8
 8004ac6:	3340      	adds	r3, #64	@ 0x40
 8004ac8:	22c0      	movs	r2, #192	@ 0xc0
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 f9c7 	bl	8005e60 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8004ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ad6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8004ae0:	f107 0108 	add.w	r1, r7, #8
 8004ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f9ee 	bl	8005eca <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L7CX_SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8004aee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004af2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afc:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fc65 	bl	80043d0 <VL53L7CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8004b06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004b14:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8004b18:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8004b1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004b28:	2204      	movs	r2, #4
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 f997 	bl	8005e60 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8004b32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b36:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004b3a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8004b3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b40:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8004b4a:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8004b4e:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8004b52:	f7ff fc1b 	bl	800438c <VL53L7CX_WrMulti>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8004b64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004b68:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	23ff      	movs	r3, #255	@ 0xff
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	6800      	ldr	r0, [r0, #0]
 8004b7e:	f7ff fc6b 	bl	8004458 <_vl53l7cx_poll_for_answer>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8004b90:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	08006e84 	.word	0x08006e84
 8004ba4:	08006e8c 	.word	0x08006e8c
 8004ba8:	0001fca0 	.word	0x0001fca0

08004bac <vl53l7cx_is_alive>:

uint8_t vl53l7cx_is_alive(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fbd1 	bl	800436a <VL53L7CX_WrByte>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0, &device_id);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f107 020e 	add.w	r2, r7, #14
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fbb5 	bl	800434a <VL53L7CX_RdByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 1, &revision_id);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f107 020d 	add.w	r2, r7, #13
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fba9 	bl	800434a <VL53L7CX_RdByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fbad 	bl	800436a <VL53L7CX_WrByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	2bf0      	cmp	r3, #240	@ 0xf0
 8004c1e:	d106      	bne.n	8004c2e <vl53l7cx_is_alive+0x82>
 8004c20:	7b7b      	ldrb	r3, [r7, #13]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d103      	bne.n	8004c2e <vl53l7cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e002      	b.n	8004c34 <vl53l7cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <vl53l7cx_init>:

uint8_t vl53l7cx_init(
		VL53L7CX_Configuration		*p_dev)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	@ 0x28
 8004c44:	af04      	add	r7, sp, #16
 8004c46:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L7CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8004c4c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004c50:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8004c52:	2301      	movs	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

	printf("Rozpoczęcie inicjalizacji czujnika\r\n");
 8004c56:	4887      	ldr	r0, [pc, #540]	@ (8004e74 <vl53l7cx_init+0x234>)
 8004c58:	f001 f8fa 	bl	8005e50 <puts>

	p_dev->default_xtalk = (uint8_t*)VL53L7CX_DEFAULT_XTALK;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a86      	ldr	r2, [pc, #536]	@ (8004e78 <vl53l7cx_init+0x238>)
 8004c60:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L7CX_DEFAULT_CONFIGURATION;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a85      	ldr	r2, [pc, #532]	@ (8004e7c <vl53l7cx_init+0x23c>)
 8004c66:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	printf("Sekwencja restartu oprogramowania\r\n");
 8004c70:	4883      	ldr	r0, [pc, #524]	@ (8004e80 <vl53l7cx_init+0x240>)
 8004c72:	f001 f8ed 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fb73 	bl	800436a <VL53L7CX_WrByte>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2204      	movs	r2, #4
 8004c92:	2109      	movs	r1, #9
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fb68 	bl	800436a <VL53L7CX_WrByte>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2240      	movs	r2, #64	@ 0x40
 8004ca8:	210f      	movs	r1, #15
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fb5d 	bl	800436a <VL53L7CX_WrByte>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	210a      	movs	r1, #10
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fb52 	bl	800436a <VL53L7CX_WrByte>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f107 0216 	add.w	r2, r7, #22
 8004cd6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fb35 	bl	800434a <VL53L7CX_RdByte>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	210c      	movs	r1, #12
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fb3a 	bl	800436a <VL53L7CX_WrByte>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	75fb      	strb	r3, [r7, #23]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f240 1101 	movw	r1, #257	@ 0x101
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fb2e 	bl	800436a <VL53L7CX_WrByte>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fb22 	bl	800436a <VL53L7CX_WrByte>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fb16 	bl	800436a <VL53L7CX_WrByte>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb0a 	bl	800436a <VL53L7CX_WrByte>
 8004d56:	4603      	mov	r3, r0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fafe 	bl	800436a <VL53L7CX_WrByte>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461a      	mov	r2, r3
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff faf2 	bl	800436a <VL53L7CX_WrByte>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f240 1103 	movw	r1, #259	@ 0x103
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fae6 	bl	800436a <VL53L7CX_WrByte>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	210c      	movs	r1, #12
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fadb 	bl	800436a <VL53L7CX_WrByte>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2243      	movs	r2, #67	@ 0x43
 8004dc2:	210f      	movs	r1, #15
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fad0 	bl	800436a <VL53L7CX_WrByte>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WaitMs(&(p_dev->platform), 1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fb2f 	bl	800443c <VL53L7CX_WaitMs>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	75fb      	strb	r3, [r7, #23]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2240      	movs	r2, #64	@ 0x40
 8004dec:	210f      	movs	r1, #15
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fabb 	bl	800436a <VL53L7CX_WrByte>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	210a      	movs	r1, #10
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fab0 	bl	800436a <VL53L7CX_WrByte>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WaitMs(&(p_dev->platform), 100);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2164      	movs	r1, #100	@ 0x64
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fb0f 	bl	800443c <VL53L7CX_WaitMs>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	printf("Oczekiwanie na uruchomienie czujnika\r\n");
 8004e28:	4816      	ldr	r0, [pc, #88]	@ (8004e84 <vl53l7cx_init+0x244>)
 8004e2a:	f001 f811 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fa97 	bl	800436a <VL53L7CX_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8004e46:	2301      	movs	r3, #1
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	23ff      	movs	r3, #255	@ 0xff
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2306      	movs	r3, #6
 8004e50:	2200      	movs	r2, #0
 8004e52:	2101      	movs	r1, #1
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff faff 	bl	8004458 <_vl53l7cx_poll_for_answer>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d010      	beq.n	8004e8c <vl53l7cx_init+0x24c>
		printf("Błąd podczas oczekiwania na uruchomienie czujnika\r\n");
 8004e6a:	4807      	ldr	r0, [pc, #28]	@ (8004e88 <vl53l7cx_init+0x248>)
 8004e6c:	f000 fff0 	bl	8005e50 <puts>
		goto exit;
 8004e70:	e385      	b.n	800557e <vl53l7cx_init+0x93e>
 8004e72:	bf00      	nop
 8004e74:	08006e94 	.word	0x08006e94
 8004e78:	0801c5ac 	.word	0x0801c5ac
 8004e7c:	0801c1e0 	.word	0x0801c1e0
 8004e80:	08006ebc 	.word	0x08006ebc
 8004e84:	08006ee0 	.word	0x08006ee0
 8004e88:	08006f08 	.word	0x08006f08
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	210e      	movs	r1, #14
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fa69 	bl	800436a <VL53L7CX_WrByte>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fa5d 	bl	800436a <VL53L7CX_WrByte>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	printf("Włączanie dostępu do oprogramowania\r\n");
 8004eba:	48e6      	ldr	r0, [pc, #920]	@ (8005254 <vl53l7cx_init+0x614>)
 8004ebc:	f000 ffc8 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	220d      	movs	r2, #13
 8004ec4:	2103      	movs	r1, #3
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fa4f 	bl	800436a <VL53L7CX_WrByte>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fa43 	bl	800436a <VL53L7CX_WrByte>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004eee:	2310      	movs	r3, #16
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2321      	movs	r3, #33	@ 0x21
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2101      	movs	r1, #1
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff faab 	bl	8004458 <_vl53l7cx_poll_for_answer>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fa28 	bl	800436a <VL53L7CX_WrByte>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	printf("Włączanie dostępu hosta do GO1\r\n");
 8004f24:	48cc      	ldr	r0, [pc, #816]	@ (8005258 <vl53l7cx_init+0x618>)
 8004f26:	f000 ff93 	bl	8005e50 <puts>
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f107 0216 	add.w	r2, r7, #22
 8004f30:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fa08 	bl	800434a <VL53L7CX_RdByte>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	210c      	movs	r1, #12
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fa0d 	bl	800436a <VL53L7CX_WrByte>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	printf("Sprawdzanie statusu zasilania\r\n");
 8004f5a:	48c0      	ldr	r0, [pc, #768]	@ (800525c <vl53l7cx_init+0x61c>)
 8004f5c:	f000 ff78 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff f9fe 	bl	800436a <VL53L7CX_WrByte>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f240 1101 	movw	r1, #257	@ 0x101
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff f9f2 	bl	800436a <VL53L7CX_WrByte>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff f9e6 	bl	800436a <VL53L7CX_WrByte>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff f9da 	bl	800436a <VL53L7CX_WrByte>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff f9ce 	bl	800436a <VL53L7CX_WrByte>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff f9c2 	bl	800436a <VL53L7CX_WrByte>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff f9b6 	bl	800436a <VL53L7CX_WrByte>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	4313      	orrs	r3, r2
 8005006:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f240 1103 	movw	r1, #259	@ 0x103
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff f9aa 	bl	800436a <VL53L7CX_WrByte>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	4313      	orrs	r3, r2
 800501e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f244 010f 	movw	r1, #16399	@ 0x400f
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff f99e 	bl	800436a <VL53L7CX_WrByte>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	4313      	orrs	r3, r2
 8005036:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2243      	movs	r2, #67	@ 0x43
 800503c:	f240 211a 	movw	r1, #538	@ 0x21a
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff f992 	bl	800436a <VL53L7CX_WrByte>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	4313      	orrs	r3, r2
 800504e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2203      	movs	r2, #3
 8005054:	f240 211a 	movw	r1, #538	@ 0x21a
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff f986 	bl	800436a <VL53L7CX_WrByte>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	4313      	orrs	r3, r2
 8005066:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f240 211a 	movw	r1, #538	@ 0x21a
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff f97a 	bl	800436a <VL53L7CX_WrByte>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	4313      	orrs	r3, r2
 800507e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f240 211a 	movw	r1, #538	@ 0x21a
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff f96e 	bl	800436a <VL53L7CX_WrByte>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	4313      	orrs	r3, r2
 8005096:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f240 2119 	movw	r1, #537	@ 0x219
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff f962 	bl	800436a <VL53L7CX_WrByte>
 80050a6:	4603      	mov	r3, r0
 80050a8:	461a      	mov	r2, r3
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f240 211b 	movw	r1, #539	@ 0x21b
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff f956 	bl	800436a <VL53L7CX_WrByte>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	printf("Wybudzanie MCU\r\n");
 80050c8:	4865      	ldr	r0, [pc, #404]	@ (8005260 <vl53l7cx_init+0x620>)
 80050ca:	f000 fec1 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f947 	bl	800436a <VL53L7CX_WrByte>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f107 0216 	add.w	r2, r7, #22
 80050ec:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f92a 	bl	800434a <VL53L7CX_RdByte>
 80050f6:	4603      	mov	r3, r0
 80050f8:	461a      	mov	r2, r3
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	210c      	movs	r1, #12
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff f92f 	bl	800436a <VL53L7CX_WrByte>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	4313      	orrs	r3, r2
 8005114:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff f923 	bl	800436a <VL53L7CX_WrByte>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	4313      	orrs	r3, r2
 800512c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2207      	movs	r2, #7
 8005132:	2120      	movs	r1, #32
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff f918 	bl	800436a <VL53L7CX_WrByte>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	4313      	orrs	r3, r2
 8005142:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2206      	movs	r2, #6
 8005148:	2120      	movs	r1, #32
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff f90d 	bl	800436a <VL53L7CX_WrByte>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	4313      	orrs	r3, r2
 8005158:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L7CX */
	printf("Pobieranie oprogramowania do VL53L7CX\r\n");
 800515a:	4842      	ldr	r0, [pc, #264]	@ (8005264 <vl53l7cx_init+0x624>)
 800515c:	f000 fe78 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2209      	movs	r2, #9
 8005164:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff f8fe 	bl	800436a <VL53L7CX_WrByte>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	4313      	orrs	r3, r2
 8005176:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517e:	4a3a      	ldr	r2, [pc, #232]	@ (8005268 <vl53l7cx_init+0x628>)
 8005180:	2100      	movs	r1, #0
 8005182:	f7ff f903 	bl	800438c <VL53L7CX_WrMulti>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	4313      	orrs	r3, r2
 800518e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0],0x8000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	220a      	movs	r2, #10
 8005194:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff f8e6 	bl	800436a <VL53L7CX_WrByte>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ae:	4a2f      	ldr	r2, [pc, #188]	@ (800526c <vl53l7cx_init+0x62c>)
 80051b0:	2100      	movs	r1, #0
 80051b2:	f7ff f8eb 	bl	800438c <VL53L7CX_WrMulti>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	4313      	orrs	r3, r2
 80051be:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	220b      	movs	r2, #11
 80051c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff f8ce 	bl	800436a <VL53L7CX_WrByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrMulti(&(p_dev->platform),0,
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80051de:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <vl53l7cx_init+0x630>)
 80051e0:	2100      	movs	r1, #0
 80051e2:	f7ff f8d3 	bl	800438c <VL53L7CX_WrMulti>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff f8b6 	bl	800436a <VL53L7CX_WrByte>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	4313      	orrs	r3, r2
 8005206:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	printf("Sprawdzanie poprawności pobrania oprogramowania\r\n");
 8005208:	481a      	ldr	r0, [pc, #104]	@ (8005274 <vl53l7cx_init+0x634>)
 800520a:	f000 fe21 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff f8a7 	bl	800436a <VL53L7CX_WrByte>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	4313      	orrs	r3, r2
 8005224:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	220d      	movs	r2, #13
 800522a:	2103      	movs	r1, #3
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff f89c 	bl	800436a <VL53L7CX_WrByte>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	4313      	orrs	r3, r2
 800523a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff f890 	bl	800436a <VL53L7CX_WrByte>
 800524a:	4603      	mov	r3, r0
 800524c:	461a      	mov	r2, r3
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	4313      	orrs	r3, r2
 8005252:	e011      	b.n	8005278 <vl53l7cx_init+0x638>
 8005254:	08006f40 	.word	0x08006f40
 8005258:	08006f68 	.word	0x08006f68
 800525c:	08006f8c 	.word	0x08006f8c
 8005260:	08006fac 	.word	0x08006fac
 8005264:	08006fbc 	.word	0x08006fbc
 8005268:	080071e0 	.word	0x080071e0
 800526c:	0800f1e0 	.word	0x0800f1e0
 8005270:	080171e0 	.word	0x080171e0
 8005274:	08006fe4 	.word	0x08006fe4
 8005278:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800527a:	2310      	movs	r3, #16
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	2310      	movs	r3, #16
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2321      	movs	r3, #33	@ 0x21
 8005284:	2200      	movs	r2, #0
 8005286:	2101      	movs	r1, #1
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff f8e5 	bl	8004458 <_vl53l7cx_poll_for_answer>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	4313      	orrs	r3, r2
 8005296:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <vl53l7cx_init+0x666>
		printf("Błąd podczas sprawdzania pobrania oprogramowania\r\n");
 800529e:	48ba      	ldr	r0, [pc, #744]	@ (8005588 <vl53l7cx_init+0x948>)
 80052a0:	f000 fdd6 	bl	8005e50 <puts>
		goto exit;
 80052a4:	e16b      	b.n	800557e <vl53l7cx_init+0x93e>
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f85b 	bl	800436a <VL53L7CX_WrByte>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f107 0216 	add.w	r2, r7, #22
 80052c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff f83e 	bl	800434a <VL53L7CX_RdByte>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	210c      	movs	r1, #12
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff f843 	bl	800436a <VL53L7CX_WrByte>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	printf("Resetowanie MCU i oczekiwanie na uruchomienie\r\n");
 80052ee:	48a7      	ldr	r0, [pc, #668]	@ (800558c <vl53l7cx_init+0x94c>)
 80052f0:	f000 fdae 	bl	8005e50 <puts>
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff f834 	bl	800436a <VL53L7CX_WrByte>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	4313      	orrs	r3, r2
 800530a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f828 	bl	800436a <VL53L7CX_WrByte>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	4313      	orrs	r3, r2
 8005322:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f240 1115 	movw	r1, #277	@ 0x115
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff f81c 	bl	800436a <VL53L7CX_WrByte>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	4313      	orrs	r3, r2
 800533a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2242      	movs	r2, #66	@ 0x42
 8005340:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff f810 	bl	800436a <VL53L7CX_WrByte>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	4313      	orrs	r3, r2
 8005352:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f240 1117 	movw	r1, #279	@ 0x117
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff f804 	bl	800436a <VL53L7CX_WrByte>
 8005362:	4603      	mov	r3, r0
 8005364:	461a      	mov	r2, r3
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	4313      	orrs	r3, r2
 800536a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	210b      	movs	r1, #11
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fff9 	bl	800436a <VL53L7CX_WrByte>
 8005378:	4603      	mov	r3, r0
 800537a:	461a      	mov	r2, r3
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	4313      	orrs	r3, r2
 8005380:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f107 0216 	add.w	r2, r7, #22
 8005388:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe ffdc 	bl	800434a <VL53L7CX_RdByte>
 8005392:	4603      	mov	r3, r0
 8005394:	461a      	mov	r2, r3
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	4313      	orrs	r3, r2
 800539a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	210c      	movs	r1, #12
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe ffe1 	bl	800436a <VL53L7CX_WrByte>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	210b      	movs	r1, #11
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe ffd6 	bl	800436a <VL53L7CX_WrByte>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_mcu_boot(p_dev);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff f895 	bl	80044f8 <_vl53l7cx_poll_for_mcu_boot>
 80053ce:	4603      	mov	r3, r0
 80053d0:	461a      	mov	r2, r3
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <vl53l7cx_init+0x7a6>
		printf("Błąd podczas oczekiwania na uruchomienie MCU\r\n");
 80053de:	486c      	ldr	r0, [pc, #432]	@ (8005590 <vl53l7cx_init+0x950>)
 80053e0:	f000 fd36 	bl	8005e50 <puts>
		goto exit;
 80053e4:	e0cb      	b.n	800557e <vl53l7cx_init+0x93e>
	}

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe ffbb 	bl	800436a <VL53L7CX_WrByte>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	printf("Pobieranie danych NVM i zapisywanie do bufora offsetu\r\n");
 80053fe:	4865      	ldr	r0, [pc, #404]	@ (8005594 <vl53l7cx_init+0x954>)
 8005400:	f000 fd26 	bl	8005e50 <puts>
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	2328      	movs	r3, #40	@ 0x28
 8005408:	4a63      	ldr	r2, [pc, #396]	@ (8005598 <vl53l7cx_init+0x958>)
 800540a:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 800540e:	f7fe ffbd 	bl	800438c <VL53L7CX_WrMulti>
 8005412:	4603      	mov	r3, r0
 8005414:	461a      	mov	r2, r3
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	4313      	orrs	r3, r2
 800541a:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L7CX_GET_NVM_CMD, sizeof(VL53L7CX_GET_NVM_CMD));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 0,
 800541c:	2302      	movs	r3, #2
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	23ff      	movs	r3, #255	@ 0xff
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8005428:	2200      	movs	r2, #0
 800542a:	2104      	movs	r1, #4
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff f813 	bl	8004458 <_vl53l7cx_poll_for_answer>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	4313      	orrs	r3, r2
 800543a:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 800543c:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L7CX_NVM_DATA_SIZE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8005444:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8005448:	f642 4104 	movw	r1, #11268	@ 0x2c04
 800544c:	f7fe ffaf 	bl	80043ae <VL53L7CX_RdMulti>
 8005450:	4603      	mov	r3, r0
 8005452:	461a      	mov	r2, r3
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	4313      	orrs	r3, r2
 8005458:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f103 0010 	add.w	r0, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005466:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800546a:	4619      	mov	r1, r3
 800546c:	f000 fd2d 	bl	8005eca <memcpy>
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l7cx_send_offset_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8005470:	2110      	movs	r1, #16
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff f882 	bl	800457c <_vl53l7cx_send_offset_data>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	4313      	orrs	r3, r2
 8005480:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	printf("Ustawianie domyślnego kształtu Xtalk\r\n");
 8005482:	4846      	ldr	r0, [pc, #280]	@ (800559c <vl53l7cx_init+0x95c>)
 8005484:	f000 fce4 	bl	8005e50 <puts>
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L7CX_DEFAULT_XTALK,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800548e:	4a44      	ldr	r2, [pc, #272]	@ (80055a0 <vl53l7cx_init+0x960>)
 8005490:	4618      	mov	r0, r3
 8005492:	4611      	mov	r1, r2
 8005494:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8005498:	461a      	mov	r2, r3
 800549a:	f000 fd16 	bl	8005eca <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);
	status |= _vl53l7cx_send_xtalk_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 800549e:	2110      	movs	r1, #16
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fa37 	bl	8004914 <_vl53l7cx_send_xtalk_data>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L7CX firmware */
	printf("Wysyłanie domyślnej konfiguracji do oprogramowania VL53L7CX\r\n");
 80054b0:	483c      	ldr	r0, [pc, #240]	@ (80055a4 <vl53l7cx_init+0x964>)
 80054b2:	f000 fccd 	bl	8005e50 <puts>
	status |= VL53L7CX_WrMulti(&(p_dev->platform), 0x2c34,
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80054c0:	f642 4134 	movw	r1, #11316	@ 0x2c34
 80054c4:	f7fe ff62 	bl	800438c <VL53L7CX_WrMulti>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L7CX_DEFAULT_CONFIGURATION));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80054d2:	2303      	movs	r3, #3
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	23ff      	movs	r3, #255	@ 0xff
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80054de:	2201      	movs	r2, #1
 80054e0:	2104      	movs	r1, #4
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fe ffb8 	bl	8004458 <_vl53l7cx_poll_for_answer>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80054f2:	f107 0110 	add.w	r1, r7, #16
 80054f6:	2304      	movs	r3, #4
 80054f8:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fab3 	bl	8005a68 <vl53l7cx_dci_write_data>
 8005502:	4603      	mov	r3, r0
 8005504:	461a      	mov	r2, r3
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	4313      	orrs	r3, r2
 800550a:	75fb      	strb	r3, [r7, #23]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L7CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800550c:	f107 010c 	add.w	r1, r7, #12
 8005510:	2304      	movs	r3, #4
 8005512:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 faa6 	bl	8005a68 <vl53l7cx_dci_write_data>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	4313      	orrs	r3, r2
 8005524:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8005526:	2301      	movs	r3, #1
 8005528:	75bb      	strb	r3, [r7, #22]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8005530:	2326      	movs	r3, #38	@ 0x26
 8005532:	9302      	str	r3, [sp, #8]
 8005534:	2301      	movs	r3, #1
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	f107 0316 	add.w	r3, r7, #22
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	2328      	movs	r3, #40	@ 0x28
 8005540:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fb2d 	bl	8005ba4 <vl53l7cx_dci_replace_data>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	4313      	orrs	r3, r2
 8005552:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 800555a:	2325      	movs	r3, #37	@ 0x25
 800555c:	9302      	str	r3, [sp, #8]
 800555e:	2301      	movs	r3, #1
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	f107 0316 	add.w	r3, r7, #22
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2328      	movs	r3, #40	@ 0x28
 800556a:	f24e 1208 	movw	r2, #57608	@ 0xe108
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fb18 	bl	8005ba4 <vl53l7cx_dci_replace_data>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	4313      	orrs	r3, r2
 800557c:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);
exit:
	return status;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	08007018 	.word	0x08007018
 800558c:	0800704c 	.word	0x0800704c
 8005590:	0800707c 	.word	0x0800707c
 8005594:	080070ac 	.word	0x080070ac
 8005598:	0801c8b4 	.word	0x0801c8b4
 800559c:	080070e4 	.word	0x080070e4
 80055a0:	0801c5ac 	.word	0x0801c5ac
 80055a4:	0800710c 	.word	0x0800710c

080055a8 <vl53l7cx_set_i2c_address>:


uint8_t vl53l7cx_set_i2c_address(
		VL53L7CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fed2 	bl	800436a <VL53L7CX_WrByte>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	73fb      	strb	r3, [r7, #15]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	2104      	movs	r1, #4
 80055de:	f7fe fec4 	bl	800436a <VL53L7CX_WrByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	801a      	strh	r2, [r3, #0]
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe feb5 	bl	800436a <VL53L7CX_WrByte>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	4313      	orrs	r3, r2
 8005608:	73fb      	strb	r3, [r7, #15]

	return status;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <vl53l7cx_start_ranging>:
	return status;
}

uint8_t vl53l7cx_start_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 8005614:	b5b0      	push	{r4, r5, r7, lr}
 8005616:	b09c      	sub	sp, #112	@ 0x70
 8005618:	af02      	add	r7, sp, #8
 800561a:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L7CX_STATUS_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8005622:	2300      	movs	r3, #0
 8005624:	653b      	str	r3, [r7, #80]	@ 0x50
 8005626:	2300      	movs	r3, #0
 8005628:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800562a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800562e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l7cx_get_resolution(p_dev, &resolution);
 8005630:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f966 	bl	8005908 <vl53l7cx_get_resolution>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005644:	4313      	orrs	r3, r2
 8005646:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	22ff      	movs	r2, #255	@ 0xff
 8005654:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8005656:	4baa      	ldr	r3, [pc, #680]	@ (8005900 <vl53l7cx_start_ranging+0x2ec>)
 8005658:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800565c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800565e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L7CX_START_BH,
 8005662:	4ba8      	ldr	r3, [pc, #672]	@ (8005904 <vl53l7cx_start_ranging+0x2f0>)
 8005664:	f107 040c 	add.w	r4, r7, #12
 8005668:	461d      	mov	r5, r3
 800566a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800566c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800566e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005672:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L7CX_TARGET_STATUS_BH,
		VL53L7CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 800567a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567c:	3308      	adds	r3, #8
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8005680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005682:	3310      	adds	r3, #16
 8005684:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8005686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005688:	3320      	adds	r3, #32
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 800568c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568e:	3340      	adds	r3, #64	@ 0x40
 8005690:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005694:	3380      	adds	r3, #128	@ 0x80
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8005698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80056a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80056b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80056bc:	e073      	b.n	80057a6 <vl53l7cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 80056be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	3368      	adds	r3, #104	@ 0x68
 80056c4:	443b      	add	r3, r7
 80056c6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d067      	beq.n	800579e <vl53l7cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 80056ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	3368      	adds	r3, #104	@ 0x68
 80056d6:	443b      	add	r3, r7
 80056d8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80056dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	fa22 f303 	lsr.w	r3, r2, r3
 80056e6:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d057      	beq.n	800579e <vl53l7cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80056ee:	f107 020c 	add.w	r2, r7, #12
 80056f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80056fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d03a      	beq.n	800577e <vl53l7cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8005708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d833      	bhi.n	800577e <vl53l7cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8005716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005718:	885b      	ldrh	r3, [r3, #2]
 800571a:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 800571e:	4293      	cmp	r3, r2
 8005720:	d910      	bls.n	8005744 <vl53l7cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8005722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005724:	885b      	ldrh	r3, [r3, #2]
 8005726:	f645 028f 	movw	r2, #22671	@ 0x588f
 800572a:	4293      	cmp	r3, r2
 800572c:	d80a      	bhi.n	8005744 <vl53l7cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 800572e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005736:	b299      	uxth	r1, r3
 8005738:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800573a:	8813      	ldrh	r3, [r2, #0]
 800573c:	f361 130f 	bfi	r3, r1, #4, #12
 8005740:	8013      	strh	r3, [r2, #0]
 8005742:	e009      	b.n	8005758 <vl53l7cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8005744:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	b299      	uxth	r1, r3
 800574e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005750:	8813      	ldrh	r3, [r2, #0]
 8005752:	f361 130f 	bfi	r3, r1, #4, #12
 8005756:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L7CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	4611      	mov	r1, r2
 8005768:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800576a:	8812      	ldrh	r2, [r2, #0]
 800576c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8005770:	b292      	uxth	r2, r2
 8005772:	fb01 f202 	mul.w	r2, r1, r2
 8005776:	441a      	add	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	e009      	b.n	8005792 <vl53l7cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005784:	8812      	ldrh	r2, [r2, #0]
 8005786:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800578a:	b292      	uxth	r2, r2
 800578c:	441a      	add	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	e000      	b.n	80057a0 <vl53l7cx_start_ranging+0x18c>
			continue;
 800579e:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80057a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a2:	3301      	adds	r3, #1
 80057a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80057a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a8:	2b0b      	cmp	r3, #11
 80057aa:	d988      	bls.n	80056be <vl53l7cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f103 0218 	add.w	r2, r3, #24
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	605a      	str	r2, [r3, #4]

	status |= vl53l7cx_dci_write_data(p_dev,
 80057b8:	f107 010c 	add.w	r1, r7, #12
 80057bc:	2330      	movs	r3, #48	@ 0x30
 80057be:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f950 	bl	8005a68 <vl53l7cx_dci_write_data>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L7CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 80057dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057de:	3301      	adds	r3, #1
 80057e0:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l7cx_dci_write_data(p_dev,
 80057e2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80057e6:	2308      	movs	r3, #8
 80057e8:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f93b 	bl	8005a68 <vl53l7cx_dci_write_data>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L7CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l7cx_dci_write_data(p_dev,
 8005800:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8005804:	2310      	movs	r3, #16
 8005806:	f64d 1270 	movw	r2, #55664	@ 0xd970
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f92c 	bl	8005a68 <vl53l7cx_dci_write_data>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005818:	4313      	orrs	r3, r2
 800581a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L7CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fd9f 	bl	800436a <VL53L7CX_WrByte>
 800582c:	4603      	mov	r3, r0
 800582e:	461a      	mov	r2, r3
 8005830:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005834:	4313      	orrs	r3, r2
 8005836:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2205      	movs	r2, #5
 800583e:	2109      	movs	r1, #9
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fd92 	bl	800436a <VL53L7CX_WrByte>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800584e:	4313      	orrs	r3, r2
 8005850:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L7CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fd84 	bl	800436a <VL53L7CX_WrByte>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800586a:	4313      	orrs	r3, r2
 800586c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L7CX_WrMulti(&(p_dev->platform), VL53L7CX_UI_CMD_END -
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8005876:	2304      	movs	r3, #4
 8005878:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 800587c:	f7fe fd86 	bl	800438c <VL53L7CX_WrMulti>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005888:	4313      	orrs	r3, r2
 800588a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800588e:	2303      	movs	r3, #3
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	23ff      	movs	r3, #255	@ 0xff
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800589a:	2201      	movs	r2, #1
 800589c:	2104      	movs	r1, #4
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fe fdda 	bl	8004458 <_vl53l7cx_poll_for_answer>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l7cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l7cx_dci_read_data(p_dev,
 80058b8:	230c      	movs	r3, #12
 80058ba:	f245 4240 	movw	r2, #21568	@ 0x5440
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f848 	bl	8005954 <vl53l7cx_dci_read_data>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 80058e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80058e4:	461a      	mov	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d002      	beq.n	80058f4 <vl53l7cx_start_ranging+0x2e0>
	{
		status |= VL53L7CX_STATUS_ERROR;
 80058ee:	23ff      	movs	r3, #255	@ 0xff
 80058f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 80058f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3768      	adds	r7, #104	@ 0x68
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005900:	0800714c 	.word	0x0800714c
 8005904:	0800715c 	.word	0x0800715c

08005908 <vl53l7cx_get_resolution>:
}

uint8_t vl53l7cx_get_resolution(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 800591c:	2308      	movs	r3, #8
 800591e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f816 	bl	8005954 <vl53l7cx_dci_read_data>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	4313      	orrs	r3, r2
 8005930:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 800593e:	fb12 f303 	smulbb	r3, r2, r3
 8005942:	b2da      	uxtb	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	701a      	strb	r2, [r3, #0]

	return status;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <vl53l7cx_dci_read_data>:
uint8_t vl53l7cx_dci_read_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	@ 0x30
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L7CX_STATUS_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	330c      	adds	r3, #12
 800596c:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 800596e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a64 <vl53l7cx_dci_read_data+0x110>)
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	ca07      	ldmia	r2, {r0, r1, r2}
 8005976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8005980:	d903      	bls.n	800598a <vl53l7cx_dci_read_data+0x36>
	{
		status |= VL53L7CX_STATUS_ERROR;
 8005982:	23ff      	movs	r3, #255	@ 0xff
 8005984:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8005988:	e065      	b.n	8005a56 <vl53l7cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	b2db      	uxtb	r3, r3
 8005990:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8005998:	887b      	ldrh	r3, [r7, #2]
 800599a:	111b      	asrs	r3, r3, #4
 800599c:	b2db      	uxtb	r3, r3
 800599e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80059a0:	887b      	ldrh	r3, [r7, #2]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L7CX_WrMulti(&(p_dev->platform),
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f107 0214 	add.w	r2, r7, #20
 80059b0:	230c      	movs	r3, #12
 80059b2:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 80059b6:	f7fe fce9 	bl	800438c <VL53L7CX_WrMulti>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L7CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80059c8:	2303      	movs	r3, #3
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	23ff      	movs	r3, #255	@ 0xff
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80059d4:	2201      	movs	r2, #1
 80059d6:	2104      	movs	r1, #4
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7fe fd3d 	bl	8004458 <_vl53l7cx_poll_for_answer>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L7CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 80059ec:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= VL53L7CX_RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80059fa:	f7fe fcd8 	bl	80043ae <VL53L7CX_RdMulti>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L7CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	330c      	adds	r3, #12
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fe fcd8 	bl	80043d0 <VL53L7CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8005a20:	2300      	movs	r3, #0
 8005a22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005a24:	e011      	b.n	8005a4a <vl53l7cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8005a26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	440b      	add	r3, r1
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	440a      	add	r2, r1
 8005a38:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 8005a3c:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8005a3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3301      	adds	r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a4e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8005a52:	429a      	cmp	r2, r3
 8005a54:	dbe7      	blt.n	8005a26 <vl53l7cx_dci_read_data+0xd2>
		}
	}

	return status;
 8005a56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3728      	adds	r7, #40	@ 0x28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	0800718c 	.word	0x0800718c

08005a68 <vl53l7cx_dci_write_data>:
uint8_t vl53l7cx_dci_write_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08c      	sub	sp, #48	@ 0x30
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005a80:	2300      	movs	r3, #0
 8005a82:	753b      	strb	r3, [r7, #20]
 8005a84:	2300      	movs	r3, #0
 8005a86:	757b      	strb	r3, [r7, #21]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75bb      	strb	r3, [r7, #22]
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	75fb      	strb	r3, [r7, #23]
 8005a90:	2305      	movs	r3, #5
 8005a92:	763b      	strb	r3, [r7, #24]
 8005a94:	2301      	movs	r3, #1
 8005a96:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8005a98:	887b      	ldrh	r3, [r7, #2]
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	121b      	asrs	r3, r3, #8
 8005a9e:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005aa0:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8005aaa:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L7CX_UI_CMD_END -
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8005ab2:	3334      	adds	r3, #52	@ 0x34
 8005ab4:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8005ab6:	887b      	ldrh	r3, [r7, #2]
 8005ab8:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8005abc:	d903      	bls.n	8005ac6 <vl53l7cx_dci_write_data+0x5e>
           > (uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L7CX_STATUS_ERROR;
 8005abe:	23ff      	movs	r3, #255	@ 0xff
 8005ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005ac4:	e068      	b.n	8005b98 <vl53l7cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	111b      	asrs	r3, r3, #4
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L7CX_SwapBuffer(data, data_size);
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68b8      	ldr	r0, [r7, #8]
 8005aec:	f7fe fc70 	bl	80043d0 <VL53L7CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005af8:	e012      	b.n	8005b20 <vl53l7cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8005afa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	441a      	add	r2, r3
 8005b02:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005b06:	3304      	adds	r3, #4
 8005b08:	7811      	ldrb	r1, [r2, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	460a      	mov	r2, r1
 8005b10:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005b14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005b20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dae8      	bge.n	8005afa <vl53l7cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	3304      	adds	r3, #4
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	cb03      	ldmia	r3!, {r0, r1}
 8005b46:	6010      	str	r0, [r2, #0]
 8005b48:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L7CX_WrMulti(&(p_dev->platform),address,
 8005b4a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8005b52:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L7CX_WrMulti(&(p_dev->platform),address,
 8005b54:	330c      	adds	r3, #12
 8005b56:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8005b58:	f7fe fc18 	bl	800438c <VL53L7CX_WrMulti>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	23ff      	movs	r3, #255	@ 0xff
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8005b76:	2201      	movs	r2, #1
 8005b78:	2104      	movs	r1, #4
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7fe fc6c 	bl	8004458 <_vl53l7cx_poll_for_answer>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L7CX_SwapBuffer(data, data_size);
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	4619      	mov	r1, r3
 8005b92:	68b8      	ldr	r0, [r7, #8]
 8005b94:	f7fe fc1c 	bl	80043d0 <VL53L7CX_SwapBuffer>
	}

	return status;
 8005b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3728      	adds	r7, #40	@ 0x28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <vl53l7cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

	status |= vl53l7cx_dci_read_data(p_dev, data, index, data_size);
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fec9 	bl	8005954 <vl53l7cx_dci_read_data>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8005bcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005bd4:	6a39      	ldr	r1, [r7, #32]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f977 	bl	8005eca <memcpy>
	status |= vl53l7cx_dci_write_data(p_dev, data, index, data_size);
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff ff40 	bl	8005a68 <vl53l7cx_dci_write_data>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	75fb      	strb	r3, [r7, #23]

	return status;
 8005bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <std>:
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	4604      	mov	r4, r0
 8005c02:	e9c0 3300 	strd	r3, r3, [r0]
 8005c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c0a:	6083      	str	r3, [r0, #8]
 8005c0c:	8181      	strh	r1, [r0, #12]
 8005c0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c10:	81c2      	strh	r2, [r0, #14]
 8005c12:	6183      	str	r3, [r0, #24]
 8005c14:	4619      	mov	r1, r3
 8005c16:	2208      	movs	r2, #8
 8005c18:	305c      	adds	r0, #92	@ 0x5c
 8005c1a:	f000 f921 	bl	8005e60 <memset>
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <std+0x58>)
 8005c20:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c22:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <std+0x5c>)
 8005c24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <std+0x60>)
 8005c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c60 <std+0x64>)
 8005c2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <std+0x68>)
 8005c30:	6224      	str	r4, [r4, #32]
 8005c32:	429c      	cmp	r4, r3
 8005c34:	d006      	beq.n	8005c44 <std+0x48>
 8005c36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c3a:	4294      	cmp	r4, r2
 8005c3c:	d002      	beq.n	8005c44 <std+0x48>
 8005c3e:	33d0      	adds	r3, #208	@ 0xd0
 8005c40:	429c      	cmp	r4, r3
 8005c42:	d105      	bne.n	8005c50 <std+0x54>
 8005c44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4c:	f000 b93a 	b.w	8005ec4 <__retarget_lock_init_recursive>
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	bf00      	nop
 8005c54:	08006739 	.word	0x08006739
 8005c58:	0800675b 	.word	0x0800675b
 8005c5c:	08006793 	.word	0x08006793
 8005c60:	080067b7 	.word	0x080067b7
 8005c64:	20002178 	.word	0x20002178

08005c68 <stdio_exit_handler>:
 8005c68:	4a02      	ldr	r2, [pc, #8]	@ (8005c74 <stdio_exit_handler+0xc>)
 8005c6a:	4903      	ldr	r1, [pc, #12]	@ (8005c78 <stdio_exit_handler+0x10>)
 8005c6c:	4803      	ldr	r0, [pc, #12]	@ (8005c7c <stdio_exit_handler+0x14>)
 8005c6e:	f000 b869 	b.w	8005d44 <_fwalk_sglue>
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	080066d1 	.word	0x080066d1
 8005c7c:	2000001c 	.word	0x2000001c

08005c80 <cleanup_stdio>:
 8005c80:	6841      	ldr	r1, [r0, #4]
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <cleanup_stdio+0x34>)
 8005c84:	4299      	cmp	r1, r3
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
 8005c8a:	d001      	beq.n	8005c90 <cleanup_stdio+0x10>
 8005c8c:	f000 fd20 	bl	80066d0 <_fflush_r>
 8005c90:	68a1      	ldr	r1, [r4, #8]
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <cleanup_stdio+0x38>)
 8005c94:	4299      	cmp	r1, r3
 8005c96:	d002      	beq.n	8005c9e <cleanup_stdio+0x1e>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fd19 	bl	80066d0 <_fflush_r>
 8005c9e:	68e1      	ldr	r1, [r4, #12]
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <cleanup_stdio+0x3c>)
 8005ca2:	4299      	cmp	r1, r3
 8005ca4:	d004      	beq.n	8005cb0 <cleanup_stdio+0x30>
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cac:	f000 bd10 	b.w	80066d0 <_fflush_r>
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20002178 	.word	0x20002178
 8005cb8:	200021e0 	.word	0x200021e0
 8005cbc:	20002248 	.word	0x20002248

08005cc0 <global_stdio_init.part.0>:
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <global_stdio_init.part.0+0x30>)
 8005cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8005cf4 <global_stdio_init.part.0+0x34>)
 8005cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf8 <global_stdio_init.part.0+0x38>)
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	4620      	mov	r0, r4
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2104      	movs	r1, #4
 8005cd0:	f7ff ff94 	bl	8005bfc <std>
 8005cd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cd8:	2201      	movs	r2, #1
 8005cda:	2109      	movs	r1, #9
 8005cdc:	f7ff ff8e 	bl	8005bfc <std>
 8005ce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cea:	2112      	movs	r1, #18
 8005cec:	f7ff bf86 	b.w	8005bfc <std>
 8005cf0:	200022b0 	.word	0x200022b0
 8005cf4:	20002178 	.word	0x20002178
 8005cf8:	08005c69 	.word	0x08005c69

08005cfc <__sfp_lock_acquire>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	@ (8005d04 <__sfp_lock_acquire+0x8>)
 8005cfe:	f000 b8e2 	b.w	8005ec6 <__retarget_lock_acquire_recursive>
 8005d02:	bf00      	nop
 8005d04:	200022b5 	.word	0x200022b5

08005d08 <__sfp_lock_release>:
 8005d08:	4801      	ldr	r0, [pc, #4]	@ (8005d10 <__sfp_lock_release+0x8>)
 8005d0a:	f000 b8dd 	b.w	8005ec8 <__retarget_lock_release_recursive>
 8005d0e:	bf00      	nop
 8005d10:	200022b5 	.word	0x200022b5

08005d14 <__sinit>:
 8005d14:	b510      	push	{r4, lr}
 8005d16:	4604      	mov	r4, r0
 8005d18:	f7ff fff0 	bl	8005cfc <__sfp_lock_acquire>
 8005d1c:	6a23      	ldr	r3, [r4, #32]
 8005d1e:	b11b      	cbz	r3, 8005d28 <__sinit+0x14>
 8005d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d24:	f7ff bff0 	b.w	8005d08 <__sfp_lock_release>
 8005d28:	4b04      	ldr	r3, [pc, #16]	@ (8005d3c <__sinit+0x28>)
 8005d2a:	6223      	str	r3, [r4, #32]
 8005d2c:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <__sinit+0x2c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1f5      	bne.n	8005d20 <__sinit+0xc>
 8005d34:	f7ff ffc4 	bl	8005cc0 <global_stdio_init.part.0>
 8005d38:	e7f2      	b.n	8005d20 <__sinit+0xc>
 8005d3a:	bf00      	nop
 8005d3c:	08005c81 	.word	0x08005c81
 8005d40:	200022b0 	.word	0x200022b0

08005d44 <_fwalk_sglue>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	4607      	mov	r7, r0
 8005d4a:	4688      	mov	r8, r1
 8005d4c:	4614      	mov	r4, r2
 8005d4e:	2600      	movs	r6, #0
 8005d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d54:	f1b9 0901 	subs.w	r9, r9, #1
 8005d58:	d505      	bpl.n	8005d66 <_fwalk_sglue+0x22>
 8005d5a:	6824      	ldr	r4, [r4, #0]
 8005d5c:	2c00      	cmp	r4, #0
 8005d5e:	d1f7      	bne.n	8005d50 <_fwalk_sglue+0xc>
 8005d60:	4630      	mov	r0, r6
 8005d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d66:	89ab      	ldrh	r3, [r5, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d907      	bls.n	8005d7c <_fwalk_sglue+0x38>
 8005d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d70:	3301      	adds	r3, #1
 8005d72:	d003      	beq.n	8005d7c <_fwalk_sglue+0x38>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4638      	mov	r0, r7
 8005d78:	47c0      	blx	r8
 8005d7a:	4306      	orrs	r6, r0
 8005d7c:	3568      	adds	r5, #104	@ 0x68
 8005d7e:	e7e9      	b.n	8005d54 <_fwalk_sglue+0x10>

08005d80 <iprintf>:
 8005d80:	b40f      	push	{r0, r1, r2, r3}
 8005d82:	b507      	push	{r0, r1, r2, lr}
 8005d84:	4906      	ldr	r1, [pc, #24]	@ (8005da0 <iprintf+0x20>)
 8005d86:	ab04      	add	r3, sp, #16
 8005d88:	6808      	ldr	r0, [r1, #0]
 8005d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8e:	6881      	ldr	r1, [r0, #8]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	f000 f8d1 	bl	8005f38 <_vfiprintf_r>
 8005d96:	b003      	add	sp, #12
 8005d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d9c:	b004      	add	sp, #16
 8005d9e:	4770      	bx	lr
 8005da0:	20000018 	.word	0x20000018

08005da4 <_puts_r>:
 8005da4:	6a03      	ldr	r3, [r0, #32]
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	6884      	ldr	r4, [r0, #8]
 8005daa:	4605      	mov	r5, r0
 8005dac:	460e      	mov	r6, r1
 8005dae:	b90b      	cbnz	r3, 8005db4 <_puts_r+0x10>
 8005db0:	f7ff ffb0 	bl	8005d14 <__sinit>
 8005db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d405      	bmi.n	8005dc6 <_puts_r+0x22>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	0598      	lsls	r0, r3, #22
 8005dbe:	d402      	bmi.n	8005dc6 <_puts_r+0x22>
 8005dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dc2:	f000 f880 	bl	8005ec6 <__retarget_lock_acquire_recursive>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	0719      	lsls	r1, r3, #28
 8005dca:	d502      	bpl.n	8005dd2 <_puts_r+0x2e>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d135      	bne.n	8005e3e <_puts_r+0x9a>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 fd31 	bl	800683c <__swsetup_r>
 8005dda:	b380      	cbz	r0, 8005e3e <_puts_r+0x9a>
 8005ddc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005de2:	07da      	lsls	r2, r3, #31
 8005de4:	d405      	bmi.n	8005df2 <_puts_r+0x4e>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	059b      	lsls	r3, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_puts_r+0x4e>
 8005dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dee:	f000 f86b 	bl	8005ec8 <__retarget_lock_release_recursive>
 8005df2:	4628      	mov	r0, r5
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da04      	bge.n	8005e04 <_puts_r+0x60>
 8005dfa:	69a2      	ldr	r2, [r4, #24]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	dc17      	bgt.n	8005e30 <_puts_r+0x8c>
 8005e00:	290a      	cmp	r1, #10
 8005e02:	d015      	beq.n	8005e30 <_puts_r+0x8c>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	7019      	strb	r1, [r3, #0]
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60a3      	str	r3, [r4, #8]
 8005e16:	2900      	cmp	r1, #0
 8005e18:	d1ed      	bne.n	8005df6 <_puts_r+0x52>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da11      	bge.n	8005e42 <_puts_r+0x9e>
 8005e1e:	4622      	mov	r2, r4
 8005e20:	210a      	movs	r1, #10
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 fccb 	bl	80067be <__swbuf_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d0d7      	beq.n	8005ddc <_puts_r+0x38>
 8005e2c:	250a      	movs	r5, #10
 8005e2e:	e7d7      	b.n	8005de0 <_puts_r+0x3c>
 8005e30:	4622      	mov	r2, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 fcc3 	bl	80067be <__swbuf_r>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d1e7      	bne.n	8005e0c <_puts_r+0x68>
 8005e3c:	e7ce      	b.n	8005ddc <_puts_r+0x38>
 8005e3e:	3e01      	subs	r6, #1
 8005e40:	e7e4      	b.n	8005e0c <_puts_r+0x68>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	220a      	movs	r2, #10
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e7ee      	b.n	8005e2c <_puts_r+0x88>
	...

08005e50 <puts>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	@ (8005e5c <puts+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f7ff bfa5 	b.w	8005da4 <_puts_r>
 8005e5a:	bf00      	nop
 8005e5c:	20000018 	.word	0x20000018

08005e60 <memset>:
 8005e60:	4402      	add	r2, r0
 8005e62:	4603      	mov	r3, r0
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d100      	bne.n	8005e6a <memset+0xa>
 8005e68:	4770      	bx	lr
 8005e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6e:	e7f9      	b.n	8005e64 <memset+0x4>

08005e70 <__errno>:
 8005e70:	4b01      	ldr	r3, [pc, #4]	@ (8005e78 <__errno+0x8>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000018 	.word	0x20000018

08005e7c <__libc_init_array>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005eb4 <__libc_init_array+0x38>)
 8005e80:	4c0d      	ldr	r4, [pc, #52]	@ (8005eb8 <__libc_init_array+0x3c>)
 8005e82:	1b64      	subs	r4, r4, r5
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	2600      	movs	r6, #0
 8005e88:	42a6      	cmp	r6, r4
 8005e8a:	d109      	bne.n	8005ea0 <__libc_init_array+0x24>
 8005e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005ebc <__libc_init_array+0x40>)
 8005e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ec0 <__libc_init_array+0x44>)
 8005e90:	f000 fe4e 	bl	8006b30 <_init>
 8005e94:	1b64      	subs	r4, r4, r5
 8005e96:	10a4      	asrs	r4, r4, #2
 8005e98:	2600      	movs	r6, #0
 8005e9a:	42a6      	cmp	r6, r4
 8005e9c:	d105      	bne.n	8005eaa <__libc_init_array+0x2e>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea4:	4798      	blx	r3
 8005ea6:	3601      	adds	r6, #1
 8005ea8:	e7ee      	b.n	8005e88 <__libc_init_array+0xc>
 8005eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eae:	4798      	blx	r3
 8005eb0:	3601      	adds	r6, #1
 8005eb2:	e7f2      	b.n	8005e9a <__libc_init_array+0x1e>
 8005eb4:	0801c918 	.word	0x0801c918
 8005eb8:	0801c918 	.word	0x0801c918
 8005ebc:	0801c918 	.word	0x0801c918
 8005ec0:	0801c91c 	.word	0x0801c91c

08005ec4 <__retarget_lock_init_recursive>:
 8005ec4:	4770      	bx	lr

08005ec6 <__retarget_lock_acquire_recursive>:
 8005ec6:	4770      	bx	lr

08005ec8 <__retarget_lock_release_recursive>:
 8005ec8:	4770      	bx	lr

08005eca <memcpy>:
 8005eca:	440a      	add	r2, r1
 8005ecc:	4291      	cmp	r1, r2
 8005ece:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ed2:	d100      	bne.n	8005ed6 <memcpy+0xc>
 8005ed4:	4770      	bx	lr
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ee0:	4291      	cmp	r1, r2
 8005ee2:	d1f9      	bne.n	8005ed8 <memcpy+0xe>
 8005ee4:	bd10      	pop	{r4, pc}

08005ee6 <__sfputc_r>:
 8005ee6:	6893      	ldr	r3, [r2, #8]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	b410      	push	{r4}
 8005eee:	6093      	str	r3, [r2, #8]
 8005ef0:	da08      	bge.n	8005f04 <__sfputc_r+0x1e>
 8005ef2:	6994      	ldr	r4, [r2, #24]
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	db01      	blt.n	8005efc <__sfputc_r+0x16>
 8005ef8:	290a      	cmp	r1, #10
 8005efa:	d103      	bne.n	8005f04 <__sfputc_r+0x1e>
 8005efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f00:	f000 bc5d 	b.w	80067be <__swbuf_r>
 8005f04:	6813      	ldr	r3, [r2, #0]
 8005f06:	1c58      	adds	r0, r3, #1
 8005f08:	6010      	str	r0, [r2, #0]
 8005f0a:	7019      	strb	r1, [r3, #0]
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <__sfputs_r>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	4606      	mov	r6, r0
 8005f18:	460f      	mov	r7, r1
 8005f1a:	4614      	mov	r4, r2
 8005f1c:	18d5      	adds	r5, r2, r3
 8005f1e:	42ac      	cmp	r4, r5
 8005f20:	d101      	bne.n	8005f26 <__sfputs_r+0x12>
 8005f22:	2000      	movs	r0, #0
 8005f24:	e007      	b.n	8005f36 <__sfputs_r+0x22>
 8005f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2a:	463a      	mov	r2, r7
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ffda 	bl	8005ee6 <__sfputc_r>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d1f3      	bne.n	8005f1e <__sfputs_r+0xa>
 8005f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f38 <_vfiprintf_r>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	460d      	mov	r5, r1
 8005f3e:	b09d      	sub	sp, #116	@ 0x74
 8005f40:	4614      	mov	r4, r2
 8005f42:	4698      	mov	r8, r3
 8005f44:	4606      	mov	r6, r0
 8005f46:	b118      	cbz	r0, 8005f50 <_vfiprintf_r+0x18>
 8005f48:	6a03      	ldr	r3, [r0, #32]
 8005f4a:	b90b      	cbnz	r3, 8005f50 <_vfiprintf_r+0x18>
 8005f4c:	f7ff fee2 	bl	8005d14 <__sinit>
 8005f50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_vfiprintf_r+0x2a>
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	059a      	lsls	r2, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_vfiprintf_r+0x2a>
 8005f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f5e:	f7ff ffb2 	bl	8005ec6 <__retarget_lock_acquire_recursive>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	071b      	lsls	r3, r3, #28
 8005f66:	d501      	bpl.n	8005f6c <_vfiprintf_r+0x34>
 8005f68:	692b      	ldr	r3, [r5, #16]
 8005f6a:	b99b      	cbnz	r3, 8005f94 <_vfiprintf_r+0x5c>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f000 fc64 	bl	800683c <__swsetup_r>
 8005f74:	b170      	cbz	r0, 8005f94 <_vfiprintf_r+0x5c>
 8005f76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f78:	07dc      	lsls	r4, r3, #31
 8005f7a:	d504      	bpl.n	8005f86 <_vfiprintf_r+0x4e>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f80:	b01d      	add	sp, #116	@ 0x74
 8005f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	0598      	lsls	r0, r3, #22
 8005f8a:	d4f7      	bmi.n	8005f7c <_vfiprintf_r+0x44>
 8005f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f8e:	f7ff ff9b 	bl	8005ec8 <__retarget_lock_release_recursive>
 8005f92:	e7f3      	b.n	8005f7c <_vfiprintf_r+0x44>
 8005f94:	2300      	movs	r3, #0
 8005f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa2:	2330      	movs	r3, #48	@ 0x30
 8005fa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006154 <_vfiprintf_r+0x21c>
 8005fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fac:	f04f 0901 	mov.w	r9, #1
 8005fb0:	4623      	mov	r3, r4
 8005fb2:	469a      	mov	sl, r3
 8005fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fb8:	b10a      	cbz	r2, 8005fbe <_vfiprintf_r+0x86>
 8005fba:	2a25      	cmp	r2, #37	@ 0x25
 8005fbc:	d1f9      	bne.n	8005fb2 <_vfiprintf_r+0x7a>
 8005fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc2:	d00b      	beq.n	8005fdc <_vfiprintf_r+0xa4>
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ffa2 	bl	8005f14 <__sfputs_r>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f000 80a7 	beq.w	8006124 <_vfiprintf_r+0x1ec>
 8005fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fd8:	445a      	add	r2, fp
 8005fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 809f 	beq.w	8006124 <_vfiprintf_r+0x1ec>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff0:	f10a 0a01 	add.w	sl, sl, #1
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	9307      	str	r3, [sp, #28]
 8005ff8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ffc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ffe:	4654      	mov	r4, sl
 8006000:	2205      	movs	r2, #5
 8006002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006006:	4853      	ldr	r0, [pc, #332]	@ (8006154 <_vfiprintf_r+0x21c>)
 8006008:	f7fa f8e2 	bl	80001d0 <memchr>
 800600c:	9a04      	ldr	r2, [sp, #16]
 800600e:	b9d8      	cbnz	r0, 8006048 <_vfiprintf_r+0x110>
 8006010:	06d1      	lsls	r1, r2, #27
 8006012:	bf44      	itt	mi
 8006014:	2320      	movmi	r3, #32
 8006016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800601a:	0713      	lsls	r3, r2, #28
 800601c:	bf44      	itt	mi
 800601e:	232b      	movmi	r3, #43	@ 0x2b
 8006020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006024:	f89a 3000 	ldrb.w	r3, [sl]
 8006028:	2b2a      	cmp	r3, #42	@ 0x2a
 800602a:	d015      	beq.n	8006058 <_vfiprintf_r+0x120>
 800602c:	9a07      	ldr	r2, [sp, #28]
 800602e:	4654      	mov	r4, sl
 8006030:	2000      	movs	r0, #0
 8006032:	f04f 0c0a 	mov.w	ip, #10
 8006036:	4621      	mov	r1, r4
 8006038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800603c:	3b30      	subs	r3, #48	@ 0x30
 800603e:	2b09      	cmp	r3, #9
 8006040:	d94b      	bls.n	80060da <_vfiprintf_r+0x1a2>
 8006042:	b1b0      	cbz	r0, 8006072 <_vfiprintf_r+0x13a>
 8006044:	9207      	str	r2, [sp, #28]
 8006046:	e014      	b.n	8006072 <_vfiprintf_r+0x13a>
 8006048:	eba0 0308 	sub.w	r3, r0, r8
 800604c:	fa09 f303 	lsl.w	r3, r9, r3
 8006050:	4313      	orrs	r3, r2
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	46a2      	mov	sl, r4
 8006056:	e7d2      	b.n	8005ffe <_vfiprintf_r+0xc6>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d19      	adds	r1, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9103      	str	r1, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfbb      	ittet	lt
 8006064:	425b      	neglt	r3, r3
 8006066:	f042 0202 	orrlt.w	r2, r2, #2
 800606a:	9307      	strge	r3, [sp, #28]
 800606c:	9307      	strlt	r3, [sp, #28]
 800606e:	bfb8      	it	lt
 8006070:	9204      	strlt	r2, [sp, #16]
 8006072:	7823      	ldrb	r3, [r4, #0]
 8006074:	2b2e      	cmp	r3, #46	@ 0x2e
 8006076:	d10a      	bne.n	800608e <_vfiprintf_r+0x156>
 8006078:	7863      	ldrb	r3, [r4, #1]
 800607a:	2b2a      	cmp	r3, #42	@ 0x2a
 800607c:	d132      	bne.n	80060e4 <_vfiprintf_r+0x1ac>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	9203      	str	r2, [sp, #12]
 8006086:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800608a:	3402      	adds	r4, #2
 800608c:	9305      	str	r3, [sp, #20]
 800608e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006164 <_vfiprintf_r+0x22c>
 8006092:	7821      	ldrb	r1, [r4, #0]
 8006094:	2203      	movs	r2, #3
 8006096:	4650      	mov	r0, sl
 8006098:	f7fa f89a 	bl	80001d0 <memchr>
 800609c:	b138      	cbz	r0, 80060ae <_vfiprintf_r+0x176>
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	eba0 000a 	sub.w	r0, r0, sl
 80060a4:	2240      	movs	r2, #64	@ 0x40
 80060a6:	4082      	lsls	r2, r0
 80060a8:	4313      	orrs	r3, r2
 80060aa:	3401      	adds	r4, #1
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b2:	4829      	ldr	r0, [pc, #164]	@ (8006158 <_vfiprintf_r+0x220>)
 80060b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060b8:	2206      	movs	r2, #6
 80060ba:	f7fa f889 	bl	80001d0 <memchr>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d03f      	beq.n	8006142 <_vfiprintf_r+0x20a>
 80060c2:	4b26      	ldr	r3, [pc, #152]	@ (800615c <_vfiprintf_r+0x224>)
 80060c4:	bb1b      	cbnz	r3, 800610e <_vfiprintf_r+0x1d6>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	3307      	adds	r3, #7
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	3308      	adds	r3, #8
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d4:	443b      	add	r3, r7
 80060d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80060d8:	e76a      	b.n	8005fb0 <_vfiprintf_r+0x78>
 80060da:	fb0c 3202 	mla	r2, ip, r2, r3
 80060de:	460c      	mov	r4, r1
 80060e0:	2001      	movs	r0, #1
 80060e2:	e7a8      	b.n	8006036 <_vfiprintf_r+0xfe>
 80060e4:	2300      	movs	r3, #0
 80060e6:	3401      	adds	r4, #1
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	4619      	mov	r1, r3
 80060ec:	f04f 0c0a 	mov.w	ip, #10
 80060f0:	4620      	mov	r0, r4
 80060f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f6:	3a30      	subs	r2, #48	@ 0x30
 80060f8:	2a09      	cmp	r2, #9
 80060fa:	d903      	bls.n	8006104 <_vfiprintf_r+0x1cc>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0c6      	beq.n	800608e <_vfiprintf_r+0x156>
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	e7c4      	b.n	800608e <_vfiprintf_r+0x156>
 8006104:	fb0c 2101 	mla	r1, ip, r1, r2
 8006108:	4604      	mov	r4, r0
 800610a:	2301      	movs	r3, #1
 800610c:	e7f0      	b.n	80060f0 <_vfiprintf_r+0x1b8>
 800610e:	ab03      	add	r3, sp, #12
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	462a      	mov	r2, r5
 8006114:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <_vfiprintf_r+0x228>)
 8006116:	a904      	add	r1, sp, #16
 8006118:	4630      	mov	r0, r6
 800611a:	f3af 8000 	nop.w
 800611e:	4607      	mov	r7, r0
 8006120:	1c78      	adds	r0, r7, #1
 8006122:	d1d6      	bne.n	80060d2 <_vfiprintf_r+0x19a>
 8006124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	d405      	bmi.n	8006136 <_vfiprintf_r+0x1fe>
 800612a:	89ab      	ldrh	r3, [r5, #12]
 800612c:	059a      	lsls	r2, r3, #22
 800612e:	d402      	bmi.n	8006136 <_vfiprintf_r+0x1fe>
 8006130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006132:	f7ff fec9 	bl	8005ec8 <__retarget_lock_release_recursive>
 8006136:	89ab      	ldrh	r3, [r5, #12]
 8006138:	065b      	lsls	r3, r3, #25
 800613a:	f53f af1f 	bmi.w	8005f7c <_vfiprintf_r+0x44>
 800613e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006140:	e71e      	b.n	8005f80 <_vfiprintf_r+0x48>
 8006142:	ab03      	add	r3, sp, #12
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	462a      	mov	r2, r5
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <_vfiprintf_r+0x228>)
 800614a:	a904      	add	r1, sp, #16
 800614c:	4630      	mov	r0, r6
 800614e:	f000 f91b 	bl	8006388 <_printf_i>
 8006152:	e7e4      	b.n	800611e <_vfiprintf_r+0x1e6>
 8006154:	0801c8dc 	.word	0x0801c8dc
 8006158:	0801c8e6 	.word	0x0801c8e6
 800615c:	00000000 	.word	0x00000000
 8006160:	08005f15 	.word	0x08005f15
 8006164:	0801c8e2 	.word	0x0801c8e2

08006168 <sbrk_aligned>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4e0f      	ldr	r6, [pc, #60]	@ (80061a8 <sbrk_aligned+0x40>)
 800616c:	460c      	mov	r4, r1
 800616e:	6831      	ldr	r1, [r6, #0]
 8006170:	4605      	mov	r5, r0
 8006172:	b911      	cbnz	r1, 800617a <sbrk_aligned+0x12>
 8006174:	f000 fc70 	bl	8006a58 <_sbrk_r>
 8006178:	6030      	str	r0, [r6, #0]
 800617a:	4621      	mov	r1, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f000 fc6b 	bl	8006a58 <_sbrk_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d103      	bne.n	800618e <sbrk_aligned+0x26>
 8006186:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800618a:	4620      	mov	r0, r4
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	1cc4      	adds	r4, r0, #3
 8006190:	f024 0403 	bic.w	r4, r4, #3
 8006194:	42a0      	cmp	r0, r4
 8006196:	d0f8      	beq.n	800618a <sbrk_aligned+0x22>
 8006198:	1a21      	subs	r1, r4, r0
 800619a:	4628      	mov	r0, r5
 800619c:	f000 fc5c 	bl	8006a58 <_sbrk_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1f2      	bne.n	800618a <sbrk_aligned+0x22>
 80061a4:	e7ef      	b.n	8006186 <sbrk_aligned+0x1e>
 80061a6:	bf00      	nop
 80061a8:	200022b8 	.word	0x200022b8

080061ac <_malloc_r>:
 80061ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b0:	1ccd      	adds	r5, r1, #3
 80061b2:	f025 0503 	bic.w	r5, r5, #3
 80061b6:	3508      	adds	r5, #8
 80061b8:	2d0c      	cmp	r5, #12
 80061ba:	bf38      	it	cc
 80061bc:	250c      	movcc	r5, #12
 80061be:	2d00      	cmp	r5, #0
 80061c0:	4606      	mov	r6, r0
 80061c2:	db01      	blt.n	80061c8 <_malloc_r+0x1c>
 80061c4:	42a9      	cmp	r1, r5
 80061c6:	d904      	bls.n	80061d2 <_malloc_r+0x26>
 80061c8:	230c      	movs	r3, #12
 80061ca:	6033      	str	r3, [r6, #0]
 80061cc:	2000      	movs	r0, #0
 80061ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062a8 <_malloc_r+0xfc>
 80061d6:	f000 faa3 	bl	8006720 <__malloc_lock>
 80061da:	f8d8 3000 	ldr.w	r3, [r8]
 80061de:	461c      	mov	r4, r3
 80061e0:	bb44      	cbnz	r4, 8006234 <_malloc_r+0x88>
 80061e2:	4629      	mov	r1, r5
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff ffbf 	bl	8006168 <sbrk_aligned>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	4604      	mov	r4, r0
 80061ee:	d158      	bne.n	80062a2 <_malloc_r+0xf6>
 80061f0:	f8d8 4000 	ldr.w	r4, [r8]
 80061f4:	4627      	mov	r7, r4
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	d143      	bne.n	8006282 <_malloc_r+0xd6>
 80061fa:	2c00      	cmp	r4, #0
 80061fc:	d04b      	beq.n	8006296 <_malloc_r+0xea>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	4639      	mov	r1, r7
 8006202:	4630      	mov	r0, r6
 8006204:	eb04 0903 	add.w	r9, r4, r3
 8006208:	f000 fc26 	bl	8006a58 <_sbrk_r>
 800620c:	4581      	cmp	r9, r0
 800620e:	d142      	bne.n	8006296 <_malloc_r+0xea>
 8006210:	6821      	ldr	r1, [r4, #0]
 8006212:	1a6d      	subs	r5, r5, r1
 8006214:	4629      	mov	r1, r5
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff ffa6 	bl	8006168 <sbrk_aligned>
 800621c:	3001      	adds	r0, #1
 800621e:	d03a      	beq.n	8006296 <_malloc_r+0xea>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	442b      	add	r3, r5
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	f8d8 3000 	ldr.w	r3, [r8]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	bb62      	cbnz	r2, 8006288 <_malloc_r+0xdc>
 800622e:	f8c8 7000 	str.w	r7, [r8]
 8006232:	e00f      	b.n	8006254 <_malloc_r+0xa8>
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	1b52      	subs	r2, r2, r5
 8006238:	d420      	bmi.n	800627c <_malloc_r+0xd0>
 800623a:	2a0b      	cmp	r2, #11
 800623c:	d917      	bls.n	800626e <_malloc_r+0xc2>
 800623e:	1961      	adds	r1, r4, r5
 8006240:	42a3      	cmp	r3, r4
 8006242:	6025      	str	r5, [r4, #0]
 8006244:	bf18      	it	ne
 8006246:	6059      	strne	r1, [r3, #4]
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	bf08      	it	eq
 800624c:	f8c8 1000 	streq.w	r1, [r8]
 8006250:	5162      	str	r2, [r4, r5]
 8006252:	604b      	str	r3, [r1, #4]
 8006254:	4630      	mov	r0, r6
 8006256:	f000 fa69 	bl	800672c <__malloc_unlock>
 800625a:	f104 000b 	add.w	r0, r4, #11
 800625e:	1d23      	adds	r3, r4, #4
 8006260:	f020 0007 	bic.w	r0, r0, #7
 8006264:	1ac2      	subs	r2, r0, r3
 8006266:	bf1c      	itt	ne
 8006268:	1a1b      	subne	r3, r3, r0
 800626a:	50a3      	strne	r3, [r4, r2]
 800626c:	e7af      	b.n	80061ce <_malloc_r+0x22>
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	42a3      	cmp	r3, r4
 8006272:	bf0c      	ite	eq
 8006274:	f8c8 2000 	streq.w	r2, [r8]
 8006278:	605a      	strne	r2, [r3, #4]
 800627a:	e7eb      	b.n	8006254 <_malloc_r+0xa8>
 800627c:	4623      	mov	r3, r4
 800627e:	6864      	ldr	r4, [r4, #4]
 8006280:	e7ae      	b.n	80061e0 <_malloc_r+0x34>
 8006282:	463c      	mov	r4, r7
 8006284:	687f      	ldr	r7, [r7, #4]
 8006286:	e7b6      	b.n	80061f6 <_malloc_r+0x4a>
 8006288:	461a      	mov	r2, r3
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	42a3      	cmp	r3, r4
 800628e:	d1fb      	bne.n	8006288 <_malloc_r+0xdc>
 8006290:	2300      	movs	r3, #0
 8006292:	6053      	str	r3, [r2, #4]
 8006294:	e7de      	b.n	8006254 <_malloc_r+0xa8>
 8006296:	230c      	movs	r3, #12
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	4630      	mov	r0, r6
 800629c:	f000 fa46 	bl	800672c <__malloc_unlock>
 80062a0:	e794      	b.n	80061cc <_malloc_r+0x20>
 80062a2:	6005      	str	r5, [r0, #0]
 80062a4:	e7d6      	b.n	8006254 <_malloc_r+0xa8>
 80062a6:	bf00      	nop
 80062a8:	200022bc 	.word	0x200022bc

080062ac <_printf_common>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	4616      	mov	r6, r2
 80062b2:	4698      	mov	r8, r3
 80062b4:	688a      	ldr	r2, [r1, #8]
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062bc:	4293      	cmp	r3, r2
 80062be:	bfb8      	it	lt
 80062c0:	4613      	movlt	r3, r2
 80062c2:	6033      	str	r3, [r6, #0]
 80062c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062c8:	4607      	mov	r7, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b10a      	cbz	r2, 80062d2 <_printf_common+0x26>
 80062ce:	3301      	adds	r3, #1
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	0699      	lsls	r1, r3, #26
 80062d6:	bf42      	ittt	mi
 80062d8:	6833      	ldrmi	r3, [r6, #0]
 80062da:	3302      	addmi	r3, #2
 80062dc:	6033      	strmi	r3, [r6, #0]
 80062de:	6825      	ldr	r5, [r4, #0]
 80062e0:	f015 0506 	ands.w	r5, r5, #6
 80062e4:	d106      	bne.n	80062f4 <_printf_common+0x48>
 80062e6:	f104 0a19 	add.w	sl, r4, #25
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	6832      	ldr	r2, [r6, #0]
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc26      	bgt.n	8006342 <_printf_common+0x96>
 80062f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	3b00      	subs	r3, #0
 80062fc:	bf18      	it	ne
 80062fe:	2301      	movne	r3, #1
 8006300:	0692      	lsls	r2, r2, #26
 8006302:	d42b      	bmi.n	800635c <_printf_common+0xb0>
 8006304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006308:	4641      	mov	r1, r8
 800630a:	4638      	mov	r0, r7
 800630c:	47c8      	blx	r9
 800630e:	3001      	adds	r0, #1
 8006310:	d01e      	beq.n	8006350 <_printf_common+0xa4>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	f003 0306 	and.w	r3, r3, #6
 800631a:	2b04      	cmp	r3, #4
 800631c:	bf02      	ittt	eq
 800631e:	68e5      	ldreq	r5, [r4, #12]
 8006320:	6833      	ldreq	r3, [r6, #0]
 8006322:	1aed      	subeq	r5, r5, r3
 8006324:	68a3      	ldr	r3, [r4, #8]
 8006326:	bf0c      	ite	eq
 8006328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800632c:	2500      	movne	r5, #0
 800632e:	4293      	cmp	r3, r2
 8006330:	bfc4      	itt	gt
 8006332:	1a9b      	subgt	r3, r3, r2
 8006334:	18ed      	addgt	r5, r5, r3
 8006336:	2600      	movs	r6, #0
 8006338:	341a      	adds	r4, #26
 800633a:	42b5      	cmp	r5, r6
 800633c:	d11a      	bne.n	8006374 <_printf_common+0xc8>
 800633e:	2000      	movs	r0, #0
 8006340:	e008      	b.n	8006354 <_printf_common+0xa8>
 8006342:	2301      	movs	r3, #1
 8006344:	4652      	mov	r2, sl
 8006346:	4641      	mov	r1, r8
 8006348:	4638      	mov	r0, r7
 800634a:	47c8      	blx	r9
 800634c:	3001      	adds	r0, #1
 800634e:	d103      	bne.n	8006358 <_printf_common+0xac>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006358:	3501      	adds	r5, #1
 800635a:	e7c6      	b.n	80062ea <_printf_common+0x3e>
 800635c:	18e1      	adds	r1, r4, r3
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	2030      	movs	r0, #48	@ 0x30
 8006362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006366:	4422      	add	r2, r4
 8006368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800636c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006370:	3302      	adds	r3, #2
 8006372:	e7c7      	b.n	8006304 <_printf_common+0x58>
 8006374:	2301      	movs	r3, #1
 8006376:	4622      	mov	r2, r4
 8006378:	4641      	mov	r1, r8
 800637a:	4638      	mov	r0, r7
 800637c:	47c8      	blx	r9
 800637e:	3001      	adds	r0, #1
 8006380:	d0e6      	beq.n	8006350 <_printf_common+0xa4>
 8006382:	3601      	adds	r6, #1
 8006384:	e7d9      	b.n	800633a <_printf_common+0x8e>
	...

08006388 <_printf_i>:
 8006388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	7e0f      	ldrb	r7, [r1, #24]
 800638e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006390:	2f78      	cmp	r7, #120	@ 0x78
 8006392:	4691      	mov	r9, r2
 8006394:	4680      	mov	r8, r0
 8006396:	460c      	mov	r4, r1
 8006398:	469a      	mov	sl, r3
 800639a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800639e:	d807      	bhi.n	80063b0 <_printf_i+0x28>
 80063a0:	2f62      	cmp	r7, #98	@ 0x62
 80063a2:	d80a      	bhi.n	80063ba <_printf_i+0x32>
 80063a4:	2f00      	cmp	r7, #0
 80063a6:	f000 80d2 	beq.w	800654e <_printf_i+0x1c6>
 80063aa:	2f58      	cmp	r7, #88	@ 0x58
 80063ac:	f000 80b9 	beq.w	8006522 <_printf_i+0x19a>
 80063b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063b8:	e03a      	b.n	8006430 <_printf_i+0xa8>
 80063ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063be:	2b15      	cmp	r3, #21
 80063c0:	d8f6      	bhi.n	80063b0 <_printf_i+0x28>
 80063c2:	a101      	add	r1, pc, #4	@ (adr r1, 80063c8 <_printf_i+0x40>)
 80063c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006435 	.word	0x08006435
 80063d0:	080063b1 	.word	0x080063b1
 80063d4:	080063b1 	.word	0x080063b1
 80063d8:	080063b1 	.word	0x080063b1
 80063dc:	080063b1 	.word	0x080063b1
 80063e0:	08006435 	.word	0x08006435
 80063e4:	080063b1 	.word	0x080063b1
 80063e8:	080063b1 	.word	0x080063b1
 80063ec:	080063b1 	.word	0x080063b1
 80063f0:	080063b1 	.word	0x080063b1
 80063f4:	08006535 	.word	0x08006535
 80063f8:	0800645f 	.word	0x0800645f
 80063fc:	080064ef 	.word	0x080064ef
 8006400:	080063b1 	.word	0x080063b1
 8006404:	080063b1 	.word	0x080063b1
 8006408:	08006557 	.word	0x08006557
 800640c:	080063b1 	.word	0x080063b1
 8006410:	0800645f 	.word	0x0800645f
 8006414:	080063b1 	.word	0x080063b1
 8006418:	080063b1 	.word	0x080063b1
 800641c:	080064f7 	.word	0x080064f7
 8006420:	6833      	ldr	r3, [r6, #0]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6032      	str	r2, [r6, #0]
 8006428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800642c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006430:	2301      	movs	r3, #1
 8006432:	e09d      	b.n	8006570 <_printf_i+0x1e8>
 8006434:	6833      	ldr	r3, [r6, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6031      	str	r1, [r6, #0]
 800643c:	0606      	lsls	r6, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xbc>
 8006440:	681d      	ldr	r5, [r3, #0]
 8006442:	e003      	b.n	800644c <_printf_i+0xc4>
 8006444:	0645      	lsls	r5, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xb8>
 8006448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800644c:	2d00      	cmp	r5, #0
 800644e:	da03      	bge.n	8006458 <_printf_i+0xd0>
 8006450:	232d      	movs	r3, #45	@ 0x2d
 8006452:	426d      	negs	r5, r5
 8006454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006458:	4859      	ldr	r0, [pc, #356]	@ (80065c0 <_printf_i+0x238>)
 800645a:	230a      	movs	r3, #10
 800645c:	e011      	b.n	8006482 <_printf_i+0xfa>
 800645e:	6821      	ldr	r1, [r4, #0]
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	0608      	lsls	r0, r1, #24
 8006464:	f853 5b04 	ldr.w	r5, [r3], #4
 8006468:	d402      	bmi.n	8006470 <_printf_i+0xe8>
 800646a:	0649      	lsls	r1, r1, #25
 800646c:	bf48      	it	mi
 800646e:	b2ad      	uxthmi	r5, r5
 8006470:	2f6f      	cmp	r7, #111	@ 0x6f
 8006472:	4853      	ldr	r0, [pc, #332]	@ (80065c0 <_printf_i+0x238>)
 8006474:	6033      	str	r3, [r6, #0]
 8006476:	bf14      	ite	ne
 8006478:	230a      	movne	r3, #10
 800647a:	2308      	moveq	r3, #8
 800647c:	2100      	movs	r1, #0
 800647e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006482:	6866      	ldr	r6, [r4, #4]
 8006484:	60a6      	str	r6, [r4, #8]
 8006486:	2e00      	cmp	r6, #0
 8006488:	bfa2      	ittt	ge
 800648a:	6821      	ldrge	r1, [r4, #0]
 800648c:	f021 0104 	bicge.w	r1, r1, #4
 8006490:	6021      	strge	r1, [r4, #0]
 8006492:	b90d      	cbnz	r5, 8006498 <_printf_i+0x110>
 8006494:	2e00      	cmp	r6, #0
 8006496:	d04b      	beq.n	8006530 <_printf_i+0x1a8>
 8006498:	4616      	mov	r6, r2
 800649a:	fbb5 f1f3 	udiv	r1, r5, r3
 800649e:	fb03 5711 	mls	r7, r3, r1, r5
 80064a2:	5dc7      	ldrb	r7, [r0, r7]
 80064a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064a8:	462f      	mov	r7, r5
 80064aa:	42bb      	cmp	r3, r7
 80064ac:	460d      	mov	r5, r1
 80064ae:	d9f4      	bls.n	800649a <_printf_i+0x112>
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d10b      	bne.n	80064cc <_printf_i+0x144>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	07df      	lsls	r7, r3, #31
 80064b8:	d508      	bpl.n	80064cc <_printf_i+0x144>
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6861      	ldr	r1, [r4, #4]
 80064be:	4299      	cmp	r1, r3
 80064c0:	bfde      	ittt	le
 80064c2:	2330      	movle	r3, #48	@ 0x30
 80064c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80064cc:	1b92      	subs	r2, r2, r6
 80064ce:	6122      	str	r2, [r4, #16]
 80064d0:	f8cd a000 	str.w	sl, [sp]
 80064d4:	464b      	mov	r3, r9
 80064d6:	aa03      	add	r2, sp, #12
 80064d8:	4621      	mov	r1, r4
 80064da:	4640      	mov	r0, r8
 80064dc:	f7ff fee6 	bl	80062ac <_printf_common>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d14a      	bne.n	800657a <_printf_i+0x1f2>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064e8:	b004      	add	sp, #16
 80064ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f043 0320 	orr.w	r3, r3, #32
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	4833      	ldr	r0, [pc, #204]	@ (80065c4 <_printf_i+0x23c>)
 80064f8:	2778      	movs	r7, #120	@ 0x78
 80064fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	6831      	ldr	r1, [r6, #0]
 8006502:	061f      	lsls	r7, r3, #24
 8006504:	f851 5b04 	ldr.w	r5, [r1], #4
 8006508:	d402      	bmi.n	8006510 <_printf_i+0x188>
 800650a:	065f      	lsls	r7, r3, #25
 800650c:	bf48      	it	mi
 800650e:	b2ad      	uxthmi	r5, r5
 8006510:	6031      	str	r1, [r6, #0]
 8006512:	07d9      	lsls	r1, r3, #31
 8006514:	bf44      	itt	mi
 8006516:	f043 0320 	orrmi.w	r3, r3, #32
 800651a:	6023      	strmi	r3, [r4, #0]
 800651c:	b11d      	cbz	r5, 8006526 <_printf_i+0x19e>
 800651e:	2310      	movs	r3, #16
 8006520:	e7ac      	b.n	800647c <_printf_i+0xf4>
 8006522:	4827      	ldr	r0, [pc, #156]	@ (80065c0 <_printf_i+0x238>)
 8006524:	e7e9      	b.n	80064fa <_printf_i+0x172>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f023 0320 	bic.w	r3, r3, #32
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	e7f6      	b.n	800651e <_printf_i+0x196>
 8006530:	4616      	mov	r6, r2
 8006532:	e7bd      	b.n	80064b0 <_printf_i+0x128>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	6961      	ldr	r1, [r4, #20]
 800653a:	1d18      	adds	r0, r3, #4
 800653c:	6030      	str	r0, [r6, #0]
 800653e:	062e      	lsls	r6, r5, #24
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	d501      	bpl.n	8006548 <_printf_i+0x1c0>
 8006544:	6019      	str	r1, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0x1c6>
 8006548:	0668      	lsls	r0, r5, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0x1bc>
 800654c:	8019      	strh	r1, [r3, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	4616      	mov	r6, r2
 8006554:	e7bc      	b.n	80064d0 <_printf_i+0x148>
 8006556:	6833      	ldr	r3, [r6, #0]
 8006558:	1d1a      	adds	r2, r3, #4
 800655a:	6032      	str	r2, [r6, #0]
 800655c:	681e      	ldr	r6, [r3, #0]
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	2100      	movs	r1, #0
 8006562:	4630      	mov	r0, r6
 8006564:	f7f9 fe34 	bl	80001d0 <memchr>
 8006568:	b108      	cbz	r0, 800656e <_printf_i+0x1e6>
 800656a:	1b80      	subs	r0, r0, r6
 800656c:	6060      	str	r0, [r4, #4]
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	2300      	movs	r3, #0
 8006574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006578:	e7aa      	b.n	80064d0 <_printf_i+0x148>
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	4632      	mov	r2, r6
 800657e:	4649      	mov	r1, r9
 8006580:	4640      	mov	r0, r8
 8006582:	47d0      	blx	sl
 8006584:	3001      	adds	r0, #1
 8006586:	d0ad      	beq.n	80064e4 <_printf_i+0x15c>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	079b      	lsls	r3, r3, #30
 800658c:	d413      	bmi.n	80065b6 <_printf_i+0x22e>
 800658e:	68e0      	ldr	r0, [r4, #12]
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	4298      	cmp	r0, r3
 8006594:	bfb8      	it	lt
 8006596:	4618      	movlt	r0, r3
 8006598:	e7a6      	b.n	80064e8 <_printf_i+0x160>
 800659a:	2301      	movs	r3, #1
 800659c:	4632      	mov	r2, r6
 800659e:	4649      	mov	r1, r9
 80065a0:	4640      	mov	r0, r8
 80065a2:	47d0      	blx	sl
 80065a4:	3001      	adds	r0, #1
 80065a6:	d09d      	beq.n	80064e4 <_printf_i+0x15c>
 80065a8:	3501      	adds	r5, #1
 80065aa:	68e3      	ldr	r3, [r4, #12]
 80065ac:	9903      	ldr	r1, [sp, #12]
 80065ae:	1a5b      	subs	r3, r3, r1
 80065b0:	42ab      	cmp	r3, r5
 80065b2:	dcf2      	bgt.n	800659a <_printf_i+0x212>
 80065b4:	e7eb      	b.n	800658e <_printf_i+0x206>
 80065b6:	2500      	movs	r5, #0
 80065b8:	f104 0619 	add.w	r6, r4, #25
 80065bc:	e7f5      	b.n	80065aa <_printf_i+0x222>
 80065be:	bf00      	nop
 80065c0:	0801c8ed 	.word	0x0801c8ed
 80065c4:	0801c8fe 	.word	0x0801c8fe

080065c8 <__sflush_r>:
 80065c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	0716      	lsls	r6, r2, #28
 80065d2:	4605      	mov	r5, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d454      	bmi.n	8006682 <__sflush_r+0xba>
 80065d8:	684b      	ldr	r3, [r1, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc02      	bgt.n	80065e4 <__sflush_r+0x1c>
 80065de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dd48      	ble.n	8006676 <__sflush_r+0xae>
 80065e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d045      	beq.n	8006676 <__sflush_r+0xae>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065f0:	682f      	ldr	r7, [r5, #0]
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	d030      	beq.n	800665a <__sflush_r+0x92>
 80065f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	0759      	lsls	r1, r3, #29
 80065fe:	d505      	bpl.n	800660c <__sflush_r+0x44>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006606:	b10b      	cbz	r3, 800660c <__sflush_r+0x44>
 8006608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006610:	6a21      	ldr	r1, [r4, #32]
 8006612:	4628      	mov	r0, r5
 8006614:	47b0      	blx	r6
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	d106      	bne.n	800662a <__sflush_r+0x62>
 800661c:	6829      	ldr	r1, [r5, #0]
 800661e:	291d      	cmp	r1, #29
 8006620:	d82b      	bhi.n	800667a <__sflush_r+0xb2>
 8006622:	4a2a      	ldr	r2, [pc, #168]	@ (80066cc <__sflush_r+0x104>)
 8006624:	410a      	asrs	r2, r1
 8006626:	07d6      	lsls	r6, r2, #31
 8006628:	d427      	bmi.n	800667a <__sflush_r+0xb2>
 800662a:	2200      	movs	r2, #0
 800662c:	6062      	str	r2, [r4, #4]
 800662e:	04d9      	lsls	r1, r3, #19
 8006630:	6922      	ldr	r2, [r4, #16]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	d504      	bpl.n	8006640 <__sflush_r+0x78>
 8006636:	1c42      	adds	r2, r0, #1
 8006638:	d101      	bne.n	800663e <__sflush_r+0x76>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	b903      	cbnz	r3, 8006640 <__sflush_r+0x78>
 800663e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006642:	602f      	str	r7, [r5, #0]
 8006644:	b1b9      	cbz	r1, 8006676 <__sflush_r+0xae>
 8006646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <__sflush_r+0x8c>
 800664e:	4628      	mov	r0, r5
 8006650:	f000 fa24 	bl	8006a9c <_free_r>
 8006654:	2300      	movs	r3, #0
 8006656:	6363      	str	r3, [r4, #52]	@ 0x34
 8006658:	e00d      	b.n	8006676 <__sflush_r+0xae>
 800665a:	2301      	movs	r3, #1
 800665c:	4628      	mov	r0, r5
 800665e:	47b0      	blx	r6
 8006660:	4602      	mov	r2, r0
 8006662:	1c50      	adds	r0, r2, #1
 8006664:	d1c9      	bne.n	80065fa <__sflush_r+0x32>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0c6      	beq.n	80065fa <__sflush_r+0x32>
 800666c:	2b1d      	cmp	r3, #29
 800666e:	d001      	beq.n	8006674 <__sflush_r+0xac>
 8006670:	2b16      	cmp	r3, #22
 8006672:	d11e      	bne.n	80066b2 <__sflush_r+0xea>
 8006674:	602f      	str	r7, [r5, #0]
 8006676:	2000      	movs	r0, #0
 8006678:	e022      	b.n	80066c0 <__sflush_r+0xf8>
 800667a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667e:	b21b      	sxth	r3, r3
 8006680:	e01b      	b.n	80066ba <__sflush_r+0xf2>
 8006682:	690f      	ldr	r7, [r1, #16]
 8006684:	2f00      	cmp	r7, #0
 8006686:	d0f6      	beq.n	8006676 <__sflush_r+0xae>
 8006688:	0793      	lsls	r3, r2, #30
 800668a:	680e      	ldr	r6, [r1, #0]
 800668c:	bf08      	it	eq
 800668e:	694b      	ldreq	r3, [r1, #20]
 8006690:	600f      	str	r7, [r1, #0]
 8006692:	bf18      	it	ne
 8006694:	2300      	movne	r3, #0
 8006696:	eba6 0807 	sub.w	r8, r6, r7
 800669a:	608b      	str	r3, [r1, #8]
 800669c:	f1b8 0f00 	cmp.w	r8, #0
 80066a0:	dde9      	ble.n	8006676 <__sflush_r+0xae>
 80066a2:	6a21      	ldr	r1, [r4, #32]
 80066a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066a6:	4643      	mov	r3, r8
 80066a8:	463a      	mov	r2, r7
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b0      	blx	r6
 80066ae:	2800      	cmp	r0, #0
 80066b0:	dc08      	bgt.n	80066c4 <__sflush_r+0xfc>
 80066b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	4407      	add	r7, r0
 80066c6:	eba8 0800 	sub.w	r8, r8, r0
 80066ca:	e7e7      	b.n	800669c <__sflush_r+0xd4>
 80066cc:	dfbffffe 	.word	0xdfbffffe

080066d0 <_fflush_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b913      	cbnz	r3, 80066e0 <_fflush_r+0x10>
 80066da:	2500      	movs	r5, #0
 80066dc:	4628      	mov	r0, r5
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	b118      	cbz	r0, 80066ea <_fflush_r+0x1a>
 80066e2:	6a03      	ldr	r3, [r0, #32]
 80066e4:	b90b      	cbnz	r3, 80066ea <_fflush_r+0x1a>
 80066e6:	f7ff fb15 	bl	8005d14 <__sinit>
 80066ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f3      	beq.n	80066da <_fflush_r+0xa>
 80066f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d404      	bmi.n	8006702 <_fflush_r+0x32>
 80066f8:	0599      	lsls	r1, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_fflush_r+0x32>
 80066fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066fe:	f7ff fbe2 	bl	8005ec6 <__retarget_lock_acquire_recursive>
 8006702:	4628      	mov	r0, r5
 8006704:	4621      	mov	r1, r4
 8006706:	f7ff ff5f 	bl	80065c8 <__sflush_r>
 800670a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800670c:	07da      	lsls	r2, r3, #31
 800670e:	4605      	mov	r5, r0
 8006710:	d4e4      	bmi.n	80066dc <_fflush_r+0xc>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	d4e1      	bmi.n	80066dc <_fflush_r+0xc>
 8006718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671a:	f7ff fbd5 	bl	8005ec8 <__retarget_lock_release_recursive>
 800671e:	e7dd      	b.n	80066dc <_fflush_r+0xc>

08006720 <__malloc_lock>:
 8006720:	4801      	ldr	r0, [pc, #4]	@ (8006728 <__malloc_lock+0x8>)
 8006722:	f7ff bbd0 	b.w	8005ec6 <__retarget_lock_acquire_recursive>
 8006726:	bf00      	nop
 8006728:	200022b4 	.word	0x200022b4

0800672c <__malloc_unlock>:
 800672c:	4801      	ldr	r0, [pc, #4]	@ (8006734 <__malloc_unlock+0x8>)
 800672e:	f7ff bbcb 	b.w	8005ec8 <__retarget_lock_release_recursive>
 8006732:	bf00      	nop
 8006734:	200022b4 	.word	0x200022b4

08006738 <__sread>:
 8006738:	b510      	push	{r4, lr}
 800673a:	460c      	mov	r4, r1
 800673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006740:	f000 f978 	bl	8006a34 <_read_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	bfab      	itete	ge
 8006748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800674a:	89a3      	ldrhlt	r3, [r4, #12]
 800674c:	181b      	addge	r3, r3, r0
 800674e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006752:	bfac      	ite	ge
 8006754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006756:	81a3      	strhlt	r3, [r4, #12]
 8006758:	bd10      	pop	{r4, pc}

0800675a <__swrite>:
 800675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675e:	461f      	mov	r7, r3
 8006760:	898b      	ldrh	r3, [r1, #12]
 8006762:	05db      	lsls	r3, r3, #23
 8006764:	4605      	mov	r5, r0
 8006766:	460c      	mov	r4, r1
 8006768:	4616      	mov	r6, r2
 800676a:	d505      	bpl.n	8006778 <__swrite+0x1e>
 800676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006770:	2302      	movs	r3, #2
 8006772:	2200      	movs	r2, #0
 8006774:	f000 f94c 	bl	8006a10 <_lseek_r>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800677e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	4628      	mov	r0, r5
 800678a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678e:	f000 b973 	b.w	8006a78 <_write_r>

08006792 <__sseek>:
 8006792:	b510      	push	{r4, lr}
 8006794:	460c      	mov	r4, r1
 8006796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679a:	f000 f939 	bl	8006a10 <_lseek_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	bf15      	itete	ne
 80067a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067ae:	81a3      	strheq	r3, [r4, #12]
 80067b0:	bf18      	it	ne
 80067b2:	81a3      	strhne	r3, [r4, #12]
 80067b4:	bd10      	pop	{r4, pc}

080067b6 <__sclose>:
 80067b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ba:	f000 b8f7 	b.w	80069ac <_close_r>

080067be <__swbuf_r>:
 80067be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c0:	460e      	mov	r6, r1
 80067c2:	4614      	mov	r4, r2
 80067c4:	4605      	mov	r5, r0
 80067c6:	b118      	cbz	r0, 80067d0 <__swbuf_r+0x12>
 80067c8:	6a03      	ldr	r3, [r0, #32]
 80067ca:	b90b      	cbnz	r3, 80067d0 <__swbuf_r+0x12>
 80067cc:	f7ff faa2 	bl	8005d14 <__sinit>
 80067d0:	69a3      	ldr	r3, [r4, #24]
 80067d2:	60a3      	str	r3, [r4, #8]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	071a      	lsls	r2, r3, #28
 80067d8:	d501      	bpl.n	80067de <__swbuf_r+0x20>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	b943      	cbnz	r3, 80067f0 <__swbuf_r+0x32>
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 f82b 	bl	800683c <__swsetup_r>
 80067e6:	b118      	cbz	r0, 80067f0 <__swbuf_r+0x32>
 80067e8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80067ec:	4638      	mov	r0, r7
 80067ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	6922      	ldr	r2, [r4, #16]
 80067f4:	1a98      	subs	r0, r3, r2
 80067f6:	6963      	ldr	r3, [r4, #20]
 80067f8:	b2f6      	uxtb	r6, r6
 80067fa:	4283      	cmp	r3, r0
 80067fc:	4637      	mov	r7, r6
 80067fe:	dc05      	bgt.n	800680c <__swbuf_r+0x4e>
 8006800:	4621      	mov	r1, r4
 8006802:	4628      	mov	r0, r5
 8006804:	f7ff ff64 	bl	80066d0 <_fflush_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	d1ed      	bne.n	80067e8 <__swbuf_r+0x2a>
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	3b01      	subs	r3, #1
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	701e      	strb	r6, [r3, #0]
 800681a:	6962      	ldr	r2, [r4, #20]
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	429a      	cmp	r2, r3
 8006820:	d004      	beq.n	800682c <__swbuf_r+0x6e>
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	07db      	lsls	r3, r3, #31
 8006826:	d5e1      	bpl.n	80067ec <__swbuf_r+0x2e>
 8006828:	2e0a      	cmp	r6, #10
 800682a:	d1df      	bne.n	80067ec <__swbuf_r+0x2e>
 800682c:	4621      	mov	r1, r4
 800682e:	4628      	mov	r0, r5
 8006830:	f7ff ff4e 	bl	80066d0 <_fflush_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0d9      	beq.n	80067ec <__swbuf_r+0x2e>
 8006838:	e7d6      	b.n	80067e8 <__swbuf_r+0x2a>
	...

0800683c <__swsetup_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4b29      	ldr	r3, [pc, #164]	@ (80068e4 <__swsetup_r+0xa8>)
 8006840:	4605      	mov	r5, r0
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	460c      	mov	r4, r1
 8006846:	b118      	cbz	r0, 8006850 <__swsetup_r+0x14>
 8006848:	6a03      	ldr	r3, [r0, #32]
 800684a:	b90b      	cbnz	r3, 8006850 <__swsetup_r+0x14>
 800684c:	f7ff fa62 	bl	8005d14 <__sinit>
 8006850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006854:	0719      	lsls	r1, r3, #28
 8006856:	d422      	bmi.n	800689e <__swsetup_r+0x62>
 8006858:	06da      	lsls	r2, r3, #27
 800685a:	d407      	bmi.n	800686c <__swsetup_r+0x30>
 800685c:	2209      	movs	r2, #9
 800685e:	602a      	str	r2, [r5, #0]
 8006860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800686a:	e033      	b.n	80068d4 <__swsetup_r+0x98>
 800686c:	0758      	lsls	r0, r3, #29
 800686e:	d512      	bpl.n	8006896 <__swsetup_r+0x5a>
 8006870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006872:	b141      	cbz	r1, 8006886 <__swsetup_r+0x4a>
 8006874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006878:	4299      	cmp	r1, r3
 800687a:	d002      	beq.n	8006882 <__swsetup_r+0x46>
 800687c:	4628      	mov	r0, r5
 800687e:	f000 f90d 	bl	8006a9c <_free_r>
 8006882:	2300      	movs	r3, #0
 8006884:	6363      	str	r3, [r4, #52]	@ 0x34
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	2300      	movs	r3, #0
 8006890:	6063      	str	r3, [r4, #4]
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f043 0308 	orr.w	r3, r3, #8
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	b94b      	cbnz	r3, 80068b6 <__swsetup_r+0x7a>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ac:	d003      	beq.n	80068b6 <__swsetup_r+0x7a>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f83f 	bl	8006934 <__smakebuf_r>
 80068b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ba:	f013 0201 	ands.w	r2, r3, #1
 80068be:	d00a      	beq.n	80068d6 <__swsetup_r+0x9a>
 80068c0:	2200      	movs	r2, #0
 80068c2:	60a2      	str	r2, [r4, #8]
 80068c4:	6962      	ldr	r2, [r4, #20]
 80068c6:	4252      	negs	r2, r2
 80068c8:	61a2      	str	r2, [r4, #24]
 80068ca:	6922      	ldr	r2, [r4, #16]
 80068cc:	b942      	cbnz	r2, 80068e0 <__swsetup_r+0xa4>
 80068ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068d2:	d1c5      	bne.n	8006860 <__swsetup_r+0x24>
 80068d4:	bd38      	pop	{r3, r4, r5, pc}
 80068d6:	0799      	lsls	r1, r3, #30
 80068d8:	bf58      	it	pl
 80068da:	6962      	ldrpl	r2, [r4, #20]
 80068dc:	60a2      	str	r2, [r4, #8]
 80068de:	e7f4      	b.n	80068ca <__swsetup_r+0x8e>
 80068e0:	2000      	movs	r0, #0
 80068e2:	e7f7      	b.n	80068d4 <__swsetup_r+0x98>
 80068e4:	20000018 	.word	0x20000018

080068e8 <__swhatbuf_r>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	460c      	mov	r4, r1
 80068ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f0:	2900      	cmp	r1, #0
 80068f2:	b096      	sub	sp, #88	@ 0x58
 80068f4:	4615      	mov	r5, r2
 80068f6:	461e      	mov	r6, r3
 80068f8:	da0d      	bge.n	8006916 <__swhatbuf_r+0x2e>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006900:	f04f 0100 	mov.w	r1, #0
 8006904:	bf14      	ite	ne
 8006906:	2340      	movne	r3, #64	@ 0x40
 8006908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800690c:	2000      	movs	r0, #0
 800690e:	6031      	str	r1, [r6, #0]
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	b016      	add	sp, #88	@ 0x58
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	466a      	mov	r2, sp
 8006918:	f000 f858 	bl	80069cc <_fstat_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	dbec      	blt.n	80068fa <__swhatbuf_r+0x12>
 8006920:	9901      	ldr	r1, [sp, #4]
 8006922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800692a:	4259      	negs	r1, r3
 800692c:	4159      	adcs	r1, r3
 800692e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006932:	e7eb      	b.n	800690c <__swhatbuf_r+0x24>

08006934 <__smakebuf_r>:
 8006934:	898b      	ldrh	r3, [r1, #12]
 8006936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006938:	079d      	lsls	r5, r3, #30
 800693a:	4606      	mov	r6, r0
 800693c:	460c      	mov	r4, r1
 800693e:	d507      	bpl.n	8006950 <__smakebuf_r+0x1c>
 8006940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	2301      	movs	r3, #1
 800694a:	6163      	str	r3, [r4, #20]
 800694c:	b003      	add	sp, #12
 800694e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006950:	ab01      	add	r3, sp, #4
 8006952:	466a      	mov	r2, sp
 8006954:	f7ff ffc8 	bl	80068e8 <__swhatbuf_r>
 8006958:	9f00      	ldr	r7, [sp, #0]
 800695a:	4605      	mov	r5, r0
 800695c:	4639      	mov	r1, r7
 800695e:	4630      	mov	r0, r6
 8006960:	f7ff fc24 	bl	80061ac <_malloc_r>
 8006964:	b948      	cbnz	r0, 800697a <__smakebuf_r+0x46>
 8006966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696a:	059a      	lsls	r2, r3, #22
 800696c:	d4ee      	bmi.n	800694c <__smakebuf_r+0x18>
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	f043 0302 	orr.w	r3, r3, #2
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	e7e2      	b.n	8006940 <__smakebuf_r+0xc>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	6020      	str	r0, [r4, #0]
 800697e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800698a:	b15b      	cbz	r3, 80069a4 <__smakebuf_r+0x70>
 800698c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f82d 	bl	80069f0 <_isatty_r>
 8006996:	b128      	cbz	r0, 80069a4 <__smakebuf_r+0x70>
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	81a3      	strh	r3, [r4, #12]
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	431d      	orrs	r5, r3
 80069a8:	81a5      	strh	r5, [r4, #12]
 80069aa:	e7cf      	b.n	800694c <__smakebuf_r+0x18>

080069ac <_close_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4d06      	ldr	r5, [pc, #24]	@ (80069c8 <_close_r+0x1c>)
 80069b0:	2300      	movs	r3, #0
 80069b2:	4604      	mov	r4, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	602b      	str	r3, [r5, #0]
 80069b8:	f7fa f8f7 	bl	8000baa <_close>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_close_r+0x1a>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_close_r+0x1a>
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	200022c0 	.word	0x200022c0

080069cc <_fstat_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d07      	ldr	r5, [pc, #28]	@ (80069ec <_fstat_r+0x20>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	f7fa f8f2 	bl	8000bc2 <_fstat>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d102      	bne.n	80069e8 <_fstat_r+0x1c>
 80069e2:	682b      	ldr	r3, [r5, #0]
 80069e4:	b103      	cbz	r3, 80069e8 <_fstat_r+0x1c>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	bf00      	nop
 80069ec:	200022c0 	.word	0x200022c0

080069f0 <_isatty_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4d06      	ldr	r5, [pc, #24]	@ (8006a0c <_isatty_r+0x1c>)
 80069f4:	2300      	movs	r3, #0
 80069f6:	4604      	mov	r4, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	602b      	str	r3, [r5, #0]
 80069fc:	f7fa f8f1 	bl	8000be2 <_isatty>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_isatty_r+0x1a>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_isatty_r+0x1a>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	200022c0 	.word	0x200022c0

08006a10 <_lseek_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d07      	ldr	r5, [pc, #28]	@ (8006a30 <_lseek_r+0x20>)
 8006a14:	4604      	mov	r4, r0
 8006a16:	4608      	mov	r0, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f7fa f8ea 	bl	8000bf8 <_lseek>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_lseek_r+0x1e>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_lseek_r+0x1e>
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	200022c0 	.word	0x200022c0

08006a34 <_read_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	@ (8006a54 <_read_r+0x20>)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f7fa f894 	bl	8000b70 <_read>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_read_r+0x1e>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_read_r+0x1e>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	200022c0 	.word	0x200022c0

08006a58 <_sbrk_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	@ (8006a74 <_sbrk_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fa f8d6 	bl	8000c14 <_sbrk>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_sbrk_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_sbrk_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	200022c0 	.word	0x200022c0

08006a78 <_write_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	@ (8006a98 <_write_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7f9 fe84 	bl	8000794 <_write>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_write_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_write_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	200022c0 	.word	0x200022c0

08006a9c <_free_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	d041      	beq.n	8006b28 <_free_r+0x8c>
 8006aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa8:	1f0c      	subs	r4, r1, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfb8      	it	lt
 8006aae:	18e4      	addlt	r4, r4, r3
 8006ab0:	f7ff fe36 	bl	8006720 <__malloc_lock>
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <_free_r+0x90>)
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	b933      	cbnz	r3, 8006ac8 <_free_r+0x2c>
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	6014      	str	r4, [r2, #0]
 8006abe:	4628      	mov	r0, r5
 8006ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ac4:	f7ff be32 	b.w	800672c <__malloc_unlock>
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	d908      	bls.n	8006ade <_free_r+0x42>
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	1821      	adds	r1, r4, r0
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf01      	itttt	eq
 8006ad4:	6819      	ldreq	r1, [r3, #0]
 8006ad6:	685b      	ldreq	r3, [r3, #4]
 8006ad8:	1809      	addeq	r1, r1, r0
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	e7ed      	b.n	8006aba <_free_r+0x1e>
 8006ade:	461a      	mov	r2, r3
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b10b      	cbz	r3, 8006ae8 <_free_r+0x4c>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d9fa      	bls.n	8006ade <_free_r+0x42>
 8006ae8:	6811      	ldr	r1, [r2, #0]
 8006aea:	1850      	adds	r0, r2, r1
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d10b      	bne.n	8006b08 <_free_r+0x6c>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	4401      	add	r1, r0
 8006af4:	1850      	adds	r0, r2, r1
 8006af6:	4283      	cmp	r3, r0
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	d1e0      	bne.n	8006abe <_free_r+0x22>
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	4408      	add	r0, r1
 8006b04:	6010      	str	r0, [r2, #0]
 8006b06:	e7da      	b.n	8006abe <_free_r+0x22>
 8006b08:	d902      	bls.n	8006b10 <_free_r+0x74>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	e7d6      	b.n	8006abe <_free_r+0x22>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	1821      	adds	r1, r4, r0
 8006b14:	428b      	cmp	r3, r1
 8006b16:	bf04      	itt	eq
 8006b18:	6819      	ldreq	r1, [r3, #0]
 8006b1a:	685b      	ldreq	r3, [r3, #4]
 8006b1c:	6063      	str	r3, [r4, #4]
 8006b1e:	bf04      	itt	eq
 8006b20:	1809      	addeq	r1, r1, r0
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	6054      	str	r4, [r2, #4]
 8006b26:	e7ca      	b.n	8006abe <_free_r+0x22>
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200022bc 	.word	0x200022bc

08006b30 <_init>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr

08006b3c <_fini>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr
